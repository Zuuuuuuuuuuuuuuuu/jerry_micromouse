
l476_jerry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08004164  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004164  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba7e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b6d  00000000  00000000  0002bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c6d  00000000  00000000  0002e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087ce  00000000  00000000  000564d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3c02  00000000  00000000  0005eca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001528a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  00152920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fe4 	.word	0x08003fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003fe4 	.word	0x08003fe4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <MX_GPIO_Init+0x114>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a3e      	ldr	r2, [pc, #248]	; (8000684 <MX_GPIO_Init+0x114>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <MX_GPIO_Init+0x114>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <MX_GPIO_Init+0x114>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a38      	ldr	r2, [pc, #224]	; (8000684 <MX_GPIO_Init+0x114>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <MX_GPIO_Init+0x114>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_GPIO_Init+0x114>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a32      	ldr	r2, [pc, #200]	; (8000684 <MX_GPIO_Init+0x114>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_GPIO_Init+0x114>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0x114>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0x114>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0x114>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BN2_SILNIK_Pin|BN1_SILNIK_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2103      	movs	r1, #3
 80005ea:	4827      	ldr	r0, [pc, #156]	; (8000688 <MX_GPIO_Init+0x118>)
 80005ec:	f000 fe00 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 fdfa 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AN1_SILNIK_Pin|AN2_SILNIK_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_GPIO_Init+0x11c>)
 8000604:	f000 fdf4 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0x120>)
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <MX_GPIO_Init+0x118>)
 800061e:	f000 fc3f 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BN2_SILNIK_Pin|BN1_SILNIK_Pin;
 8000622:	2303      	movs	r3, #3
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <MX_GPIO_Init+0x118>)
 800063a:	f000 fc31 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800063e:	2320      	movs	r3, #32
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fc22 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AN1_SILNIK_Pin|AN2_SILNIK_Pin;
 800065c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0x11c>)
 8000676:	f000 fc13 	bl	8000ea0 <HAL_GPIO_Init>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	48000800 	.word	0x48000800
 800068c:	48000400 	.word	0x48000400
 8000690:	10210000 	.word	0x10210000

08000694 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0a      	cmp	r3, #10
 80006a0:	d109      	bne.n	80006b6 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80006a2:	230d      	movs	r3, #13
 80006a4:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80006a6:	f107 010f 	add.w	r1, r7, #15
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ae:	2201      	movs	r2, #1
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <__io_putchar+0x3c>)
 80006b2:	f002 f901 	bl	80028b8 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b6:	1d39      	adds	r1, r7, #4
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006bc:	2201      	movs	r2, #1
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <__io_putchar+0x3c>)
 80006c0:	f002 f8fa 	bl	80028b8 <HAL_UART_Transmit>
    return 1;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000098 	.word	0x20000098

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fa5d 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f815 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff ff45 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f9bb 	bl	8000a60 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  //printf("dummy\n");
	  printf(" %d \n\r", i++);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <main+0x34>)
 80006f8:	f002 fd90 	bl	800321c <iprintf>
	  HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fac6 	bl	8000c90 <HAL_Delay>
	  printf(" %d \n\r", i++);
 8000704:	e7f3      	b.n	80006ee <main+0x1a>
 8000706:	bf00      	nop
 8000708:	08003ffc 	.word	0x08003ffc

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0b8      	sub	sp, #224	; 0xe0
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000716:	2244      	movs	r2, #68	; 0x44
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fd76 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2288      	movs	r2, #136	; 0x88
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fd68 	bl	800320c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000762:	230a      	movs	r3, #10
 8000764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000768:	2307      	movs	r3, #7
 800076a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fdb2 	bl	80012e8 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800078a:	f000 f836 	bl	80007fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2303      	movs	r3, #3
 8000796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007b0:	2104      	movs	r1, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f97e 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007be:	f000 f81c 	bl	80007fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80007c2:	2342      	movs	r3, #66	; 0x42
 80007c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fb73 	bl	8001ebc <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007dc:	f000 f80d 	bl	80007fa <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e4:	f000 fd2a 	bl	800123c <HAL_PWREx_ControlVoltageScaling>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80007ee:	f000 f804 	bl	80007fa <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	37e0      	adds	r7, #224	; 0xe0
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	; 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	; 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f9d4 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00a      	b.n	80008d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008be:	f3af 8000 	nop.w
 80008c2:	4601      	mov	r1, r0
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf0      	blt.n	80008be <_read+0x12>
	}

return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e009      	b.n	800090c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fec7 	bl	8000694 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <_write+0x12>
	}
	return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 fbfe 	bl	80031b8 <__errno>
 80009bc:	4602      	mov	r2, r0
 80009be:	230c      	movs	r3, #12
 80009c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20018000 	.word	0x20018000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	20000120 	.word	0x20000120

080009f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <SystemInit+0x64>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <SystemInit+0x64>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <SystemInit+0x68>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <SystemInit+0x68>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <SystemInit+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <SystemInit+0x68>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <SystemInit+0x68>)
 8000a20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <SystemInit+0x68>)
 8000a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SystemInit+0x68>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <SystemInit+0x68>)
 8000a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <SystemInit+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SystemInit+0x64>)
 8000a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART2_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	f001 feba 	bl	800281c <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f7ff fea4 	bl	80007fa <Error_Handler>
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	40004400 	.word	0x40004400

08000ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d128      	bne.n	8000b34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f000 f9b6 	bl	8000ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff ff54 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4e:	e003      	b.n	8000b58 <LoopCopyDataInit>

08000b50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b56:	3104      	adds	r1, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b60:	d3f6      	bcc.n	8000b50 <CopyDataInit>
	ldr	r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b64:	e002      	b.n	8000b6c <LoopFillZerobss>

08000b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b68:	f842 3b04 	str.w	r3, [r2], #4

08000b6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <LoopForever+0x16>)
	cmp	r2, r3
 8000b6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b70:	d3f9      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fb27 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fdad 	bl	80006d4 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b80:	080040f4 	.word	0x080040f4
	ldr	r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b88:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b8c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b90:	20000120 	.word	0x20000120

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f942 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f80f 	bl	8000bd8 <HAL_InitTick>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff fe1f 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d023      	beq.n	8000c34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_InitTick+0x70>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x6c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f93f 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10f      	bne.n	8000c2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d809      	bhi.n	8000c28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 f917 	bl	8000e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_InitTick+0x74>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e007      	b.n	8000c38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e004      	b.n	8000c38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e001      	b.n	8000c38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000118 	.word	0x20000118

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000118 	.word	0x20000118

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_Delay+0x40>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff47 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5c 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb0 	bl	8000df4 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	e17f      	b.n	80011b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8171 	beq.w	80011aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d118      	bne.n	8000f88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x128>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80ac 	beq.w	80011aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x32c>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <HAL_GPIO_Init+0x32c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <HAL_GPIO_Init+0x32c>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106a:	4a59      	ldr	r2, [pc, #356]	; (80011d0 <HAL_GPIO_Init+0x330>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x242>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <HAL_GPIO_Init+0x334>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x23e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4d      	ldr	r2, [pc, #308]	; (80011d8 <HAL_GPIO_Init+0x338>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x23a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <HAL_GPIO_Init+0x33c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x236>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <HAL_GPIO_Init+0x340>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x232>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_GPIO_Init+0x344>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x22e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <HAL_GPIO_Init+0x348>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x22a>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010e2:	2300      	movs	r3, #0
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f4:	4936      	ldr	r1, [pc, #216]	; (80011d0 <HAL_GPIO_Init+0x330>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_GPIO_Init+0x34c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_GPIO_Init+0x34c>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x34c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_GPIO_Init+0x34c>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_GPIO_Init+0x34c>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_GPIO_Init+0x34c>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x34c>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_GPIO_Init+0x34c>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f47f ae78 	bne.w	8000eb0 <HAL_GPIO_Init+0x10>
  }
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	48001400 	.word	0x48001400
 80011e8:	48001800 	.word	0x48001800
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120c:	e002      	b.n	8001214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_PWREx_GetVoltageRange+0x18>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124a:	d130      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001258:	d038      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001280:	e002      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d102      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f2      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d110      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ba:	d007      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3d4      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fa:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001304:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80e4 	beq.w	80014e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_RCC_OscConfig+0x4a>
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	f040 808b 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b01      	cmp	r3, #1
 800132e:	f040 8087 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x62>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e3ac      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_RCC_OscConfig+0x7c>
 800135a:	4b89      	ldr	r3, [pc, #548]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001362:	e005      	b.n	8001370 <HAL_RCC_OscConfig+0x88>
 8001364:	4b86      	ldr	r3, [pc, #536]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001370:	4293      	cmp	r3, r2
 8001372:	d223      	bcs.n	80013bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd3f 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e38d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b7d      	ldr	r3, [pc, #500]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7c      	ldr	r2, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4977      	ldr	r1, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4972      	ldr	r1, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
 80013ba:	e025      	b.n	8001408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6f      	ldr	r2, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	496a      	ldr	r1, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b69      	ldr	r3, [pc, #420]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	4965      	ldr	r1, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fcff 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e34d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001408:	f000 fc36 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 800140c:	4601      	mov	r1, r0
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_RCC_OscConfig+0x29c>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa21 f303 	lsr.w	r3, r1, r3
 8001424:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_RCC_OscConfig+0x2a0>)
 8001426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x2a4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbd3 	bl	8000bd8 <HAL_InitTick>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d052      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	e331      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d032      	beq.n	80014ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc10 	bl	8000c78 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145c:	f7ff fc0c 	bl	8000c78 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e31a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a40      	ldr	r2, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	493b      	ldr	r1, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4936      	ldr	r1, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e01a      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fbdd 	bl	8000c78 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbd9 	bl	8000c78 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e2e7      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1da>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d074      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x21a>
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d064      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d160      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e2c4      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x24a>
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e01d      	b.n	800156e <HAL_RCC_OscConfig+0x286>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x26e>
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x286>
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 800155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x298>)
 8001568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fb7f 	bl	8000c78 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157c:	e011      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	08004004 	.word	0x08004004
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb72 	bl	8000c78 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e280      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4baf      	ldr	r3, [pc, #700]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2a8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb62 	bl	8000c78 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb5e 	bl	8000c78 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e26c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	4ba5      	ldr	r3, [pc, #660]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d0>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d060      	beq.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x310>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d119      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e249      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b93      	ldr	r3, [pc, #588]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4990      	ldr	r1, [pc, #576]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	e040      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d023      	beq.n	8001676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b8c      	ldr	r3, [pc, #560]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a8b      	ldr	r2, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fb1d 	bl	8000c78 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fb19 	bl	8000c78 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e227      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	497c      	ldr	r1, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e018      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a79      	ldr	r2, [pc, #484]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff faf9 	bl	8000c78 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff faf5 	bl	8000c78 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e203      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fad4 	bl	8000c78 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fad0 	bl	8000c78 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1de      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fab7 	bl	8000c78 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fab3 	bl	8000c78 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1c1      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80a6 	beq.w	8001888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	4a43      	ldr	r2, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_OscConfig+0x57c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_OscConfig+0x57c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <HAL_RCC_OscConfig+0x57c>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001780:	f7ff fa7a 	bl	8000c78 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fa76 	bl	8000c78 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e184      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_RCC_OscConfig+0x57c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4d8>
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017be:	e024      	b.n	800180a <HAL_RCC_OscConfig+0x522>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d110      	bne.n	80017ea <HAL_RCC_OscConfig+0x502>
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a24      	ldr	r2, [pc, #144]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	e00f      	b.n	800180a <HAL_RCC_OscConfig+0x522>
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff fa31 	bl	8000c78 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fa2d 	bl	8000c78 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e139      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x578>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ed      	beq.n	800181a <HAL_RCC_OscConfig+0x532>
 800183e:	e01a      	b.n	8001876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fa1a 	bl	8000c78 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001846:	e00f      	b.n	8001868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff fa16 	bl	8000c78 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d906      	bls.n	8001868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e122      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	4b90      	ldr	r3, [pc, #576]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e8      	bne.n	8001848 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8108 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80d0 	bne.w	8001a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800189c:	4b83      	ldr	r3, [pc, #524]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d130      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	3b01      	subs	r3, #1
 80018bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d127      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11f      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018dc:	2a07      	cmp	r2, #7
 80018de:	bf14      	ite	ne
 80018e0:	2201      	movne	r2, #1
 80018e2:	2200      	moveq	r2, #0
 80018e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d113      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d06e      	beq.n	80019f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d069      	beq.n	80019ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001918:	4b64      	ldr	r3, [pc, #400]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b7      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001940:	f7ff f99a 	bl	8000c78 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f996 	bl	8000c78 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0a4      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x7c8>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001976:	3a01      	subs	r2, #1
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001980:	0212      	lsls	r2, r2, #8
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001988:	0852      	lsrs	r2, r2, #1
 800198a:	3a01      	subs	r2, #1
 800198c:	0552      	lsls	r2, r2, #21
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	3a01      	subs	r2, #1
 8001998:	0652      	lsls	r2, r2, #25
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a0:	0912      	lsrs	r2, r2, #4
 80019a2:	0452      	lsls	r2, r2, #17
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4941      	ldr	r1, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c4:	f7ff f958 	bl	8000c78 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f954 	bl	8000c78 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e062      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ea:	e05a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e059      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d152      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a14:	f7ff f930 	bl	8000c78 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f92c 	bl	8000c78 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e03a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x734>
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d02d      	beq.n	8001a9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f8ff 	bl	8000c78 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f8fb 	bl	8000c78 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e009      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_OscConfig+0x7c4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x796>
 8001a9c:	e001      	b.n	8001aa2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	f99d808c 	.word	0xf99d808c

08001ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0c8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4961      	ldr	r1, [pc, #388]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b0      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04c      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d121      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e09e      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d115      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e092      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3c:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e086      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4c:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e07e      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 0203 	bic.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	493f      	ldr	r1, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6e:	f7ff f883 	bl	8000c78 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b76:	f7ff f87f 	bl	8000c78 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e066      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 020c 	and.w	r2, r3, #12
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d1eb      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	492c      	ldr	r1, [pc, #176]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4924      	ldr	r1, [pc, #144]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e036      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4918      	ldr	r1, [pc, #96]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4910      	ldr	r1, [pc, #64]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2a:	f000 f825 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	fa21 f303 	lsr.w	r3, r1, r3
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe ffc2 	bl	8000bd8 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c58:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08004004 	.word	0x08004004
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d121      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d11e      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cac:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e004      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d133      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d002      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa4>
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e005      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	617b      	str	r3, [r7, #20]
      break;
 8001d2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	3301      	adds	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	fb02 f203 	mul.w	r2, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0e5b      	lsrs	r3, r3, #25
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	0800401c 	.word	0x0800401c
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dac:	4601      	mov	r1, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08004014 	.word	0x08004014

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd4:	f7ff ffda 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd8:	4601      	mov	r1, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08004014 	.word	0x08004014

08001dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e14:	f7ff fa04 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001e18:	6178      	str	r0, [r7, #20]
 8001e1a:	e014      	b.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	; 0x58
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e34:	f7ff f9f4 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d10b      	bne.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d919      	bls.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2ba0      	cmp	r3, #160	; 0xa0
 8001e58:	d902      	bls.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	e013      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e010      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d902      	bls.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e00a      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d102      	bne.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e004      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b70      	cmp	r3, #112	; 0x70
 8001e82:	d101      	bne.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0207 	bic.w	r2, r3, #7
 8001e90:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec8:	2300      	movs	r3, #0
 8001eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03f      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee6:	d802      	bhi.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00e      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001eec:	e01f      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef2:	d003      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef8:	d01c      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a84      	ldr	r2, [pc, #528]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fab9 	bl	8002488 <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fba0 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3c:	4b75      	ldr	r3, [pc, #468]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4a:	4972      	ldr	r1, [pc, #456]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03f      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f72:	d802      	bhi.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f78:	e01f      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7e:	d003      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f84:	d01c      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001f86:	e018      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a61      	ldr	r2, [pc, #388]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f94:	e015      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fa73 	bl	8002488 <RCCEx_PLLSAI1_Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa6:	e00c      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3320      	adds	r3, #32
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fb5a 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb8:	e003      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc8:	4b52      	ldr	r3, [pc, #328]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd6:	494f      	ldr	r1, [pc, #316]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fde:	e001      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a0 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a40      	ldr	r2, [pc, #256]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002024:	2301      	movs	r3, #1
 8002026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002034:	f7fe fe20 	bl	8000c78 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203c:	f7fe fe1c 	bl	8000c78 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d902      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	74fb      	strb	r3, [r7, #19]
        break;
 800204e:	e005      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d15c      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01f      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	d019      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe fddb 	bl	8000c78 <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c4:	e00b      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fdd7 	bl	8000c78 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d902      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	74fb      	strb	r3, [r7, #19]
            break;
 80020dc:	e006      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ec      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002102:	4904      	ldr	r1, [pc, #16]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210a:	e009      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
 8002110:	e006      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002120:	7c7b      	ldrb	r3, [r7, #17]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b9e      	ldr	r3, [pc, #632]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a9d      	ldr	r2, [pc, #628]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213e:	4b98      	ldr	r3, [pc, #608]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f023 0203 	bic.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	4994      	ldr	r1, [pc, #592]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 020c 	bic.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	498c      	ldr	r1, [pc, #560]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002182:	4b87      	ldr	r3, [pc, #540]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4983      	ldr	r1, [pc, #524]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a4:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	497b      	ldr	r1, [pc, #492]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	4972      	ldr	r1, [pc, #456]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e8:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	496a      	ldr	r1, [pc, #424]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	4961      	ldr	r1, [pc, #388]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800222c:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	4959      	ldr	r1, [pc, #356]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225c:	4950      	ldr	r1, [pc, #320]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	4948      	ldr	r1, [pc, #288]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	493f      	ldr	r1, [pc, #252]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d028      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c2:	4937      	ldr	r1, [pc, #220]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
 80022e0:	e011      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ea:	d10c      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8c8 	bl	8002488 <RCCEx_PLLSAI1_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d028      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	491f      	ldr	r1, [pc, #124]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002330:	d106      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233c:	60d3      	str	r3, [r2, #12]
 800233e:	e011      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f899 	bl	8002488 <RCCEx_PLLSAI1_Config>
 8002356:	4603      	mov	r3, r0
 8002358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02b      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800238e:	d109      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239a:	60d3      	str	r3, [r2, #12]
 800239c:	e014      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f867 	bl	8002488 <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d02f      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e2:	4928      	ldr	r1, [pc, #160]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f2:	d10d      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f844 	bl	8002488 <RCCEx_PLLSAI1_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d014      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	74bb      	strb	r3, [r7, #18]
 800240e:	e011      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002418:	d10c      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3320      	adds	r3, #32
 800241e:	2102      	movs	r1, #2
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f921 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002472:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800247a:	7cbb      	ldrb	r3, [r7, #18]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d018      	beq.n	80024d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024a2:	4b70      	ldr	r3, [pc, #448]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0203 	and.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
       ||
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ba:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
       ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d044      	beq.n	8002558 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e041      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d00c      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x6e>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d013      	beq.n	8002508 <RCCEx_PLLSAI1_Config+0x80>
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d120      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e4:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e01a      	b.n	800252c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002506:	e013      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002508:	4b56      	ldr	r3, [pc, #344]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002524:	e006      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
      break;
 800252a:	e004      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800252c:	bf00      	nop
 800252e:	e002      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002530:	bf00      	nop
 8002532:	e000      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002534:	bf00      	nop
    }

    if(status == HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	3b01      	subs	r3, #1
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	430b      	orrs	r3, r1
 8002552:	4944      	ldr	r1, [pc, #272]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d17d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002564:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256a:	f7fe fb85 	bl	8000c78 <HAL_GetTick>
 800256e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002570:	e009      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002572:	f7fe fb81 	bl	8000c78 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d902      	bls.n	8002586 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	73fb      	strb	r3, [r7, #15]
        break;
 8002584:	e005      	b.n	8002592 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ef      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d160      	bne.n	800265a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d111      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	0211      	lsls	r1, r2, #8
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68d2      	ldr	r2, [r2, #12]
 80025b4:	0912      	lsrs	r2, r2, #4
 80025b6:	0452      	lsls	r2, r2, #17
 80025b8:	430a      	orrs	r2, r1
 80025ba:	492a      	ldr	r1, [pc, #168]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	610b      	str	r3, [r1, #16]
 80025c0:	e027      	b.n	8002612 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d112      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6892      	ldr	r2, [r2, #8]
 80025d8:	0211      	lsls	r1, r2, #8
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6912      	ldr	r2, [r2, #16]
 80025de:	0852      	lsrs	r2, r2, #1
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0552      	lsls	r2, r2, #21
 80025e4:	430a      	orrs	r2, r1
 80025e6:	491f      	ldr	r1, [pc, #124]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	610b      	str	r3, [r1, #16]
 80025ec:	e011      	b.n	8002612 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	0211      	lsls	r1, r2, #8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6952      	ldr	r2, [r2, #20]
 8002604:	0852      	lsrs	r2, r2, #1
 8002606:	3a01      	subs	r2, #1
 8002608:	0652      	lsls	r2, r2, #25
 800260a:	430a      	orrs	r2, r1
 800260c:	4915      	ldr	r1, [pc, #84]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a13      	ldr	r2, [pc, #76]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fb2b 	bl	8000c78 <HAL_GetTick>
 8002622:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002624:	e009      	b.n	800263a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002626:	f7fe fb27 	bl	8000c78 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d902      	bls.n	800263a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	73fb      	strb	r3, [r7, #15]
          break;
 8002638:	e005      	b.n	8002646 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ef      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b68      	ldr	r3, [pc, #416]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002682:	4b65      	ldr	r3, [pc, #404]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
       ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800269a:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
       ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d044      	beq.n	8002738 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e041      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d00c      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x6e>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d013      	beq.n	80026e8 <RCCEx_PLLSAI2_Config+0x80>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d120      	bne.n	8002706 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c4:	4b54      	ldr	r3, [pc, #336]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11d      	bne.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e01a      	b.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e6:	e013      	b.n	8002710 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002704:	e006      	b.n	8002714 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      break;
 800270a:	e004      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800270c:	bf00      	nop
 800270e:	e002      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002714:	bf00      	nop
    }

    if(status == HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800271c:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	3b01      	subs	r3, #1
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	430b      	orrs	r3, r1
 8002732:	4939      	ldr	r1, [pc, #228]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d167      	bne.n	800280e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800273e:	4b36      	ldr	r3, [pc, #216]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a35      	ldr	r2, [pc, #212]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274a:	f7fe fa95 	bl	8000c78 <HAL_GetTick>
 800274e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002750:	e009      	b.n	8002766 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002752:	f7fe fa91 	bl	8000c78 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	73fb      	strb	r3, [r7, #15]
        break;
 8002764:	e005      	b.n	8002772 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ef      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d14a      	bne.n	800280e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d111      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	0211      	lsls	r1, r2, #8
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68d2      	ldr	r2, [r2, #12]
 8002794:	0912      	lsrs	r2, r2, #4
 8002796:	0452      	lsls	r2, r2, #17
 8002798:	430a      	orrs	r2, r1
 800279a:	491f      	ldr	r1, [pc, #124]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	614b      	str	r3, [r1, #20]
 80027a0:	e011      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6892      	ldr	r2, [r2, #8]
 80027b2:	0211      	lsls	r1, r2, #8
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6912      	ldr	r2, [r2, #16]
 80027b8:	0852      	lsrs	r2, r2, #1
 80027ba:	3a01      	subs	r2, #1
 80027bc:	0652      	lsls	r2, r2, #25
 80027be:	430a      	orrs	r2, r1
 80027c0:	4915      	ldr	r1, [pc, #84]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fa51 	bl	8000c78 <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027d8:	e009      	b.n	80027ee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027da:	f7fe fa4d 	bl	8000c78 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d902      	bls.n	80027ee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	73fb      	strb	r3, [r7, #15]
          break;
 80027ec:	e005      	b.n	80027fa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <RCCEx_PLLSAI2_Config+0x1b0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f93e 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8c0 	bl	80029e0 <UART_SetConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fb3e 	bl	8002ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fbc5 	bl	8003038 <UART_CheckIdleState>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 8081 	bne.w	80029d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_Transmit+0x26>
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e079      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_UART_Transmit+0x38>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e072      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002904:	f7fe f9b8 	bl	8000c78 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d108      	bne.n	8002936 <HAL_UART_Transmit+0x7e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e003      	b.n	800293e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002946:	e02d      	b.n	80029a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fbb5 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e039      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002974:	b292      	uxth	r2, r2
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	3302      	adds	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e008      	b.n	8002992 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b292      	uxth	r2, r2
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1cb      	bne.n	8002948 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2140      	movs	r1, #64	; 0x40
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb81 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e005      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029e4:	b088      	sub	sp, #32
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4bac      	ldr	r3, [pc, #688]	; (8002cc0 <UART_SetConfig+0x2e0>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4aa2      	ldr	r2, [pc, #648]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a99      	ldr	r2, [pc, #612]	; (8002cc8 <UART_SetConfig+0x2e8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d121      	bne.n	8002aac <UART_SetConfig+0xcc>
 8002a68:	4b98      	ldr	r3, [pc, #608]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d816      	bhi.n	8002aa4 <UART_SetConfig+0xc4>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <UART_SetConfig+0x9c>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002a93 	.word	0x08002a93
 8002a88:	08002a9f 	.word	0x08002a9f
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	76fb      	strb	r3, [r7, #27]
 8002a90:	e0e8      	b.n	8002c64 <UART_SetConfig+0x284>
 8002a92:	2302      	movs	r3, #2
 8002a94:	76fb      	strb	r3, [r7, #27]
 8002a96:	e0e5      	b.n	8002c64 <UART_SetConfig+0x284>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	76fb      	strb	r3, [r7, #27]
 8002a9c:	e0e2      	b.n	8002c64 <UART_SetConfig+0x284>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	76fb      	strb	r3, [r7, #27]
 8002aa2:	e0df      	b.n	8002c64 <UART_SetConfig+0x284>
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	76fb      	strb	r3, [r7, #27]
 8002aa8:	bf00      	nop
 8002aaa:	e0db      	b.n	8002c64 <UART_SetConfig+0x284>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <UART_SetConfig+0x2f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d134      	bne.n	8002b20 <UART_SetConfig+0x140>
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d829      	bhi.n	8002b18 <UART_SetConfig+0x138>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <UART_SetConfig+0xec>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002b01 	.word	0x08002b01
 8002ad0:	08002b19 	.word	0x08002b19
 8002ad4:	08002b19 	.word	0x08002b19
 8002ad8:	08002b19 	.word	0x08002b19
 8002adc:	08002b0d 	.word	0x08002b0d
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b07 	.word	0x08002b07
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002b19 	.word	0x08002b19
 8002afc:	08002b13 	.word	0x08002b13
 8002b00:	2300      	movs	r3, #0
 8002b02:	76fb      	strb	r3, [r7, #27]
 8002b04:	e0ae      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b06:	2302      	movs	r3, #2
 8002b08:	76fb      	strb	r3, [r7, #27]
 8002b0a:	e0ab      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	76fb      	strb	r3, [r7, #27]
 8002b10:	e0a8      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b12:	2308      	movs	r3, #8
 8002b14:	76fb      	strb	r3, [r7, #27]
 8002b16:	e0a5      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	76fb      	strb	r3, [r7, #27]
 8002b1c:	bf00      	nop
 8002b1e:	e0a1      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6b      	ldr	r2, [pc, #428]	; (8002cd4 <UART_SetConfig+0x2f4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d120      	bne.n	8002b6c <UART_SetConfig+0x18c>
 8002b2a:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d00f      	beq.n	8002b58 <UART_SetConfig+0x178>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d802      	bhi.n	8002b42 <UART_SetConfig+0x162>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <UART_SetConfig+0x16c>
 8002b40:	e010      	b.n	8002b64 <UART_SetConfig+0x184>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d005      	beq.n	8002b52 <UART_SetConfig+0x172>
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d009      	beq.n	8002b5e <UART_SetConfig+0x17e>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x184>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	76fb      	strb	r3, [r7, #27]
 8002b50:	e088      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b52:	2302      	movs	r3, #2
 8002b54:	76fb      	strb	r3, [r7, #27]
 8002b56:	e085      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	76fb      	strb	r3, [r7, #27]
 8002b5c:	e082      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	76fb      	strb	r3, [r7, #27]
 8002b62:	e07f      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b64:	2310      	movs	r3, #16
 8002b66:	76fb      	strb	r3, [r7, #27]
 8002b68:	bf00      	nop
 8002b6a:	e07b      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a59      	ldr	r2, [pc, #356]	; (8002cd8 <UART_SetConfig+0x2f8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d120      	bne.n	8002bb8 <UART_SetConfig+0x1d8>
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d00f      	beq.n	8002ba4 <UART_SetConfig+0x1c4>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d802      	bhi.n	8002b8e <UART_SetConfig+0x1ae>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <UART_SetConfig+0x1b8>
 8002b8c:	e010      	b.n	8002bb0 <UART_SetConfig+0x1d0>
 8002b8e:	2b80      	cmp	r3, #128	; 0x80
 8002b90:	d005      	beq.n	8002b9e <UART_SetConfig+0x1be>
 8002b92:	2bc0      	cmp	r3, #192	; 0xc0
 8002b94:	d009      	beq.n	8002baa <UART_SetConfig+0x1ca>
 8002b96:	e00b      	b.n	8002bb0 <UART_SetConfig+0x1d0>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	76fb      	strb	r3, [r7, #27]
 8002b9c:	e062      	b.n	8002c64 <UART_SetConfig+0x284>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	76fb      	strb	r3, [r7, #27]
 8002ba2:	e05f      	b.n	8002c64 <UART_SetConfig+0x284>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	76fb      	strb	r3, [r7, #27]
 8002ba8:	e05c      	b.n	8002c64 <UART_SetConfig+0x284>
 8002baa:	2308      	movs	r3, #8
 8002bac:	76fb      	strb	r3, [r7, #27]
 8002bae:	e059      	b.n	8002c64 <UART_SetConfig+0x284>
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	76fb      	strb	r3, [r7, #27]
 8002bb4:	bf00      	nop
 8002bb6:	e055      	b.n	8002c64 <UART_SetConfig+0x284>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a47      	ldr	r2, [pc, #284]	; (8002cdc <UART_SetConfig+0x2fc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d124      	bne.n	8002c0c <UART_SetConfig+0x22c>
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd0:	d012      	beq.n	8002bf8 <UART_SetConfig+0x218>
 8002bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd6:	d802      	bhi.n	8002bde <UART_SetConfig+0x1fe>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <UART_SetConfig+0x20c>
 8002bdc:	e012      	b.n	8002c04 <UART_SetConfig+0x224>
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d006      	beq.n	8002bf2 <UART_SetConfig+0x212>
 8002be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be8:	d009      	beq.n	8002bfe <UART_SetConfig+0x21e>
 8002bea:	e00b      	b.n	8002c04 <UART_SetConfig+0x224>
 8002bec:	2300      	movs	r3, #0
 8002bee:	76fb      	strb	r3, [r7, #27]
 8002bf0:	e038      	b.n	8002c64 <UART_SetConfig+0x284>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	76fb      	strb	r3, [r7, #27]
 8002bf6:	e035      	b.n	8002c64 <UART_SetConfig+0x284>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e032      	b.n	8002c64 <UART_SetConfig+0x284>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	76fb      	strb	r3, [r7, #27]
 8002c02:	e02f      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c04:	2310      	movs	r3, #16
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	bf00      	nop
 8002c0a:	e02b      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d124      	bne.n	8002c60 <UART_SetConfig+0x280>
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d012      	beq.n	8002c4c <UART_SetConfig+0x26c>
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d802      	bhi.n	8002c32 <UART_SetConfig+0x252>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <UART_SetConfig+0x260>
 8002c30:	e012      	b.n	8002c58 <UART_SetConfig+0x278>
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c36:	d006      	beq.n	8002c46 <UART_SetConfig+0x266>
 8002c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c3c:	d009      	beq.n	8002c52 <UART_SetConfig+0x272>
 8002c3e:	e00b      	b.n	8002c58 <UART_SetConfig+0x278>
 8002c40:	2300      	movs	r3, #0
 8002c42:	76fb      	strb	r3, [r7, #27]
 8002c44:	e00e      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c46:	2302      	movs	r3, #2
 8002c48:	76fb      	strb	r3, [r7, #27]
 8002c4a:	e00b      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	76fb      	strb	r3, [r7, #27]
 8002c50:	e008      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c52:	2308      	movs	r3, #8
 8002c54:	76fb      	strb	r3, [r7, #27]
 8002c56:	e005      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	76fb      	strb	r3, [r7, #27]
 8002c5c:	bf00      	nop
 8002c5e:	e001      	b.n	8002c64 <UART_SetConfig+0x284>
 8002c60:	2310      	movs	r3, #16
 8002c62:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f040 8087 	bne.w	8002d7e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c70:	7efb      	ldrb	r3, [r7, #27]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d836      	bhi.n	8002ce4 <UART_SetConfig+0x304>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <UART_SetConfig+0x29c>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002ca1 	.word	0x08002ca1
 8002c80:	08002ce5 	.word	0x08002ce5
 8002c84:	08002ca9 	.word	0x08002ca9
 8002c88:	08002ce5 	.word	0x08002ce5
 8002c8c:	08002caf 	.word	0x08002caf
 8002c90:	08002ce5 	.word	0x08002ce5
 8002c94:	08002ce5 	.word	0x08002ce5
 8002c98:	08002ce5 	.word	0x08002ce5
 8002c9c:	08002cb7 	.word	0x08002cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7ff f880 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002ca4:	6178      	str	r0, [r7, #20]
        break;
 8002ca6:	e022      	b.n	8002cee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <UART_SetConfig+0x300>)
 8002caa:	617b      	str	r3, [r7, #20]
        break;
 8002cac:	e01f      	b.n	8002cee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cae:	f7fe ffe3 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002cb2:	6178      	str	r0, [r7, #20]
        break;
 8002cb4:	e01b      	b.n	8002cee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cba:	617b      	str	r3, [r7, #20]
        break;
 8002cbc:	e017      	b.n	8002cee <UART_SetConfig+0x30e>
 8002cbe:	bf00      	nop
 8002cc0:	efff69f3 	.word	0xefff69f3
 8002cc4:	40008000 	.word	0x40008000
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40004400 	.word	0x40004400
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	40004c00 	.word	0x40004c00
 8002cdc:	40005000 	.word	0x40005000
 8002ce0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	76bb      	strb	r3, [r7, #26]
        break;
 8002cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80f1 	beq.w	8002ed8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d305      	bcc.n	8002d12 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d902      	bls.n	8002d18 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	76bb      	strb	r3, [r7, #26]
 8002d16:	e0df      	b.n	8002ed8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	0214      	lsls	r4, r2, #8
 8002d2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d2e:	020b      	lsls	r3, r1, #8
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6852      	ldr	r2, [r2, #4]
 8002d34:	0852      	lsrs	r2, r2, #1
 8002d36:	4611      	mov	r1, r2
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	eb13 0b01 	adds.w	fp, r3, r1
 8002d40:	eb44 0c02 	adc.w	ip, r4, r2
 8002d44:	4658      	mov	r0, fp
 8002d46:	4661      	mov	r1, ip
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	f7fd fa8c 	bl	8000270 <__aeabi_uldivmod>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d64:	d308      	bcc.n	8002d78 <UART_SetConfig+0x398>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6c:	d204      	bcs.n	8002d78 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	e0af      	b.n	8002ed8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	76bb      	strb	r3, [r7, #26]
 8002d7c:	e0ac      	b.n	8002ed8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d86:	d15b      	bne.n	8002e40 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002d88:	7efb      	ldrb	r3, [r7, #27]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d827      	bhi.n	8002dde <UART_SetConfig+0x3fe>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <UART_SetConfig+0x3b4>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dc9 	.word	0x08002dc9
 8002da0:	08002ddf 	.word	0x08002ddf
 8002da4:	08002dcf 	.word	0x08002dcf
 8002da8:	08002ddf 	.word	0x08002ddf
 8002dac:	08002ddf 	.word	0x08002ddf
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002dd7 	.word	0x08002dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7fe fff4 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	6178      	str	r0, [r7, #20]
        break;
 8002dbe:	e013      	b.n	8002de8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7ff f806 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	6178      	str	r0, [r7, #20]
        break;
 8002dc6:	e00f      	b.n	8002de8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc8:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <UART_SetConfig+0x510>)
 8002dca:	617b      	str	r3, [r7, #20]
        break;
 8002dcc:	e00c      	b.n	8002de8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dce:	f7fe ff53 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002dd2:	6178      	str	r0, [r7, #20]
        break;
 8002dd4:	e008      	b.n	8002de8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e004      	b.n	8002de8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	76bb      	strb	r3, [r7, #26]
        break;
 8002de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d074      	beq.n	8002ed8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005a      	lsls	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d916      	bls.n	8002e3a <UART_SetConfig+0x45a>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d212      	bcs.n	8002e3a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f023 030f 	bic.w	r3, r3, #15
 8002e1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	89fb      	ldrh	r3, [r7, #14]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	89fa      	ldrh	r2, [r7, #14]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e04e      	b.n	8002ed8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	76bb      	strb	r3, [r7, #26]
 8002e3e:	e04b      	b.n	8002ed8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e40:	7efb      	ldrb	r3, [r7, #27]
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d827      	bhi.n	8002e96 <UART_SetConfig+0x4b6>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x46c>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e97 	.word	0x08002e97
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e97 	.word	0x08002e97
 8002e64:	08002e97 	.word	0x08002e97
 8002e68:	08002e97 	.word	0x08002e97
 8002e6c:	08002e8f 	.word	0x08002e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe ff98 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002e74:	6178      	str	r0, [r7, #20]
        break;
 8002e76:	e013      	b.n	8002ea0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7fe ffaa 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002e7c:	6178      	str	r0, [r7, #20]
        break;
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <UART_SetConfig+0x510>)
 8002e82:	617b      	str	r3, [r7, #20]
        break;
 8002e84:	e00c      	b.n	8002ea0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e86:	f7fe fef7 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002e8a:	6178      	str	r0, [r7, #20]
        break;
 8002e8c:	e008      	b.n	8002ea0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	617b      	str	r3, [r7, #20]
        break;
 8002e94:	e004      	b.n	8002ea0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	76bb      	strb	r3, [r7, #26]
        break;
 8002e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	085a      	lsrs	r2, r3, #1
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	441a      	add	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	d908      	bls.n	8002ed4 <UART_SetConfig+0x4f4>
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d204      	bcs.n	8002ed4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	e001      	b.n	8002ed8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ee4:	7ebb      	ldrb	r3, [r7, #26]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002ef0:	00f42400 	.word	0x00f42400

08002ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01a      	beq.n	800300a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff2:	d10a      	bne.n	800300a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003046:	f7fd fe17 	bl	8000c78 <HAL_GetTick>
 800304a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d10e      	bne.n	8003078 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f82a 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e020      	b.n	80030ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d10e      	bne.n	80030a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f814 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e00a      	b.n	80030ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d2:	e05d      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030da:	d059      	beq.n	8003190 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7fd fdcc 	bl	8000c78 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11b      	bne.n	800312a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003100:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e042      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02b      	beq.n	8003190 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d123      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003150:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003160:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e00f      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d092      	beq.n	80030d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4e0d      	ldr	r6, [pc, #52]	; (80031fc <__libc_init_array+0x38>)
 80031c8:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031ca:	1ba4      	subs	r4, r4, r6
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	2500      	movs	r5, #0
 80031d0:	42a5      	cmp	r5, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	4e0b      	ldr	r6, [pc, #44]	; (8003204 <__libc_init_array+0x40>)
 80031d6:	4c0c      	ldr	r4, [pc, #48]	; (8003208 <__libc_init_array+0x44>)
 80031d8:	f000 ff04 	bl	8003fe4 <_init>
 80031dc:	1ba4      	subs	r4, r4, r6
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	2500      	movs	r5, #0
 80031e2:	42a5      	cmp	r5, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ec:	4798      	blx	r3
 80031ee:	3501      	adds	r5, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f6:	4798      	blx	r3
 80031f8:	3501      	adds	r5, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	080040ec 	.word	0x080040ec
 8003200:	080040ec 	.word	0x080040ec
 8003204:	080040ec 	.word	0x080040ec
 8003208:	080040f0 	.word	0x080040f0

0800320c <memset>:
 800320c:	4402      	add	r2, r0
 800320e:	4603      	mov	r3, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <iprintf>:
 800321c:	b40f      	push	{r0, r1, r2, r3}
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <iprintf+0x2c>)
 8003220:	b513      	push	{r0, r1, r4, lr}
 8003222:	681c      	ldr	r4, [r3, #0]
 8003224:	b124      	cbz	r4, 8003230 <iprintf+0x14>
 8003226:	69a3      	ldr	r3, [r4, #24]
 8003228:	b913      	cbnz	r3, 8003230 <iprintf+0x14>
 800322a:	4620      	mov	r0, r4
 800322c:	f000 f84e 	bl	80032cc <__sinit>
 8003230:	ab05      	add	r3, sp, #20
 8003232:	9a04      	ldr	r2, [sp, #16]
 8003234:	68a1      	ldr	r1, [r4, #8]
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	4620      	mov	r0, r4
 800323a:	f000 f955 	bl	80034e8 <_vfiprintf_r>
 800323e:	b002      	add	sp, #8
 8003240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003244:	b004      	add	sp, #16
 8003246:	4770      	bx	lr
 8003248:	2000000c 	.word	0x2000000c

0800324c <std>:
 800324c:	2300      	movs	r3, #0
 800324e:	b510      	push	{r4, lr}
 8003250:	4604      	mov	r4, r0
 8003252:	e9c0 3300 	strd	r3, r3, [r0]
 8003256:	6083      	str	r3, [r0, #8]
 8003258:	8181      	strh	r1, [r0, #12]
 800325a:	6643      	str	r3, [r0, #100]	; 0x64
 800325c:	81c2      	strh	r2, [r0, #14]
 800325e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003262:	6183      	str	r3, [r0, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	2208      	movs	r2, #8
 8003268:	305c      	adds	r0, #92	; 0x5c
 800326a:	f7ff ffcf 	bl	800320c <memset>
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <std+0x38>)
 8003270:	6263      	str	r3, [r4, #36]	; 0x24
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <std+0x3c>)
 8003274:	62a3      	str	r3, [r4, #40]	; 0x28
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <std+0x40>)
 8003278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <std+0x44>)
 800327c:	6224      	str	r4, [r4, #32]
 800327e:	6323      	str	r3, [r4, #48]	; 0x30
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	08003a45 	.word	0x08003a45
 8003288:	08003a67 	.word	0x08003a67
 800328c:	08003a9f 	.word	0x08003a9f
 8003290:	08003ac3 	.word	0x08003ac3

08003294 <_cleanup_r>:
 8003294:	4901      	ldr	r1, [pc, #4]	; (800329c <_cleanup_r+0x8>)
 8003296:	f000 b885 	b.w	80033a4 <_fwalk_reent>
 800329a:	bf00      	nop
 800329c:	08003d9d 	.word	0x08003d9d

080032a0 <__sfmoreglue>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	1e4a      	subs	r2, r1, #1
 80032a4:	2568      	movs	r5, #104	; 0x68
 80032a6:	4355      	muls	r5, r2
 80032a8:	460e      	mov	r6, r1
 80032aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ae:	f000 f897 	bl	80033e0 <_malloc_r>
 80032b2:	4604      	mov	r4, r0
 80032b4:	b140      	cbz	r0, 80032c8 <__sfmoreglue+0x28>
 80032b6:	2100      	movs	r1, #0
 80032b8:	e9c0 1600 	strd	r1, r6, [r0]
 80032bc:	300c      	adds	r0, #12
 80032be:	60a0      	str	r0, [r4, #8]
 80032c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032c4:	f7ff ffa2 	bl	800320c <memset>
 80032c8:	4620      	mov	r0, r4
 80032ca:	bd70      	pop	{r4, r5, r6, pc}

080032cc <__sinit>:
 80032cc:	6983      	ldr	r3, [r0, #24]
 80032ce:	b510      	push	{r4, lr}
 80032d0:	4604      	mov	r4, r0
 80032d2:	bb33      	cbnz	r3, 8003322 <__sinit+0x56>
 80032d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032d8:	6503      	str	r3, [r0, #80]	; 0x50
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <__sinit+0x58>)
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <__sinit+0x5c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6282      	str	r2, [r0, #40]	; 0x28
 80032e2:	4298      	cmp	r0, r3
 80032e4:	bf04      	itt	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	6183      	streq	r3, [r0, #24]
 80032ea:	f000 f81f 	bl	800332c <__sfp>
 80032ee:	6060      	str	r0, [r4, #4]
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 f81b 	bl	800332c <__sfp>
 80032f6:	60a0      	str	r0, [r4, #8]
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 f817 	bl	800332c <__sfp>
 80032fe:	2200      	movs	r2, #0
 8003300:	60e0      	str	r0, [r4, #12]
 8003302:	2104      	movs	r1, #4
 8003304:	6860      	ldr	r0, [r4, #4]
 8003306:	f7ff ffa1 	bl	800324c <std>
 800330a:	2201      	movs	r2, #1
 800330c:	2109      	movs	r1, #9
 800330e:	68a0      	ldr	r0, [r4, #8]
 8003310:	f7ff ff9c 	bl	800324c <std>
 8003314:	2202      	movs	r2, #2
 8003316:	2112      	movs	r1, #18
 8003318:	68e0      	ldr	r0, [r4, #12]
 800331a:	f7ff ff97 	bl	800324c <std>
 800331e:	2301      	movs	r3, #1
 8003320:	61a3      	str	r3, [r4, #24]
 8003322:	bd10      	pop	{r4, pc}
 8003324:	0800404c 	.word	0x0800404c
 8003328:	08003295 	.word	0x08003295

0800332c <__sfp>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <__sfp+0x70>)
 8003330:	681e      	ldr	r6, [r3, #0]
 8003332:	69b3      	ldr	r3, [r6, #24]
 8003334:	4607      	mov	r7, r0
 8003336:	b913      	cbnz	r3, 800333e <__sfp+0x12>
 8003338:	4630      	mov	r0, r6
 800333a:	f7ff ffc7 	bl	80032cc <__sinit>
 800333e:	3648      	adds	r6, #72	; 0x48
 8003340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003344:	3b01      	subs	r3, #1
 8003346:	d503      	bpl.n	8003350 <__sfp+0x24>
 8003348:	6833      	ldr	r3, [r6, #0]
 800334a:	b133      	cbz	r3, 800335a <__sfp+0x2e>
 800334c:	6836      	ldr	r6, [r6, #0]
 800334e:	e7f7      	b.n	8003340 <__sfp+0x14>
 8003350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003354:	b16d      	cbz	r5, 8003372 <__sfp+0x46>
 8003356:	3468      	adds	r4, #104	; 0x68
 8003358:	e7f4      	b.n	8003344 <__sfp+0x18>
 800335a:	2104      	movs	r1, #4
 800335c:	4638      	mov	r0, r7
 800335e:	f7ff ff9f 	bl	80032a0 <__sfmoreglue>
 8003362:	6030      	str	r0, [r6, #0]
 8003364:	2800      	cmp	r0, #0
 8003366:	d1f1      	bne.n	800334c <__sfp+0x20>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4604      	mov	r4, r0
 800336e:	4620      	mov	r0, r4
 8003370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <__sfp+0x74>)
 8003374:	6665      	str	r5, [r4, #100]	; 0x64
 8003376:	e9c4 5500 	strd	r5, r5, [r4]
 800337a:	60a5      	str	r5, [r4, #8]
 800337c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003380:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003384:	2208      	movs	r2, #8
 8003386:	4629      	mov	r1, r5
 8003388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800338c:	f7ff ff3e 	bl	800320c <memset>
 8003390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003398:	e7e9      	b.n	800336e <__sfp+0x42>
 800339a:	bf00      	nop
 800339c:	0800404c 	.word	0x0800404c
 80033a0:	ffff0001 	.word	0xffff0001

080033a4 <_fwalk_reent>:
 80033a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a8:	4680      	mov	r8, r0
 80033aa:	4689      	mov	r9, r1
 80033ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033b0:	2600      	movs	r6, #0
 80033b2:	b914      	cbnz	r4, 80033ba <_fwalk_reent+0x16>
 80033b4:	4630      	mov	r0, r6
 80033b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033be:	3f01      	subs	r7, #1
 80033c0:	d501      	bpl.n	80033c6 <_fwalk_reent+0x22>
 80033c2:	6824      	ldr	r4, [r4, #0]
 80033c4:	e7f5      	b.n	80033b2 <_fwalk_reent+0xe>
 80033c6:	89ab      	ldrh	r3, [r5, #12]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d907      	bls.n	80033dc <_fwalk_reent+0x38>
 80033cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033d0:	3301      	adds	r3, #1
 80033d2:	d003      	beq.n	80033dc <_fwalk_reent+0x38>
 80033d4:	4629      	mov	r1, r5
 80033d6:	4640      	mov	r0, r8
 80033d8:	47c8      	blx	r9
 80033da:	4306      	orrs	r6, r0
 80033dc:	3568      	adds	r5, #104	; 0x68
 80033de:	e7ee      	b.n	80033be <_fwalk_reent+0x1a>

080033e0 <_malloc_r>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	1ccd      	adds	r5, r1, #3
 80033e4:	f025 0503 	bic.w	r5, r5, #3
 80033e8:	3508      	adds	r5, #8
 80033ea:	2d0c      	cmp	r5, #12
 80033ec:	bf38      	it	cc
 80033ee:	250c      	movcc	r5, #12
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	4606      	mov	r6, r0
 80033f4:	db01      	blt.n	80033fa <_malloc_r+0x1a>
 80033f6:	42a9      	cmp	r1, r5
 80033f8:	d903      	bls.n	8003402 <_malloc_r+0x22>
 80033fa:	230c      	movs	r3, #12
 80033fc:	6033      	str	r3, [r6, #0]
 80033fe:	2000      	movs	r0, #0
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	f000 fd6b 	bl	8003edc <__malloc_lock>
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <_malloc_r+0xac>)
 8003408:	6814      	ldr	r4, [r2, #0]
 800340a:	4621      	mov	r1, r4
 800340c:	b991      	cbnz	r1, 8003434 <_malloc_r+0x54>
 800340e:	4c20      	ldr	r4, [pc, #128]	; (8003490 <_malloc_r+0xb0>)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	b91b      	cbnz	r3, 800341c <_malloc_r+0x3c>
 8003414:	4630      	mov	r0, r6
 8003416:	f000 fb05 	bl	8003a24 <_sbrk_r>
 800341a:	6020      	str	r0, [r4, #0]
 800341c:	4629      	mov	r1, r5
 800341e:	4630      	mov	r0, r6
 8003420:	f000 fb00 	bl	8003a24 <_sbrk_r>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d124      	bne.n	8003472 <_malloc_r+0x92>
 8003428:	230c      	movs	r3, #12
 800342a:	6033      	str	r3, [r6, #0]
 800342c:	4630      	mov	r0, r6
 800342e:	f000 fd56 	bl	8003ede <__malloc_unlock>
 8003432:	e7e4      	b.n	80033fe <_malloc_r+0x1e>
 8003434:	680b      	ldr	r3, [r1, #0]
 8003436:	1b5b      	subs	r3, r3, r5
 8003438:	d418      	bmi.n	800346c <_malloc_r+0x8c>
 800343a:	2b0b      	cmp	r3, #11
 800343c:	d90f      	bls.n	800345e <_malloc_r+0x7e>
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	50cd      	str	r5, [r1, r3]
 8003442:	18cc      	adds	r4, r1, r3
 8003444:	4630      	mov	r0, r6
 8003446:	f000 fd4a 	bl	8003ede <__malloc_unlock>
 800344a:	f104 000b 	add.w	r0, r4, #11
 800344e:	1d23      	adds	r3, r4, #4
 8003450:	f020 0007 	bic.w	r0, r0, #7
 8003454:	1ac3      	subs	r3, r0, r3
 8003456:	d0d3      	beq.n	8003400 <_malloc_r+0x20>
 8003458:	425a      	negs	r2, r3
 800345a:	50e2      	str	r2, [r4, r3]
 800345c:	e7d0      	b.n	8003400 <_malloc_r+0x20>
 800345e:	428c      	cmp	r4, r1
 8003460:	684b      	ldr	r3, [r1, #4]
 8003462:	bf16      	itet	ne
 8003464:	6063      	strne	r3, [r4, #4]
 8003466:	6013      	streq	r3, [r2, #0]
 8003468:	460c      	movne	r4, r1
 800346a:	e7eb      	b.n	8003444 <_malloc_r+0x64>
 800346c:	460c      	mov	r4, r1
 800346e:	6849      	ldr	r1, [r1, #4]
 8003470:	e7cc      	b.n	800340c <_malloc_r+0x2c>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d005      	beq.n	8003488 <_malloc_r+0xa8>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4630      	mov	r0, r6
 8003480:	f000 fad0 	bl	8003a24 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d0cf      	beq.n	8003428 <_malloc_r+0x48>
 8003488:	6025      	str	r5, [r4, #0]
 800348a:	e7db      	b.n	8003444 <_malloc_r+0x64>
 800348c:	20000090 	.word	0x20000090
 8003490:	20000094 	.word	0x20000094

08003494 <__sfputc_r>:
 8003494:	6893      	ldr	r3, [r2, #8]
 8003496:	3b01      	subs	r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	b410      	push	{r4}
 800349c:	6093      	str	r3, [r2, #8]
 800349e:	da08      	bge.n	80034b2 <__sfputc_r+0x1e>
 80034a0:	6994      	ldr	r4, [r2, #24]
 80034a2:	42a3      	cmp	r3, r4
 80034a4:	db01      	blt.n	80034aa <__sfputc_r+0x16>
 80034a6:	290a      	cmp	r1, #10
 80034a8:	d103      	bne.n	80034b2 <__sfputc_r+0x1e>
 80034aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ae:	f000 bb0d 	b.w	8003acc <__swbuf_r>
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	1c58      	adds	r0, r3, #1
 80034b6:	6010      	str	r0, [r2, #0]
 80034b8:	7019      	strb	r1, [r3, #0]
 80034ba:	4608      	mov	r0, r1
 80034bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <__sfputs_r>:
 80034c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c4:	4606      	mov	r6, r0
 80034c6:	460f      	mov	r7, r1
 80034c8:	4614      	mov	r4, r2
 80034ca:	18d5      	adds	r5, r2, r3
 80034cc:	42ac      	cmp	r4, r5
 80034ce:	d101      	bne.n	80034d4 <__sfputs_r+0x12>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e007      	b.n	80034e4 <__sfputs_r+0x22>
 80034d4:	463a      	mov	r2, r7
 80034d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034da:	4630      	mov	r0, r6
 80034dc:	f7ff ffda 	bl	8003494 <__sfputc_r>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d1f3      	bne.n	80034cc <__sfputs_r+0xa>
 80034e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034e8 <_vfiprintf_r>:
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	460c      	mov	r4, r1
 80034ee:	b09d      	sub	sp, #116	; 0x74
 80034f0:	4617      	mov	r7, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	4606      	mov	r6, r0
 80034f6:	b118      	cbz	r0, 8003500 <_vfiprintf_r+0x18>
 80034f8:	6983      	ldr	r3, [r0, #24]
 80034fa:	b90b      	cbnz	r3, 8003500 <_vfiprintf_r+0x18>
 80034fc:	f7ff fee6 	bl	80032cc <__sinit>
 8003500:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <_vfiprintf_r+0x20c>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d158      	bne.n	80035b8 <_vfiprintf_r+0xd0>
 8003506:	6874      	ldr	r4, [r6, #4]
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	0718      	lsls	r0, r3, #28
 800350c:	d55e      	bpl.n	80035cc <_vfiprintf_r+0xe4>
 800350e:	6923      	ldr	r3, [r4, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <_vfiprintf_r+0xe4>
 8003514:	2300      	movs	r3, #0
 8003516:	9309      	str	r3, [sp, #36]	; 0x24
 8003518:	2320      	movs	r3, #32
 800351a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800351e:	2330      	movs	r3, #48	; 0x30
 8003520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003524:	9503      	str	r5, [sp, #12]
 8003526:	f04f 0b01 	mov.w	fp, #1
 800352a:	46b8      	mov	r8, r7
 800352c:	4645      	mov	r5, r8
 800352e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003532:	b10b      	cbz	r3, 8003538 <_vfiprintf_r+0x50>
 8003534:	2b25      	cmp	r3, #37	; 0x25
 8003536:	d154      	bne.n	80035e2 <_vfiprintf_r+0xfa>
 8003538:	ebb8 0a07 	subs.w	sl, r8, r7
 800353c:	d00b      	beq.n	8003556 <_vfiprintf_r+0x6e>
 800353e:	4653      	mov	r3, sl
 8003540:	463a      	mov	r2, r7
 8003542:	4621      	mov	r1, r4
 8003544:	4630      	mov	r0, r6
 8003546:	f7ff ffbc 	bl	80034c2 <__sfputs_r>
 800354a:	3001      	adds	r0, #1
 800354c:	f000 80c2 	beq.w	80036d4 <_vfiprintf_r+0x1ec>
 8003550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003552:	4453      	add	r3, sl
 8003554:	9309      	str	r3, [sp, #36]	; 0x24
 8003556:	f898 3000 	ldrb.w	r3, [r8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80ba 	beq.w	80036d4 <_vfiprintf_r+0x1ec>
 8003560:	2300      	movs	r3, #0
 8003562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800356a:	9304      	str	r3, [sp, #16]
 800356c:	9307      	str	r3, [sp, #28]
 800356e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003572:	931a      	str	r3, [sp, #104]	; 0x68
 8003574:	46a8      	mov	r8, r5
 8003576:	2205      	movs	r2, #5
 8003578:	f818 1b01 	ldrb.w	r1, [r8], #1
 800357c:	485e      	ldr	r0, [pc, #376]	; (80036f8 <_vfiprintf_r+0x210>)
 800357e:	f7fc fe27 	bl	80001d0 <memchr>
 8003582:	9b04      	ldr	r3, [sp, #16]
 8003584:	bb78      	cbnz	r0, 80035e6 <_vfiprintf_r+0xfe>
 8003586:	06d9      	lsls	r1, r3, #27
 8003588:	bf44      	itt	mi
 800358a:	2220      	movmi	r2, #32
 800358c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003590:	071a      	lsls	r2, r3, #28
 8003592:	bf44      	itt	mi
 8003594:	222b      	movmi	r2, #43	; 0x2b
 8003596:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800359a:	782a      	ldrb	r2, [r5, #0]
 800359c:	2a2a      	cmp	r2, #42	; 0x2a
 800359e:	d02a      	beq.n	80035f6 <_vfiprintf_r+0x10e>
 80035a0:	9a07      	ldr	r2, [sp, #28]
 80035a2:	46a8      	mov	r8, r5
 80035a4:	2000      	movs	r0, #0
 80035a6:	250a      	movs	r5, #10
 80035a8:	4641      	mov	r1, r8
 80035aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ae:	3b30      	subs	r3, #48	; 0x30
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d969      	bls.n	8003688 <_vfiprintf_r+0x1a0>
 80035b4:	b360      	cbz	r0, 8003610 <_vfiprintf_r+0x128>
 80035b6:	e024      	b.n	8003602 <_vfiprintf_r+0x11a>
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <_vfiprintf_r+0x214>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d101      	bne.n	80035c2 <_vfiprintf_r+0xda>
 80035be:	68b4      	ldr	r4, [r6, #8]
 80035c0:	e7a2      	b.n	8003508 <_vfiprintf_r+0x20>
 80035c2:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <_vfiprintf_r+0x218>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	bf08      	it	eq
 80035c8:	68f4      	ldreq	r4, [r6, #12]
 80035ca:	e79d      	b.n	8003508 <_vfiprintf_r+0x20>
 80035cc:	4621      	mov	r1, r4
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 fae0 	bl	8003b94 <__swsetup_r>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d09d      	beq.n	8003514 <_vfiprintf_r+0x2c>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035dc:	b01d      	add	sp, #116	; 0x74
 80035de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e2:	46a8      	mov	r8, r5
 80035e4:	e7a2      	b.n	800352c <_vfiprintf_r+0x44>
 80035e6:	4a44      	ldr	r2, [pc, #272]	; (80036f8 <_vfiprintf_r+0x210>)
 80035e8:	1a80      	subs	r0, r0, r2
 80035ea:	fa0b f000 	lsl.w	r0, fp, r0
 80035ee:	4318      	orrs	r0, r3
 80035f0:	9004      	str	r0, [sp, #16]
 80035f2:	4645      	mov	r5, r8
 80035f4:	e7be      	b.n	8003574 <_vfiprintf_r+0x8c>
 80035f6:	9a03      	ldr	r2, [sp, #12]
 80035f8:	1d11      	adds	r1, r2, #4
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	9103      	str	r1, [sp, #12]
 80035fe:	2a00      	cmp	r2, #0
 8003600:	db01      	blt.n	8003606 <_vfiprintf_r+0x11e>
 8003602:	9207      	str	r2, [sp, #28]
 8003604:	e004      	b.n	8003610 <_vfiprintf_r+0x128>
 8003606:	4252      	negs	r2, r2
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	9207      	str	r2, [sp, #28]
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	f898 3000 	ldrb.w	r3, [r8]
 8003614:	2b2e      	cmp	r3, #46	; 0x2e
 8003616:	d10e      	bne.n	8003636 <_vfiprintf_r+0x14e>
 8003618:	f898 3001 	ldrb.w	r3, [r8, #1]
 800361c:	2b2a      	cmp	r3, #42	; 0x2a
 800361e:	d138      	bne.n	8003692 <_vfiprintf_r+0x1aa>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	9203      	str	r2, [sp, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	bfb8      	it	lt
 800362c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003630:	f108 0802 	add.w	r8, r8, #2
 8003634:	9305      	str	r3, [sp, #20]
 8003636:	4d33      	ldr	r5, [pc, #204]	; (8003704 <_vfiprintf_r+0x21c>)
 8003638:	f898 1000 	ldrb.w	r1, [r8]
 800363c:	2203      	movs	r2, #3
 800363e:	4628      	mov	r0, r5
 8003640:	f7fc fdc6 	bl	80001d0 <memchr>
 8003644:	b140      	cbz	r0, 8003658 <_vfiprintf_r+0x170>
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	1b40      	subs	r0, r0, r5
 800364a:	fa03 f000 	lsl.w	r0, r3, r0
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	4303      	orrs	r3, r0
 8003652:	f108 0801 	add.w	r8, r8, #1
 8003656:	9304      	str	r3, [sp, #16]
 8003658:	f898 1000 	ldrb.w	r1, [r8]
 800365c:	482a      	ldr	r0, [pc, #168]	; (8003708 <_vfiprintf_r+0x220>)
 800365e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003662:	2206      	movs	r2, #6
 8003664:	f108 0701 	add.w	r7, r8, #1
 8003668:	f7fc fdb2 	bl	80001d0 <memchr>
 800366c:	2800      	cmp	r0, #0
 800366e:	d037      	beq.n	80036e0 <_vfiprintf_r+0x1f8>
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <_vfiprintf_r+0x224>)
 8003672:	bb1b      	cbnz	r3, 80036bc <_vfiprintf_r+0x1d4>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	3307      	adds	r3, #7
 8003678:	f023 0307 	bic.w	r3, r3, #7
 800367c:	3308      	adds	r3, #8
 800367e:	9303      	str	r3, [sp, #12]
 8003680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003682:	444b      	add	r3, r9
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
 8003686:	e750      	b.n	800352a <_vfiprintf_r+0x42>
 8003688:	fb05 3202 	mla	r2, r5, r2, r3
 800368c:	2001      	movs	r0, #1
 800368e:	4688      	mov	r8, r1
 8003690:	e78a      	b.n	80035a8 <_vfiprintf_r+0xc0>
 8003692:	2300      	movs	r3, #0
 8003694:	f108 0801 	add.w	r8, r8, #1
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	4619      	mov	r1, r3
 800369c:	250a      	movs	r5, #10
 800369e:	4640      	mov	r0, r8
 80036a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a4:	3a30      	subs	r2, #48	; 0x30
 80036a6:	2a09      	cmp	r2, #9
 80036a8:	d903      	bls.n	80036b2 <_vfiprintf_r+0x1ca>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0c3      	beq.n	8003636 <_vfiprintf_r+0x14e>
 80036ae:	9105      	str	r1, [sp, #20]
 80036b0:	e7c1      	b.n	8003636 <_vfiprintf_r+0x14e>
 80036b2:	fb05 2101 	mla	r1, r5, r1, r2
 80036b6:	2301      	movs	r3, #1
 80036b8:	4680      	mov	r8, r0
 80036ba:	e7f0      	b.n	800369e <_vfiprintf_r+0x1b6>
 80036bc:	ab03      	add	r3, sp, #12
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4622      	mov	r2, r4
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <_vfiprintf_r+0x228>)
 80036c4:	a904      	add	r1, sp, #16
 80036c6:	4630      	mov	r0, r6
 80036c8:	f3af 8000 	nop.w
 80036cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80036d0:	4681      	mov	r9, r0
 80036d2:	d1d5      	bne.n	8003680 <_vfiprintf_r+0x198>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	065b      	lsls	r3, r3, #25
 80036d8:	f53f af7e 	bmi.w	80035d8 <_vfiprintf_r+0xf0>
 80036dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036de:	e77d      	b.n	80035dc <_vfiprintf_r+0xf4>
 80036e0:	ab03      	add	r3, sp, #12
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4622      	mov	r2, r4
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <_vfiprintf_r+0x228>)
 80036e8:	a904      	add	r1, sp, #16
 80036ea:	4630      	mov	r0, r6
 80036ec:	f000 f888 	bl	8003800 <_printf_i>
 80036f0:	e7ec      	b.n	80036cc <_vfiprintf_r+0x1e4>
 80036f2:	bf00      	nop
 80036f4:	08004070 	.word	0x08004070
 80036f8:	080040b0 	.word	0x080040b0
 80036fc:	08004090 	.word	0x08004090
 8003700:	08004050 	.word	0x08004050
 8003704:	080040b6 	.word	0x080040b6
 8003708:	080040ba 	.word	0x080040ba
 800370c:	00000000 	.word	0x00000000
 8003710:	080034c3 	.word	0x080034c3

08003714 <_printf_common>:
 8003714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003718:	4691      	mov	r9, r2
 800371a:	461f      	mov	r7, r3
 800371c:	688a      	ldr	r2, [r1, #8]
 800371e:	690b      	ldr	r3, [r1, #16]
 8003720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003724:	4293      	cmp	r3, r2
 8003726:	bfb8      	it	lt
 8003728:	4613      	movlt	r3, r2
 800372a:	f8c9 3000 	str.w	r3, [r9]
 800372e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003732:	4606      	mov	r6, r0
 8003734:	460c      	mov	r4, r1
 8003736:	b112      	cbz	r2, 800373e <_printf_common+0x2a>
 8003738:	3301      	adds	r3, #1
 800373a:	f8c9 3000 	str.w	r3, [r9]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	0699      	lsls	r1, r3, #26
 8003742:	bf42      	ittt	mi
 8003744:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003748:	3302      	addmi	r3, #2
 800374a:	f8c9 3000 	strmi.w	r3, [r9]
 800374e:	6825      	ldr	r5, [r4, #0]
 8003750:	f015 0506 	ands.w	r5, r5, #6
 8003754:	d107      	bne.n	8003766 <_printf_common+0x52>
 8003756:	f104 0a19 	add.w	sl, r4, #25
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	f8d9 2000 	ldr.w	r2, [r9]
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	42ab      	cmp	r3, r5
 8003764:	dc28      	bgt.n	80037b8 <_printf_common+0xa4>
 8003766:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	3300      	adds	r3, #0
 800376e:	bf18      	it	ne
 8003770:	2301      	movne	r3, #1
 8003772:	0692      	lsls	r2, r2, #26
 8003774:	d42d      	bmi.n	80037d2 <_printf_common+0xbe>
 8003776:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800377a:	4639      	mov	r1, r7
 800377c:	4630      	mov	r0, r6
 800377e:	47c0      	blx	r8
 8003780:	3001      	adds	r0, #1
 8003782:	d020      	beq.n	80037c6 <_printf_common+0xb2>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	68e5      	ldr	r5, [r4, #12]
 8003788:	f8d9 2000 	ldr.w	r2, [r9]
 800378c:	f003 0306 	and.w	r3, r3, #6
 8003790:	2b04      	cmp	r3, #4
 8003792:	bf08      	it	eq
 8003794:	1aad      	subeq	r5, r5, r2
 8003796:	68a3      	ldr	r3, [r4, #8]
 8003798:	6922      	ldr	r2, [r4, #16]
 800379a:	bf0c      	ite	eq
 800379c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037a0:	2500      	movne	r5, #0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bfc4      	itt	gt
 80037a6:	1a9b      	subgt	r3, r3, r2
 80037a8:	18ed      	addgt	r5, r5, r3
 80037aa:	f04f 0900 	mov.w	r9, #0
 80037ae:	341a      	adds	r4, #26
 80037b0:	454d      	cmp	r5, r9
 80037b2:	d11a      	bne.n	80037ea <_printf_common+0xd6>
 80037b4:	2000      	movs	r0, #0
 80037b6:	e008      	b.n	80037ca <_printf_common+0xb6>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4652      	mov	r2, sl
 80037bc:	4639      	mov	r1, r7
 80037be:	4630      	mov	r0, r6
 80037c0:	47c0      	blx	r8
 80037c2:	3001      	adds	r0, #1
 80037c4:	d103      	bne.n	80037ce <_printf_common+0xba>
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ce:	3501      	adds	r5, #1
 80037d0:	e7c3      	b.n	800375a <_printf_common+0x46>
 80037d2:	18e1      	adds	r1, r4, r3
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	2030      	movs	r0, #48	; 0x30
 80037d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037dc:	4422      	add	r2, r4
 80037de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037e6:	3302      	adds	r3, #2
 80037e8:	e7c5      	b.n	8003776 <_printf_common+0x62>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4622      	mov	r2, r4
 80037ee:	4639      	mov	r1, r7
 80037f0:	4630      	mov	r0, r6
 80037f2:	47c0      	blx	r8
 80037f4:	3001      	adds	r0, #1
 80037f6:	d0e6      	beq.n	80037c6 <_printf_common+0xb2>
 80037f8:	f109 0901 	add.w	r9, r9, #1
 80037fc:	e7d8      	b.n	80037b0 <_printf_common+0x9c>
	...

08003800 <_printf_i>:
 8003800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003804:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003808:	460c      	mov	r4, r1
 800380a:	7e09      	ldrb	r1, [r1, #24]
 800380c:	b085      	sub	sp, #20
 800380e:	296e      	cmp	r1, #110	; 0x6e
 8003810:	4617      	mov	r7, r2
 8003812:	4606      	mov	r6, r0
 8003814:	4698      	mov	r8, r3
 8003816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003818:	f000 80b3 	beq.w	8003982 <_printf_i+0x182>
 800381c:	d822      	bhi.n	8003864 <_printf_i+0x64>
 800381e:	2963      	cmp	r1, #99	; 0x63
 8003820:	d036      	beq.n	8003890 <_printf_i+0x90>
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x3a>
 8003824:	2900      	cmp	r1, #0
 8003826:	f000 80b9 	beq.w	800399c <_printf_i+0x19c>
 800382a:	2958      	cmp	r1, #88	; 0x58
 800382c:	f000 8083 	beq.w	8003936 <_printf_i+0x136>
 8003830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003834:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003838:	e032      	b.n	80038a0 <_printf_i+0xa0>
 800383a:	2964      	cmp	r1, #100	; 0x64
 800383c:	d001      	beq.n	8003842 <_printf_i+0x42>
 800383e:	2969      	cmp	r1, #105	; 0x69
 8003840:	d1f6      	bne.n	8003830 <_printf_i+0x30>
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	6813      	ldr	r3, [r2, #0]
 8003846:	0605      	lsls	r5, r0, #24
 8003848:	f103 0104 	add.w	r1, r3, #4
 800384c:	d52a      	bpl.n	80038a4 <_printf_i+0xa4>
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6011      	str	r1, [r2, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da03      	bge.n	800385e <_printf_i+0x5e>
 8003856:	222d      	movs	r2, #45	; 0x2d
 8003858:	425b      	negs	r3, r3
 800385a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800385e:	486f      	ldr	r0, [pc, #444]	; (8003a1c <_printf_i+0x21c>)
 8003860:	220a      	movs	r2, #10
 8003862:	e039      	b.n	80038d8 <_printf_i+0xd8>
 8003864:	2973      	cmp	r1, #115	; 0x73
 8003866:	f000 809d 	beq.w	80039a4 <_printf_i+0x1a4>
 800386a:	d808      	bhi.n	800387e <_printf_i+0x7e>
 800386c:	296f      	cmp	r1, #111	; 0x6f
 800386e:	d020      	beq.n	80038b2 <_printf_i+0xb2>
 8003870:	2970      	cmp	r1, #112	; 0x70
 8003872:	d1dd      	bne.n	8003830 <_printf_i+0x30>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f043 0320 	orr.w	r3, r3, #32
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	e003      	b.n	8003886 <_printf_i+0x86>
 800387e:	2975      	cmp	r1, #117	; 0x75
 8003880:	d017      	beq.n	80038b2 <_printf_i+0xb2>
 8003882:	2978      	cmp	r1, #120	; 0x78
 8003884:	d1d4      	bne.n	8003830 <_printf_i+0x30>
 8003886:	2378      	movs	r3, #120	; 0x78
 8003888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800388c:	4864      	ldr	r0, [pc, #400]	; (8003a20 <_printf_i+0x220>)
 800388e:	e055      	b.n	800393c <_printf_i+0x13c>
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	1d19      	adds	r1, r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6011      	str	r1, [r2, #0]
 8003898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800389c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a0:	2301      	movs	r3, #1
 80038a2:	e08c      	b.n	80039be <_printf_i+0x1be>
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6011      	str	r1, [r2, #0]
 80038a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038ac:	bf18      	it	ne
 80038ae:	b21b      	sxthne	r3, r3
 80038b0:	e7cf      	b.n	8003852 <_printf_i+0x52>
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	6825      	ldr	r5, [r4, #0]
 80038b6:	1d18      	adds	r0, r3, #4
 80038b8:	6010      	str	r0, [r2, #0]
 80038ba:	0628      	lsls	r0, r5, #24
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0xc2>
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0xc8>
 80038c2:	0668      	lsls	r0, r5, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0xbe>
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	4854      	ldr	r0, [pc, #336]	; (8003a1c <_printf_i+0x21c>)
 80038ca:	296f      	cmp	r1, #111	; 0x6f
 80038cc:	bf14      	ite	ne
 80038ce:	220a      	movne	r2, #10
 80038d0:	2208      	moveq	r2, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d8:	6865      	ldr	r5, [r4, #4]
 80038da:	60a5      	str	r5, [r4, #8]
 80038dc:	2d00      	cmp	r5, #0
 80038de:	f2c0 8095 	blt.w	8003a0c <_printf_i+0x20c>
 80038e2:	6821      	ldr	r1, [r4, #0]
 80038e4:	f021 0104 	bic.w	r1, r1, #4
 80038e8:	6021      	str	r1, [r4, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13d      	bne.n	800396a <_printf_i+0x16a>
 80038ee:	2d00      	cmp	r5, #0
 80038f0:	f040 808e 	bne.w	8003a10 <_printf_i+0x210>
 80038f4:	4665      	mov	r5, ip
 80038f6:	2a08      	cmp	r2, #8
 80038f8:	d10b      	bne.n	8003912 <_printf_i+0x112>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	07db      	lsls	r3, r3, #31
 80038fe:	d508      	bpl.n	8003912 <_printf_i+0x112>
 8003900:	6923      	ldr	r3, [r4, #16]
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	bfde      	ittt	le
 8003908:	2330      	movle	r3, #48	; 0x30
 800390a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800390e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003912:	ebac 0305 	sub.w	r3, ip, r5
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	f8cd 8000 	str.w	r8, [sp]
 800391c:	463b      	mov	r3, r7
 800391e:	aa03      	add	r2, sp, #12
 8003920:	4621      	mov	r1, r4
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff fef6 	bl	8003714 <_printf_common>
 8003928:	3001      	adds	r0, #1
 800392a:	d14d      	bne.n	80039c8 <_printf_i+0x1c8>
 800392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003930:	b005      	add	sp, #20
 8003932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003936:	4839      	ldr	r0, [pc, #228]	; (8003a1c <_printf_i+0x21c>)
 8003938:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800393c:	6813      	ldr	r3, [r2, #0]
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	1d1d      	adds	r5, r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6015      	str	r5, [r2, #0]
 8003946:	060a      	lsls	r2, r1, #24
 8003948:	d50b      	bpl.n	8003962 <_printf_i+0x162>
 800394a:	07ca      	lsls	r2, r1, #31
 800394c:	bf44      	itt	mi
 800394e:	f041 0120 	orrmi.w	r1, r1, #32
 8003952:	6021      	strmi	r1, [r4, #0]
 8003954:	b91b      	cbnz	r3, 800395e <_printf_i+0x15e>
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	f022 0220 	bic.w	r2, r2, #32
 800395c:	6022      	str	r2, [r4, #0]
 800395e:	2210      	movs	r2, #16
 8003960:	e7b7      	b.n	80038d2 <_printf_i+0xd2>
 8003962:	064d      	lsls	r5, r1, #25
 8003964:	bf48      	it	mi
 8003966:	b29b      	uxthmi	r3, r3
 8003968:	e7ef      	b.n	800394a <_printf_i+0x14a>
 800396a:	4665      	mov	r5, ip
 800396c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003970:	fb02 3311 	mls	r3, r2, r1, r3
 8003974:	5cc3      	ldrb	r3, [r0, r3]
 8003976:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800397a:	460b      	mov	r3, r1
 800397c:	2900      	cmp	r1, #0
 800397e:	d1f5      	bne.n	800396c <_printf_i+0x16c>
 8003980:	e7b9      	b.n	80038f6 <_printf_i+0xf6>
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	6825      	ldr	r5, [r4, #0]
 8003986:	6961      	ldr	r1, [r4, #20]
 8003988:	1d18      	adds	r0, r3, #4
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	0628      	lsls	r0, r5, #24
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	d501      	bpl.n	8003996 <_printf_i+0x196>
 8003992:	6019      	str	r1, [r3, #0]
 8003994:	e002      	b.n	800399c <_printf_i+0x19c>
 8003996:	066a      	lsls	r2, r5, #25
 8003998:	d5fb      	bpl.n	8003992 <_printf_i+0x192>
 800399a:	8019      	strh	r1, [r3, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	4665      	mov	r5, ip
 80039a2:	e7b9      	b.n	8003918 <_printf_i+0x118>
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	1d19      	adds	r1, r3, #4
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	681d      	ldr	r5, [r3, #0]
 80039ac:	6862      	ldr	r2, [r4, #4]
 80039ae:	2100      	movs	r1, #0
 80039b0:	4628      	mov	r0, r5
 80039b2:	f7fc fc0d 	bl	80001d0 <memchr>
 80039b6:	b108      	cbz	r0, 80039bc <_printf_i+0x1bc>
 80039b8:	1b40      	subs	r0, r0, r5
 80039ba:	6060      	str	r0, [r4, #4]
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	6123      	str	r3, [r4, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c6:	e7a7      	b.n	8003918 <_printf_i+0x118>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	462a      	mov	r2, r5
 80039cc:	4639      	mov	r1, r7
 80039ce:	4630      	mov	r0, r6
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0aa      	beq.n	800392c <_printf_i+0x12c>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	079b      	lsls	r3, r3, #30
 80039da:	d413      	bmi.n	8003a04 <_printf_i+0x204>
 80039dc:	68e0      	ldr	r0, [r4, #12]
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	4298      	cmp	r0, r3
 80039e2:	bfb8      	it	lt
 80039e4:	4618      	movlt	r0, r3
 80039e6:	e7a3      	b.n	8003930 <_printf_i+0x130>
 80039e8:	2301      	movs	r3, #1
 80039ea:	464a      	mov	r2, r9
 80039ec:	4639      	mov	r1, r7
 80039ee:	4630      	mov	r0, r6
 80039f0:	47c0      	blx	r8
 80039f2:	3001      	adds	r0, #1
 80039f4:	d09a      	beq.n	800392c <_printf_i+0x12c>
 80039f6:	3501      	adds	r5, #1
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	9a03      	ldr	r2, [sp, #12]
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	dcf2      	bgt.n	80039e8 <_printf_i+0x1e8>
 8003a02:	e7eb      	b.n	80039dc <_printf_i+0x1dc>
 8003a04:	2500      	movs	r5, #0
 8003a06:	f104 0919 	add.w	r9, r4, #25
 8003a0a:	e7f5      	b.n	80039f8 <_printf_i+0x1f8>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ac      	bne.n	800396a <_printf_i+0x16a>
 8003a10:	7803      	ldrb	r3, [r0, #0]
 8003a12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1a:	e76c      	b.n	80038f6 <_printf_i+0xf6>
 8003a1c:	080040c1 	.word	0x080040c1
 8003a20:	080040d2 	.word	0x080040d2

08003a24 <_sbrk_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4c06      	ldr	r4, [pc, #24]	; (8003a40 <_sbrk_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	f7fc ffaa 	bl	8000988 <_sbrk>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_sbrk_r+0x1a>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_sbrk_r+0x1a>
 8003a3c:	602b      	str	r3, [r5, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	2000011c 	.word	0x2000011c

08003a44 <__sread>:
 8003a44:	b510      	push	{r4, lr}
 8003a46:	460c      	mov	r4, r1
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	f000 fa96 	bl	8003f7c <_read_r>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	bfab      	itete	ge
 8003a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a56:	89a3      	ldrhlt	r3, [r4, #12]
 8003a58:	181b      	addge	r3, r3, r0
 8003a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a5e:	bfac      	ite	ge
 8003a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a62:	81a3      	strhlt	r3, [r4, #12]
 8003a64:	bd10      	pop	{r4, pc}

08003a66 <__swrite>:
 8003a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6a:	461f      	mov	r7, r3
 8003a6c:	898b      	ldrh	r3, [r1, #12]
 8003a6e:	05db      	lsls	r3, r3, #23
 8003a70:	4605      	mov	r5, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	4616      	mov	r6, r2
 8003a76:	d505      	bpl.n	8003a84 <__swrite+0x1e>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a80:	f000 f9b6 	bl	8003df0 <_lseek_r>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	4632      	mov	r2, r6
 8003a92:	463b      	mov	r3, r7
 8003a94:	4628      	mov	r0, r5
 8003a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	f000 b869 	b.w	8003b70 <_write_r>

08003a9e <__sseek>:
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa6:	f000 f9a3 	bl	8003df0 <_lseek_r>
 8003aaa:	1c43      	adds	r3, r0, #1
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	bf15      	itete	ne
 8003ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003aba:	81a3      	strheq	r3, [r4, #12]
 8003abc:	bf18      	it	ne
 8003abe:	81a3      	strhne	r3, [r4, #12]
 8003ac0:	bd10      	pop	{r4, pc}

08003ac2 <__sclose>:
 8003ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac6:	f000 b8d3 	b.w	8003c70 <_close_r>
	...

08003acc <__swbuf_r>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	460e      	mov	r6, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	b118      	cbz	r0, 8003ade <__swbuf_r+0x12>
 8003ad6:	6983      	ldr	r3, [r0, #24]
 8003ad8:	b90b      	cbnz	r3, 8003ade <__swbuf_r+0x12>
 8003ada:	f7ff fbf7 	bl	80032cc <__sinit>
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <__swbuf_r+0x98>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d12a      	bne.n	8003b3a <__swbuf_r+0x6e>
 8003ae4:	686c      	ldr	r4, [r5, #4]
 8003ae6:	69a3      	ldr	r3, [r4, #24]
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	071a      	lsls	r2, r3, #28
 8003aee:	d52e      	bpl.n	8003b4e <__swbuf_r+0x82>
 8003af0:	6923      	ldr	r3, [r4, #16]
 8003af2:	b363      	cbz	r3, 8003b4e <__swbuf_r+0x82>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	1ac0      	subs	r0, r0, r3
 8003afa:	6963      	ldr	r3, [r4, #20]
 8003afc:	b2f6      	uxtb	r6, r6
 8003afe:	4283      	cmp	r3, r0
 8003b00:	4637      	mov	r7, r6
 8003b02:	dc04      	bgt.n	8003b0e <__swbuf_r+0x42>
 8003b04:	4621      	mov	r1, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 f948 	bl	8003d9c <_fflush_r>
 8003b0c:	bb28      	cbnz	r0, 8003b5a <__swbuf_r+0x8e>
 8003b0e:	68a3      	ldr	r3, [r4, #8]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60a3      	str	r3, [r4, #8]
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	701e      	strb	r6, [r3, #0]
 8003b1c:	6963      	ldr	r3, [r4, #20]
 8003b1e:	3001      	adds	r0, #1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d004      	beq.n	8003b2e <__swbuf_r+0x62>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	07db      	lsls	r3, r3, #31
 8003b28:	d519      	bpl.n	8003b5e <__swbuf_r+0x92>
 8003b2a:	2e0a      	cmp	r6, #10
 8003b2c:	d117      	bne.n	8003b5e <__swbuf_r+0x92>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f933 	bl	8003d9c <_fflush_r>
 8003b36:	b190      	cbz	r0, 8003b5e <__swbuf_r+0x92>
 8003b38:	e00f      	b.n	8003b5a <__swbuf_r+0x8e>
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <__swbuf_r+0x9c>)
 8003b3c:	429c      	cmp	r4, r3
 8003b3e:	d101      	bne.n	8003b44 <__swbuf_r+0x78>
 8003b40:	68ac      	ldr	r4, [r5, #8]
 8003b42:	e7d0      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <__swbuf_r+0xa0>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	bf08      	it	eq
 8003b4a:	68ec      	ldreq	r4, [r5, #12]
 8003b4c:	e7cb      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 f81f 	bl	8003b94 <__swsetup_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0cc      	beq.n	8003af4 <__swbuf_r+0x28>
 8003b5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b5e:	4638      	mov	r0, r7
 8003b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	08004070 	.word	0x08004070
 8003b68:	08004090 	.word	0x08004090
 8003b6c:	08004050 	.word	0x08004050

08003b70 <_write_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4c07      	ldr	r4, [pc, #28]	; (8003b90 <_write_r+0x20>)
 8003b74:	4605      	mov	r5, r0
 8003b76:	4608      	mov	r0, r1
 8003b78:	4611      	mov	r1, r2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	6022      	str	r2, [r4, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f7fc feb1 	bl	80008e6 <_write>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d102      	bne.n	8003b8e <_write_r+0x1e>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	b103      	cbz	r3, 8003b8e <_write_r+0x1e>
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	2000011c 	.word	0x2000011c

08003b94 <__swsetup_r>:
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <__swsetup_r+0xcc>)
 8003b96:	b570      	push	{r4, r5, r6, lr}
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	b125      	cbz	r5, 8003baa <__swsetup_r+0x16>
 8003ba0:	69ab      	ldr	r3, [r5, #24]
 8003ba2:	b913      	cbnz	r3, 8003baa <__swsetup_r+0x16>
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f7ff fb91 	bl	80032cc <__sinit>
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <__swsetup_r+0xd0>)
 8003bac:	429c      	cmp	r4, r3
 8003bae:	d10f      	bne.n	8003bd0 <__swsetup_r+0x3c>
 8003bb0:	686c      	ldr	r4, [r5, #4]
 8003bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	0715      	lsls	r5, r2, #28
 8003bba:	d42c      	bmi.n	8003c16 <__swsetup_r+0x82>
 8003bbc:	06d0      	lsls	r0, r2, #27
 8003bbe:	d411      	bmi.n	8003be4 <__swsetup_r+0x50>
 8003bc0:	2209      	movs	r2, #9
 8003bc2:	6032      	str	r2, [r6, #0]
 8003bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bce:	e03e      	b.n	8003c4e <__swsetup_r+0xba>
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <__swsetup_r+0xd4>)
 8003bd2:	429c      	cmp	r4, r3
 8003bd4:	d101      	bne.n	8003bda <__swsetup_r+0x46>
 8003bd6:	68ac      	ldr	r4, [r5, #8]
 8003bd8:	e7eb      	b.n	8003bb2 <__swsetup_r+0x1e>
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <__swsetup_r+0xd8>)
 8003bdc:	429c      	cmp	r4, r3
 8003bde:	bf08      	it	eq
 8003be0:	68ec      	ldreq	r4, [r5, #12]
 8003be2:	e7e6      	b.n	8003bb2 <__swsetup_r+0x1e>
 8003be4:	0751      	lsls	r1, r2, #29
 8003be6:	d512      	bpl.n	8003c0e <__swsetup_r+0x7a>
 8003be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bea:	b141      	cbz	r1, 8003bfe <__swsetup_r+0x6a>
 8003bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	d002      	beq.n	8003bfa <__swsetup_r+0x66>
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 f973 	bl	8003ee0 <_free_r>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	b94b      	cbnz	r3, 8003c2e <__swsetup_r+0x9a>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c24:	d003      	beq.n	8003c2e <__swsetup_r+0x9a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f000 f917 	bl	8003e5c <__smakebuf_r>
 8003c2e:	89a2      	ldrh	r2, [r4, #12]
 8003c30:	f012 0301 	ands.w	r3, r2, #1
 8003c34:	d00c      	beq.n	8003c50 <__swsetup_r+0xbc>
 8003c36:	2300      	movs	r3, #0
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	6963      	ldr	r3, [r4, #20]
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	61a3      	str	r3, [r4, #24]
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	b953      	cbnz	r3, 8003c5a <__swsetup_r+0xc6>
 8003c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c4c:	d1ba      	bne.n	8003bc4 <__swsetup_r+0x30>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	0792      	lsls	r2, r2, #30
 8003c52:	bf58      	it	pl
 8003c54:	6963      	ldrpl	r3, [r4, #20]
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	e7f2      	b.n	8003c40 <__swsetup_r+0xac>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e7f7      	b.n	8003c4e <__swsetup_r+0xba>
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	08004070 	.word	0x08004070
 8003c68:	08004090 	.word	0x08004090
 8003c6c:	08004050 	.word	0x08004050

08003c70 <_close_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4c06      	ldr	r4, [pc, #24]	; (8003c8c <_close_r+0x1c>)
 8003c74:	2300      	movs	r3, #0
 8003c76:	4605      	mov	r5, r0
 8003c78:	4608      	mov	r0, r1
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	f7fc fe4f 	bl	800091e <_close>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_close_r+0x1a>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_close_r+0x1a>
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	2000011c 	.word	0x2000011c

08003c90 <__sflush_r>:
 8003c90:	898a      	ldrh	r2, [r1, #12]
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	0710      	lsls	r0, r2, #28
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	d458      	bmi.n	8003d50 <__sflush_r+0xc0>
 8003c9e:	684b      	ldr	r3, [r1, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dc05      	bgt.n	8003cb0 <__sflush_r+0x20>
 8003ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dc02      	bgt.n	8003cb0 <__sflush_r+0x20>
 8003caa:	2000      	movs	r0, #0
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d0f9      	beq.n	8003caa <__sflush_r+0x1a>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cbc:	682f      	ldr	r7, [r5, #0]
 8003cbe:	6a21      	ldr	r1, [r4, #32]
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	d032      	beq.n	8003d2a <__sflush_r+0x9a>
 8003cc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	075a      	lsls	r2, r3, #29
 8003cca:	d505      	bpl.n	8003cd8 <__sflush_r+0x48>
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	1ac0      	subs	r0, r0, r3
 8003cd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cd2:	b10b      	cbz	r3, 8003cd8 <__sflush_r+0x48>
 8003cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cd6:	1ac0      	subs	r0, r0, r3
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cde:	6a21      	ldr	r1, [r4, #32]
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b0      	blx	r6
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	d106      	bne.n	8003cf8 <__sflush_r+0x68>
 8003cea:	6829      	ldr	r1, [r5, #0]
 8003cec:	291d      	cmp	r1, #29
 8003cee:	d848      	bhi.n	8003d82 <__sflush_r+0xf2>
 8003cf0:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <__sflush_r+0x108>)
 8003cf2:	40ca      	lsrs	r2, r1
 8003cf4:	07d6      	lsls	r6, r2, #31
 8003cf6:	d544      	bpl.n	8003d82 <__sflush_r+0xf2>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	6062      	str	r2, [r4, #4]
 8003cfc:	04d9      	lsls	r1, r3, #19
 8003cfe:	6922      	ldr	r2, [r4, #16]
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	d504      	bpl.n	8003d0e <__sflush_r+0x7e>
 8003d04:	1c42      	adds	r2, r0, #1
 8003d06:	d101      	bne.n	8003d0c <__sflush_r+0x7c>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b903      	cbnz	r3, 8003d0e <__sflush_r+0x7e>
 8003d0c:	6560      	str	r0, [r4, #84]	; 0x54
 8003d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d10:	602f      	str	r7, [r5, #0]
 8003d12:	2900      	cmp	r1, #0
 8003d14:	d0c9      	beq.n	8003caa <__sflush_r+0x1a>
 8003d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d002      	beq.n	8003d24 <__sflush_r+0x94>
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f8de 	bl	8003ee0 <_free_r>
 8003d24:	2000      	movs	r0, #0
 8003d26:	6360      	str	r0, [r4, #52]	; 0x34
 8003d28:	e7c0      	b.n	8003cac <__sflush_r+0x1c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	47b0      	blx	r6
 8003d30:	1c41      	adds	r1, r0, #1
 8003d32:	d1c8      	bne.n	8003cc6 <__sflush_r+0x36>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0c5      	beq.n	8003cc6 <__sflush_r+0x36>
 8003d3a:	2b1d      	cmp	r3, #29
 8003d3c:	d001      	beq.n	8003d42 <__sflush_r+0xb2>
 8003d3e:	2b16      	cmp	r3, #22
 8003d40:	d101      	bne.n	8003d46 <__sflush_r+0xb6>
 8003d42:	602f      	str	r7, [r5, #0]
 8003d44:	e7b1      	b.n	8003caa <__sflush_r+0x1a>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4c:	81a3      	strh	r3, [r4, #12]
 8003d4e:	e7ad      	b.n	8003cac <__sflush_r+0x1c>
 8003d50:	690f      	ldr	r7, [r1, #16]
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d0a9      	beq.n	8003caa <__sflush_r+0x1a>
 8003d56:	0793      	lsls	r3, r2, #30
 8003d58:	680e      	ldr	r6, [r1, #0]
 8003d5a:	bf08      	it	eq
 8003d5c:	694b      	ldreq	r3, [r1, #20]
 8003d5e:	600f      	str	r7, [r1, #0]
 8003d60:	bf18      	it	ne
 8003d62:	2300      	movne	r3, #0
 8003d64:	eba6 0807 	sub.w	r8, r6, r7
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	f1b8 0f00 	cmp.w	r8, #0
 8003d6e:	dd9c      	ble.n	8003caa <__sflush_r+0x1a>
 8003d70:	4643      	mov	r3, r8
 8003d72:	463a      	mov	r2, r7
 8003d74:	6a21      	ldr	r1, [r4, #32]
 8003d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b0      	blx	r6
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dc06      	bgt.n	8003d8e <__sflush_r+0xfe>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d8c:	e78e      	b.n	8003cac <__sflush_r+0x1c>
 8003d8e:	4407      	add	r7, r0
 8003d90:	eba8 0800 	sub.w	r8, r8, r0
 8003d94:	e7e9      	b.n	8003d6a <__sflush_r+0xda>
 8003d96:	bf00      	nop
 8003d98:	20400001 	.word	0x20400001

08003d9c <_fflush_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	690b      	ldr	r3, [r1, #16]
 8003da0:	4605      	mov	r5, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	b1db      	cbz	r3, 8003dde <_fflush_r+0x42>
 8003da6:	b118      	cbz	r0, 8003db0 <_fflush_r+0x14>
 8003da8:	6983      	ldr	r3, [r0, #24]
 8003daa:	b90b      	cbnz	r3, 8003db0 <_fflush_r+0x14>
 8003dac:	f7ff fa8e 	bl	80032cc <__sinit>
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <_fflush_r+0x48>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d109      	bne.n	8003dca <_fflush_r+0x2e>
 8003db6:	686c      	ldr	r4, [r5, #4]
 8003db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dbc:	b17b      	cbz	r3, 8003dde <_fflush_r+0x42>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dc6:	f7ff bf63 	b.w	8003c90 <__sflush_r>
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <_fflush_r+0x4c>)
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d101      	bne.n	8003dd4 <_fflush_r+0x38>
 8003dd0:	68ac      	ldr	r4, [r5, #8]
 8003dd2:	e7f1      	b.n	8003db8 <_fflush_r+0x1c>
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <_fflush_r+0x50>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	bf08      	it	eq
 8003dda:	68ec      	ldreq	r4, [r5, #12]
 8003ddc:	e7ec      	b.n	8003db8 <_fflush_r+0x1c>
 8003dde:	2000      	movs	r0, #0
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
 8003de2:	bf00      	nop
 8003de4:	08004070 	.word	0x08004070
 8003de8:	08004090 	.word	0x08004090
 8003dec:	08004050 	.word	0x08004050

08003df0 <_lseek_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4c07      	ldr	r4, [pc, #28]	; (8003e10 <_lseek_r+0x20>)
 8003df4:	4605      	mov	r5, r0
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fc fdb4 	bl	800096c <_lseek>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_lseek_r+0x1e>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_lseek_r+0x1e>
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	2000011c 	.word	0x2000011c

08003e14 <__swhatbuf_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	460e      	mov	r6, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	b096      	sub	sp, #88	; 0x58
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	da07      	bge.n	8003e36 <__swhatbuf_r+0x22>
 8003e26:	2300      	movs	r3, #0
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	89b3      	ldrh	r3, [r6, #12]
 8003e2c:	061a      	lsls	r2, r3, #24
 8003e2e:	d410      	bmi.n	8003e52 <__swhatbuf_r+0x3e>
 8003e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e34:	e00e      	b.n	8003e54 <__swhatbuf_r+0x40>
 8003e36:	466a      	mov	r2, sp
 8003e38:	f000 f8b2 	bl	8003fa0 <_fstat_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	dbf2      	blt.n	8003e26 <__swhatbuf_r+0x12>
 8003e40:	9a01      	ldr	r2, [sp, #4]
 8003e42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e4a:	425a      	negs	r2, r3
 8003e4c:	415a      	adcs	r2, r3
 8003e4e:	602a      	str	r2, [r5, #0]
 8003e50:	e7ee      	b.n	8003e30 <__swhatbuf_r+0x1c>
 8003e52:	2340      	movs	r3, #64	; 0x40
 8003e54:	2000      	movs	r0, #0
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	b016      	add	sp, #88	; 0x58
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}

08003e5c <__smakebuf_r>:
 8003e5c:	898b      	ldrh	r3, [r1, #12]
 8003e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e60:	079d      	lsls	r5, r3, #30
 8003e62:	4606      	mov	r6, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	d507      	bpl.n	8003e78 <__smakebuf_r+0x1c>
 8003e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	6123      	str	r3, [r4, #16]
 8003e70:	2301      	movs	r3, #1
 8003e72:	6163      	str	r3, [r4, #20]
 8003e74:	b002      	add	sp, #8
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	ab01      	add	r3, sp, #4
 8003e7a:	466a      	mov	r2, sp
 8003e7c:	f7ff ffca 	bl	8003e14 <__swhatbuf_r>
 8003e80:	9900      	ldr	r1, [sp, #0]
 8003e82:	4605      	mov	r5, r0
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff faab 	bl	80033e0 <_malloc_r>
 8003e8a:	b948      	cbnz	r0, 8003ea0 <__smakebuf_r+0x44>
 8003e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e90:	059a      	lsls	r2, r3, #22
 8003e92:	d4ef      	bmi.n	8003e74 <__smakebuf_r+0x18>
 8003e94:	f023 0303 	bic.w	r3, r3, #3
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	e7e3      	b.n	8003e68 <__smakebuf_r+0xc>
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <__smakebuf_r+0x7c>)
 8003ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	6020      	str	r0, [r4, #0]
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	9b00      	ldr	r3, [sp, #0]
 8003eb0:	6163      	str	r3, [r4, #20]
 8003eb2:	9b01      	ldr	r3, [sp, #4]
 8003eb4:	6120      	str	r0, [r4, #16]
 8003eb6:	b15b      	cbz	r3, 8003ed0 <__smakebuf_r+0x74>
 8003eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 f881 	bl	8003fc4 <_isatty_r>
 8003ec2:	b128      	cbz	r0, 8003ed0 <__smakebuf_r+0x74>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	431d      	orrs	r5, r3
 8003ed4:	81a5      	strh	r5, [r4, #12]
 8003ed6:	e7cd      	b.n	8003e74 <__smakebuf_r+0x18>
 8003ed8:	08003295 	.word	0x08003295

08003edc <__malloc_lock>:
 8003edc:	4770      	bx	lr

08003ede <__malloc_unlock>:
 8003ede:	4770      	bx	lr

08003ee0 <_free_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d045      	beq.n	8003f74 <_free_r+0x94>
 8003ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eec:	1f0c      	subs	r4, r1, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	18e4      	addlt	r4, r4, r3
 8003ef4:	f7ff fff2 	bl	8003edc <__malloc_lock>
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <_free_r+0x98>)
 8003efa:	6813      	ldr	r3, [r2, #0]
 8003efc:	4610      	mov	r0, r2
 8003efe:	b933      	cbnz	r3, 8003f0e <_free_r+0x2e>
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	6014      	str	r4, [r2, #0]
 8003f04:	4628      	mov	r0, r5
 8003f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f0a:	f7ff bfe8 	b.w	8003ede <__malloc_unlock>
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	d90c      	bls.n	8003f2c <_free_r+0x4c>
 8003f12:	6821      	ldr	r1, [r4, #0]
 8003f14:	1862      	adds	r2, r4, r1
 8003f16:	4293      	cmp	r3, r2
 8003f18:	bf04      	itt	eq
 8003f1a:	681a      	ldreq	r2, [r3, #0]
 8003f1c:	685b      	ldreq	r3, [r3, #4]
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	bf04      	itt	eq
 8003f22:	1852      	addeq	r2, r2, r1
 8003f24:	6022      	streq	r2, [r4, #0]
 8003f26:	6004      	str	r4, [r0, #0]
 8003f28:	e7ec      	b.n	8003f04 <_free_r+0x24>
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	b10a      	cbz	r2, 8003f34 <_free_r+0x54>
 8003f30:	42a2      	cmp	r2, r4
 8003f32:	d9fa      	bls.n	8003f2a <_free_r+0x4a>
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	1858      	adds	r0, r3, r1
 8003f38:	42a0      	cmp	r0, r4
 8003f3a:	d10b      	bne.n	8003f54 <_free_r+0x74>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	4401      	add	r1, r0
 8003f40:	1858      	adds	r0, r3, r1
 8003f42:	4282      	cmp	r2, r0
 8003f44:	6019      	str	r1, [r3, #0]
 8003f46:	d1dd      	bne.n	8003f04 <_free_r+0x24>
 8003f48:	6810      	ldr	r0, [r2, #0]
 8003f4a:	6852      	ldr	r2, [r2, #4]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	4401      	add	r1, r0
 8003f50:	6019      	str	r1, [r3, #0]
 8003f52:	e7d7      	b.n	8003f04 <_free_r+0x24>
 8003f54:	d902      	bls.n	8003f5c <_free_r+0x7c>
 8003f56:	230c      	movs	r3, #12
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	e7d3      	b.n	8003f04 <_free_r+0x24>
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	1821      	adds	r1, r4, r0
 8003f60:	428a      	cmp	r2, r1
 8003f62:	bf04      	itt	eq
 8003f64:	6811      	ldreq	r1, [r2, #0]
 8003f66:	6852      	ldreq	r2, [r2, #4]
 8003f68:	6062      	str	r2, [r4, #4]
 8003f6a:	bf04      	itt	eq
 8003f6c:	1809      	addeq	r1, r1, r0
 8003f6e:	6021      	streq	r1, [r4, #0]
 8003f70:	605c      	str	r4, [r3, #4]
 8003f72:	e7c7      	b.n	8003f04 <_free_r+0x24>
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20000090 	.word	0x20000090

08003f7c <_read_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4c07      	ldr	r4, [pc, #28]	; (8003f9c <_read_r+0x20>)
 8003f80:	4605      	mov	r5, r0
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	2200      	movs	r2, #0
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f7fc fc8e 	bl	80008ac <_read>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_read_r+0x1e>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_read_r+0x1e>
 8003f98:	602b      	str	r3, [r5, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	2000011c 	.word	0x2000011c

08003fa0 <_fstat_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4c07      	ldr	r4, [pc, #28]	; (8003fc0 <_fstat_r+0x20>)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	f7fc fcc2 	bl	8000936 <_fstat>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d102      	bne.n	8003fbc <_fstat_r+0x1c>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	b103      	cbz	r3, 8003fbc <_fstat_r+0x1c>
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000011c 	.word	0x2000011c

08003fc4 <_isatty_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4c06      	ldr	r4, [pc, #24]	; (8003fe0 <_isatty_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4605      	mov	r5, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	f7fc fcc1 	bl	8000956 <_isatty>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_isatty_r+0x1a>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_isatty_r+0x1a>
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	2000011c 	.word	0x2000011c

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
