
l476_jerry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a38  08006a38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a40  08006a40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08006ab8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08006ab8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014464  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000272d  00000000  00000000  00034504  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002887b  00000000  00000000  00038f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f736  00000000  00000000  000617ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5f7d  00000000  00000000  00070ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166e5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d4  00000000  00000000  00166edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006918 	.word	0x08006918

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006918 	.word	0x08006918

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <MX_GPIO_Init+0x114>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a3e      	ldr	r2, [pc, #248]	; (8000684 <MX_GPIO_Init+0x114>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <MX_GPIO_Init+0x114>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <MX_GPIO_Init+0x114>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a38      	ldr	r2, [pc, #224]	; (8000684 <MX_GPIO_Init+0x114>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <MX_GPIO_Init+0x114>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_GPIO_Init+0x114>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a32      	ldr	r2, [pc, #200]	; (8000684 <MX_GPIO_Init+0x114>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_GPIO_Init+0x114>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0x114>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0x114>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0x114>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BN2_SILNIK_Pin|BN1_SILNIK_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2103      	movs	r1, #3
 80005ea:	4827      	ldr	r0, [pc, #156]	; (8000688 <MX_GPIO_Init+0x118>)
 80005ec:	f001 fb7c 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f001 fb76 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AN1_SILNIK_Pin|AN2_SILNIK_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_GPIO_Init+0x11c>)
 8000604:	f001 fb70 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0x120>)
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <MX_GPIO_Init+0x118>)
 800061e:	f001 f9bb 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BN2_SILNIK_Pin|BN1_SILNIK_Pin;
 8000622:	2303      	movs	r3, #3
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <MX_GPIO_Init+0x118>)
 800063a:	f001 f9ad 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800063e:	2320      	movs	r3, #32
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f001 f99e 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AN1_SILNIK_Pin|AN2_SILNIK_Pin;
 800065c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0x11c>)
 8000676:	f001 f98f 	bl	8001998 <HAL_GPIO_Init>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	48000800 	.word	0x48000800
 800068c:	48000400 	.word	0x48000400
 8000690:	10210000 	.word	0x10210000

08000694 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f001 fb22 	bl	8001d18 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 f94c 	bl	8000976 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fff3 	bl	80026cc <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f943 	bl	8000976 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f002 f835 	bl	8002762 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f93a 	bl	8000976 <Error_Handler>
  }

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000098 	.word	0x20000098
 800070c:	40005400 	.word	0x40005400
 8000710:	10909cec 	.word	0x10909cec

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_I2C_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d128      	bne.n	8000788 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_I2C_MspInit+0x80>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800074e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_I2C_MspInit+0x84>)
 800076c:	f001 f914 	bl	8001998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077a:	6593      	str	r3, [r2, #88]	; 0x58
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_I2C_MspInit+0x80>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40005400 	.word	0x40005400
 8000794:	40021000 	.word	0x40021000
 8000798:	48000400 	.word	0x48000400

0800079c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b0a      	cmp	r3, #10
 80007a8:	d109      	bne.n	80007be <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80007aa:	230d      	movs	r3, #13
 80007ac:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80007ae:	f107 010f 	add.w	r1, r7, #15
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <__io_putchar+0x3c>)
 80007ba:	f004 fd17 	bl	80051ec <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c4:	2201      	movs	r2, #1
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <__io_putchar+0x3c>)
 80007c8:	f004 fd10 	bl	80051ec <HAL_UART_Transmit>
    return 1;
 80007cc:	2301      	movs	r3, #1
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000260 	.word	0x20000260

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 ff55 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f84f 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff fec1 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ee:	f000 feb3 	bl	8001558 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007f2:	f7ff ff4f 	bl	8000694 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007f6:	f000 f9f1 	bl	8000bdc <MX_TIM1_Init>
  MX_TIM2_Init();
 80007fa:	f000 facf 	bl	8000d9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007fe:	f000 fb77 	bl	8000ef0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000802:	f000 fc1f 	bl	8001044 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000806:	f000 fc95 	bl	8001134 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
   uint8_t test = 0x5A;
 800080a:	235a      	movs	r3, #90	; 0x5a
 800080c:	71fb      	strb	r3, [r7, #7]
   uint8_t result = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	71bb      	strb	r3, [r7, #6]

   if(HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x10, 1, &test, sizeof(test), 500) != HAL_OK){
 8000812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	2210      	movs	r2, #16
 8000824:	21a0      	movs	r1, #160	; 0xa0
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <main+0x9c>)
 8000828:	f001 fb06 	bl	8001e38 <HAL_I2C_Mem_Write>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <main+0x5c>
   		printf("Blad zapisu\n\r");
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <main+0xa0>)
 8000834:	f005 f98c 	bl	8005b50 <iprintf>
   }
   HAL_Delay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f000 ffa5 	bl	8001788 <HAL_Delay>
   if (HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x10, 1, &result, sizeof(result), HAL_MAX_DELAY) != HAL_OK){
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	2301      	movs	r3, #1
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2301      	movs	r3, #1
 800084e:	2210      	movs	r2, #16
 8000850:	21a0      	movs	r1, #160	; 0xa0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <main+0x9c>)
 8000854:	f001 fc04 	bl	8002060 <HAL_I2C_Mem_Read>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <main+0x88>
   		  printf("Blad odczytu\n\r");
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <main+0xa4>)
 8000860:	f005 f976 	bl	8005b50 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  printf("%d\n\r", result);
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <main+0xa8>)
 800086a:	f005 f971 	bl	8005b50 <iprintf>
	  HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 ff8a 	bl	8001788 <HAL_Delay>
	  printf("%d\n\r", result);
 8000874:	e7f6      	b.n	8000864 <main+0x88>
 8000876:	bf00      	nop
 8000878:	20000098 	.word	0x20000098
 800087c:	08006930 	.word	0x08006930
 8000880:	08006940 	.word	0x08006940
 8000884:	08006950 	.word	0x08006950

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0b8      	sub	sp, #224	; 0xe0
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000892:	2244      	movs	r2, #68	; 0x44
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f005 f952 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2288      	movs	r2, #136	; 0x88
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 f944 	bl	8005b40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008de:	230a      	movs	r3, #10
 80008e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 ffe2 	bl	80028c4 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000906:	f000 f836 	bl	8000976 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2303      	movs	r3, #3
 8000912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000928:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800092c:	2104      	movs	r1, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fbae 	bl	8003090 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800093a:	f000 f81c 	bl	8000976 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800093e:	2342      	movs	r3, #66	; 0x42
 8000940:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000946:	2300      	movs	r3, #0
 8000948:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fda3 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000958:	f000 f80d 	bl	8000976 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000960:	f001 ff5a 	bl	8002818 <HAL_PWREx_ControlVoltageScaling>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800096a:	f000 f804 	bl	8000976 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	37e0      	adds	r7, #224	; 0xe0
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	; 0x60
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 fe92 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
	}

return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe8d 	bl	800079c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
	}
	return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f004 ffda 	bl	8005aec <__errno>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20018000 	.word	0x20018000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	2000008c 	.word	0x2000008c
 8000b6c:	200002e8 	.word	0x200002e8

08000b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <SystemInit+0x64>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <SystemInit+0x64>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <SystemInit+0x68>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <SystemInit+0x68>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <SystemInit+0x68>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <SystemInit+0x68>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <SystemInit+0x68>)
 8000b9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ba0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <SystemInit+0x68>)
 8000ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <SystemInit+0x68>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <SystemInit+0x68>)
 8000bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <SystemInit+0x68>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SystemInit+0x64>)
 8000bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09e      	sub	sp, #120	; 0x78
 8000be0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	222c      	movs	r2, #44	; 0x2c
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 ff8b 	bl	8005b40 <memset>

  htim1.Instance = TIM1;
 8000c2a:	4b5a      	ldr	r3, [pc, #360]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c2c:	4a5a      	ldr	r2, [pc, #360]	; (8000d98 <MX_TIM1_Init+0x1bc>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000c30:	4b58      	ldr	r3, [pc, #352]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c32:	224f      	movs	r2, #79	; 0x4f
 8000c34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c56:	484f      	ldr	r0, [pc, #316]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c58:	f003 f8ce 	bl	8003df8 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c62:	f7ff fe88 	bl	8000976 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c70:	4619      	mov	r1, r3
 8000c72:	4848      	ldr	r0, [pc, #288]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c74:	f003 fb7e 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c7e:	f7ff fe7a 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c82:	4844      	ldr	r0, [pc, #272]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c84:	f003 f970 	bl	8003f68 <HAL_TIM_IC_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c8e:	f7ff fe72 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c92:	4840      	ldr	r0, [pc, #256]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000c94:	f003 f907 	bl	8003ea6 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c9e:	f7ff fe6a 	bl	8000976 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4837      	ldr	r0, [pc, #220]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000cb6:	f004 f945 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000cc0:	f7ff fe59 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	482d      	ldr	r0, [pc, #180]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000cde:	f003 f9a4 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ce8:	f7ff fe45 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cec:	2302      	movs	r3, #2
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000cfe:	f003 f994 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000d08:	f7ff fe35 	bl	8000976 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000d32:	f003 fa0f 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000d3c:	f7ff fe1b 	bl	8000976 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000d76:	f004 f96d 	bl	8005054 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8000d80:	f7ff fdf9 	bl	8000976 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM1_Init+0x1b8>)
 8000d86:	f000 fb19 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3778      	adds	r7, #120	; 0x78
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000017c 	.word	0x2000017c
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b092      	sub	sp, #72	; 0x48
 8000da0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000ddc:	4b43      	ldr	r3, [pc, #268]	; (8000eec <MX_TIM2_Init+0x150>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <MX_TIM2_Init+0x150>)
 8000de6:	224f      	movs	r2, #79	; 0x4f
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <MX_TIM2_Init+0x150>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <MX_TIM2_Init+0x150>)
 8000df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <MX_TIM2_Init+0x150>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4839      	ldr	r0, [pc, #228]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e06:	f002 fff7 	bl	8003df8 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e10:	f7ff fdb1 	bl	8000976 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4832      	ldr	r0, [pc, #200]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e22:	f003 faa7 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f7ff fda3 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e30:	482e      	ldr	r0, [pc, #184]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e32:	f003 f899 	bl	8003f68 <HAL_TIM_IC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000e3c:	f7ff fd9b 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e42:	f003 f830 	bl	8003ea6 <HAL_TIM_PWM_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e4c:	f7ff fd93 	bl	8000976 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4823      	ldr	r0, [pc, #140]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e60:	f004 f870 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e6a:	f7ff fd84 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <MX_TIM2_Init+0x150>)
 8000e88:	f003 f8cf 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000e92:	f7ff fd70 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_TIM2_Init+0x150>)
 8000ea8:	f003 f8bf 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000eb2:	f7ff fd60 	bl	8000976 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2360      	movs	r3, #96	; 0x60
 8000eb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000eba:	230a      	movs	r3, #10
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM2_Init+0x150>)
 8000ece:	f003 f941 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x140>
  {
    Error_Handler();
 8000ed8:	f7ff fd4d 	bl	8000976 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM2_Init+0x150>)
 8000ede:	f000 fa6d 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3748      	adds	r7, #72	; 0x48
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001c8 	.word	0x200001c8

08000ef0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b092      	sub	sp, #72	; 0x48
 8000ef4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f32:	4a43      	ldr	r2, [pc, #268]	; (8001040 <MX_TIM3_Init+0x150>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f38:	224f      	movs	r2, #79	; 0x4f
 8000f3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f56:	4839      	ldr	r0, [pc, #228]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f58:	f002 ff4e 	bl	8003df8 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f62:	f7ff fd08 	bl	8000976 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f70:	4619      	mov	r1, r3
 8000f72:	4832      	ldr	r0, [pc, #200]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f74:	f003 f9fe 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f7e:	f7ff fcfa 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f84:	f002 fff0 	bl	8003f68 <HAL_TIM_IC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000f8e:	f7ff fcf2 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f92:	482a      	ldr	r0, [pc, #168]	; (800103c <MX_TIM3_Init+0x14c>)
 8000f94:	f002 ff87 	bl	8003ea6 <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f9e:	f7ff fcea 	bl	8000976 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <MX_TIM3_Init+0x14c>)
 8000fb2:	f003 ffc7 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000fbc:	f7ff fcdb 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_TIM3_Init+0x14c>)
 8000fda:	f003 f826 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000fe4:	f7ff fcc7 	bl	8000976 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <MX_TIM3_Init+0x14c>)
 8000ffa:	f003 f816 	bl	800402a <HAL_TIM_IC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001004:	f7ff fcb7 	bl	8000976 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	; 0x60
 800100a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	2208      	movs	r2, #8
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM3_Init+0x14c>)
 8001020:	f003 f898 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x13e>
  {
    Error_Handler();
 800102a:	f7ff fca4 	bl	8000976 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM3_Init+0x14c>)
 8001030:	f000 f9c4 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8001034:	bf00      	nop
 8001036:	3748      	adds	r7, #72	; 0x48
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000130 	.word	0x20000130
 8001040:	40000400 	.word	0x40000400

08001044 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b092      	sub	sp, #72	; 0x48
 8001048:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	222c      	movs	r2, #44	; 0x2c
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fd6b 	bl	8005b40 <memset>

  htim16.Instance = TIM16;
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <MX_TIM16_Init+0xe8>)
 800106c:	4a30      	ldr	r2, [pc, #192]	; (8001130 <MX_TIM16_Init+0xec>)
 800106e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 5;
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_TIM16_Init+0xe8>)
 8001072:	2205      	movs	r2, #5
 8001074:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_TIM16_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM16_Init+0xe8>)
 800107e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001082:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_TIM16_Init+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_TIM16_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_TIM16_Init+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001096:	4825      	ldr	r0, [pc, #148]	; (800112c <MX_TIM16_Init+0xe8>)
 8001098:	f002 feae 	bl	8003df8 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80010a2:	f7ff fc68 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_TIM16_Init+0xe8>)
 80010a8:	f002 fefd 	bl	8003ea6 <HAL_TIM_PWM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80010b2:	f7ff fc60 	bl	8000976 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <MX_TIM16_Init+0xe8>)
 80010dc:	f003 f83a 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80010e6:	f7ff fc46 	bl	8000976 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001102:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM16_Init+0xe8>)
 800110e:	f003 ffa1 	bl	8005054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001118:	f7ff fc2d 	bl	8000976 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM16_Init+0xe8>)
 800111e:	f000 f94d 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8001122:	bf00      	nop
 8001124:	3748      	adds	r7, #72	; 0x48
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000214 	.word	0x20000214
 8001130:	40014400 	.word	0x40014400

08001134 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b092      	sub	sp, #72	; 0x48
 8001138:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	222c      	movs	r2, #44	; 0x2c
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fcf3 	bl	8005b40 <memset>

  htim17.Instance = TIM17;
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <MX_TIM17_Init+0xe8>)
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <MX_TIM17_Init+0xec>)
 800115e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5;
 8001160:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_TIM17_Init+0xe8>)
 8001162:	2205      	movs	r2, #5
 8001164:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <MX_TIM17_Init+0xe8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_TIM17_Init+0xe8>)
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_TIM17_Init+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_TIM17_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_TIM17_Init+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <MX_TIM17_Init+0xe8>)
 8001188:	f002 fe36 	bl	8003df8 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001192:	f7ff fbf0 	bl	8000976 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001196:	4821      	ldr	r0, [pc, #132]	; (800121c <MX_TIM17_Init+0xe8>)
 8001198:	f002 fe85 	bl	8003ea6 <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80011a2:	f7ff fbe8 	bl	8000976 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM17_Init+0xe8>)
 80011cc:	f002 ffc2 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80011d6:	f7ff fbce 	bl	8000976 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM17_Init+0xe8>)
 80011fe:	f003 ff29 	bl	8005054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001208:	f7ff fbb5 	bl	8000976 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM17_Init+0xe8>)
 800120e:	f000 f8d5 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8001212:	bf00      	nop
 8001214:	3748      	adds	r7, #72	; 0x48
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000e4 	.word	0x200000e4
 8001220:	40014800 	.word	0x40014800

08001224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	; 0x40
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_TIM_Base_MspInit+0x180>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12a      	bne.n	800129c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800124c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ULT1_ECHO_Pin;
 8001276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001288:	2301      	movs	r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULT1_ECHO_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fb7f 	bl	8001998 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800129a:	e07f      	b.n	800139c <HAL_TIM_Base_MspInit+0x178>
  else if(tim_baseHandle->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a4:	d129      	bne.n	80012fa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a6:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a3f      	ldr	r2, [pc, #252]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a39      	ldr	r2, [pc, #228]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ULT2_ECHO_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e6:	2301      	movs	r3, #1
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULT2_ECHO_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f000 fb50 	bl	8001998 <HAL_GPIO_Init>
}
 80012f8:	e050      	b.n	800139c <HAL_TIM_Base_MspInit+0x178>
  else if(tim_baseHandle->Instance==TIM3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <HAL_TIM_Base_MspInit+0x188>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d128      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6593      	str	r3, [r2, #88]	; 0x58
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULT3_ECHO_Pin;
 8001334:	2340      	movs	r3, #64	; 0x40
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001344:	2302      	movs	r3, #2
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULT3_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001350:	f000 fb22 	bl	8001998 <HAL_GPIO_Init>
}
 8001354:	e022      	b.n	800139c <HAL_TIM_Base_MspInit+0x178>
  else if(tim_baseHandle->Instance==TIM16)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_TIM_Base_MspInit+0x190>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d10c      	bne.n	800137a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136a:	6613      	str	r3, [r2, #96]	; 0x60
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
}
 8001378:	e010      	b.n	800139c <HAL_TIM_Base_MspInit+0x178>
  else if(tim_baseHandle->Instance==TIM17)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_TIM_Base_MspInit+0x194>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d10b      	bne.n	800139c <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	6613      	str	r3, [r2, #96]	; 0x60
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_TIM_Base_MspInit+0x184>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40000400 	.word	0x40000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	40014400 	.word	0x40014400
 80013b8:	40014800 	.word	0x40014800

080013bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_TIM_MspPostInit+0x180>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d11e      	bne.n	800141c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a57      	ldr	r2, [pc, #348]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ULT1_TRIG_Pin;
 80013f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ULT1_TRIG_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f000 fabf 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800141a:	e08a      	b.n	8001532 <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d11d      	bne.n	8001462 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a45      	ldr	r2, [pc, #276]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULT2_TRIG_Pin;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ULT2_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	483a      	ldr	r0, [pc, #232]	; (8001544 <HAL_TIM_MspPostInit+0x188>)
 800145c:	f000 fa9c 	bl	8001998 <HAL_GPIO_Init>
}
 8001460:	e067      	b.n	8001532 <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM3)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a38      	ldr	r2, [pc, #224]	; (8001548 <HAL_TIM_MspPostInit+0x18c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d11d      	bne.n	80014a8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ULT3_TRIG_Pin;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001496:	2302      	movs	r3, #2
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ULT3_TRIG_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <HAL_TIM_MspPostInit+0x190>)
 80014a2:	f000 fa79 	bl	8001998 <HAL_GPIO_Init>
}
 80014a6:	e044      	b.n	8001532 <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM16)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_TIM_MspPostInit+0x194>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d11d      	bne.n	80014ee <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_SILNIK1_Pin;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80014da:	230e      	movs	r3, #14
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_SILNIK1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f000 fa56 	bl	8001998 <HAL_GPIO_Init>
}
 80014ec:	e021      	b.n	8001532 <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM17)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_TIM_MspPostInit+0x198>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d11c      	bne.n	8001532 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_MspPostInit+0x184>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SILNIK2_Pin;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001520:	230e      	movs	r3, #14
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_SILNIK2_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f000 fa33 	bl	8001998 <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400
 8001548:	40000400 	.word	0x40000400
 800154c:	48000800 	.word	0x48000800
 8001550:	40014400 	.word	0x40014400
 8001554:	40014800 	.word	0x40014800

08001558 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_USART2_UART_Init+0x5c>)
 8001560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001564:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART2_UART_Init+0x58>)
 800159c:	f003 fdd8 	bl	8005150 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015a6:	f7ff f9e6 	bl	8000976 <Error_Handler>
  }

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000260 	.word	0x20000260
 80015b4:	40004400 	.word	0x40004400

080015b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_UART_MspInit+0x7c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d128      	bne.n	800162c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x80>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <HAL_UART_MspInit+0x80>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_UART_MspInit+0x80>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_UART_MspInit+0x80>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_UART_MspInit+0x80>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_UART_MspInit+0x80>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f000 f9b6 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004400 	.word	0x40004400
 8001638:	40021000 	.word	0x40021000

0800163c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001640:	f7ff fa96 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001644:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001646:	e003      	b.n	8001650 <LoopCopyDataInit>

08001648 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800164a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800164c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800164e:	3104      	adds	r1, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001654:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001656:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001658:	d3f6      	bcc.n	8001648 <CopyDataInit>
	ldr	r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopForever+0x12>)
	b	LoopFillZerobss
 800165c:	e002      	b.n	8001664 <LoopFillZerobss>

0800165e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800165e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001660:	f842 3b04 	str.w	r3, [r2], #4

08001664 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <LoopForever+0x16>)
	cmp	r2, r3
 8001666:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001668:	d3f9      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f004 fa45 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166e:	f7ff f8b5 	bl	80007dc <main>

08001672 <LoopForever>:

LoopForever:
    b LoopForever
 8001672:	e7fe      	b.n	8001672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001678:	08006a48 	.word	0x08006a48
	ldr	r0, =_sdata
 800167c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001680:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001684:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001688:	200002e8 	.word	0x200002e8

0800168c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>
	...

08001690 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_Init+0x3c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x3c>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f942 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f80f 	bl	80016d0 <HAL_InitTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	e001      	b.n	80016c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016be:	f7ff f961 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_InitTick+0x6c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d023      	beq.n	800172c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_InitTick+0x70>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_InitTick+0x6c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f93f 	bl	800197e <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d809      	bhi.n	8001720 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001714:	f000 f917 	bl	8001946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_InitTick+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e007      	b.n	8001730 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e004      	b.n	8001730 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e001      	b.n	8001730 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	200002e0 	.word	0x200002e0

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200002e0 	.word	0x200002e0

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_Delay+0x40>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000008 	.word	0x20000008

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff47 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff5c 	bl	8001814 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb0 	bl	80018ec <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e17f      	b.n	8001ca8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8171 	beq.w	8001ca2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d00b      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b12      	cmp	r3, #18
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0201 	and.w	r2, r3, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d118      	bne.n	8001a80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x128>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b12      	cmp	r3, #18
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	6939      	ldr	r1, [r7, #16]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80ac 	beq.w	8001ca2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_GPIO_Init+0x32c>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_GPIO_Init+0x32c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6613      	str	r3, [r2, #96]	; 0x60
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_GPIO_Init+0x32c>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b62:	4a59      	ldr	r2, [pc, #356]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x242>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x23e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x338>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x23a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	; (8001cd4 <HAL_GPIO_Init+0x33c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x236>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x340>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x232>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_GPIO_Init+0x344>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x22e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <HAL_GPIO_Init+0x348>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x22a>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bec:	4936      	ldr	r1, [pc, #216]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae78 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	48000400 	.word	0x48000400
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	48000c00 	.word	0x48000c00
 8001cd8:	48001000 	.word	0x48001000
 8001cdc:	48001400 	.word	0x48001400
 8001ce0:	48001800 	.word	0x48001800
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e081      	b.n	8001e2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fce8 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e006      	b.n	8001da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d104      	bne.n	8001db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	ea42 0103 	orr.w	r1, r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	813b      	strh	r3, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 80f9 	bne.w	8002052 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_I2C_Mem_Write+0x34>
 8001e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0ed      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Mem_Write+0x4e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0e6      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e8e:	f7ff fc6f 	bl	8001770 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2319      	movs	r3, #25
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fac3 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d1      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ed8:	88f8      	ldrh	r0, [r7, #6]
 8001eda:	893a      	ldrh	r2, [r7, #8]
 8001edc:	8979      	ldrh	r1, [r7, #10]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f9d3 	bl	8002294 <I2C_RequestMemoryWrite>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0a9      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d90e      	bls.n	8001f28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	8979      	ldrh	r1, [r7, #10]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fba5 	bl	8002670 <I2C_TransferConfig>
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	8979      	ldrh	r1, [r7, #10]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fb94 	bl	8002670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 faad 	bl	80024ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e07b      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d034      	beq.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d130      	bne.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 fa3f 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04d      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d90e      	bls.n	8001fe0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fb49 	bl	8002670 <I2C_TransferConfig>
 8001fde:	e00f      	b.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	8979      	ldrh	r1, [r7, #10]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fb38 	bl	8002670 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d19e      	bne.n	8001f48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fa8c 	bl	800252c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e01a      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2220      	movs	r2, #32
 8002024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_I2C_Mem_Write+0x224>)
 8002032:	400b      	ands	r3, r1
 8002034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	817b      	strh	r3, [r7, #10]
 8002072:	460b      	mov	r3, r1
 8002074:	813b      	strh	r3, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	f040 80fd 	bne.w	8002282 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_I2C_Mem_Read+0x34>
 800208e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0f1      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Mem_Read+0x4e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0ea      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020b6:	f7ff fb5b 	bl	8001770 <HAL_GetTick>
 80020ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2319      	movs	r3, #25
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f9af 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d5      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2222      	movs	r2, #34	; 0x22
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002100:	88f8      	ldrh	r0, [r7, #6]
 8002102:	893a      	ldrh	r2, [r7, #8]
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4603      	mov	r3, r0
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f913 	bl	800233c <I2C_RequestMemoryRead>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0ad      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2bff      	cmp	r3, #255	; 0xff
 8002130:	d90e      	bls.n	8002150 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	22ff      	movs	r2, #255	; 0xff
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	b2da      	uxtb	r2, r3
 800213e:	8979      	ldrh	r1, [r7, #10]
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <HAL_I2C_Mem_Read+0x22c>)
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa91 	bl	8002670 <I2C_TransferConfig>
 800214e:	e00f      	b.n	8002170 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	b2da      	uxtb	r2, r3
 8002160:	8979      	ldrh	r1, [r7, #10]
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_I2C_Mem_Read+0x22c>)
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fa80 	bl	8002670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2200      	movs	r2, #0
 8002178:	2104      	movs	r1, #4
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f956 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07c      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_I2C_Mem_Read+0x1d0>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f927 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04d      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa31 	bl	8002670 <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa20 	bl	8002670 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19a      	bne.n	8002170 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f974 	bl	800252c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01a      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_I2C_Mem_Read+0x230>)
 8002262:	400b      	ands	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	80002400 	.word	0x80002400
 8002290:	fe00e800 	.word	0xfe00e800

08002294 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	460b      	mov	r3, r1
 80022a8:	813b      	strh	r3, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	8979      	ldrh	r1, [r7, #10]
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <I2C_RequestMemoryWrite+0xa4>)
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f9d7 	bl	8002670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	69b9      	ldr	r1, [r7, #24]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f8f0 	bl	80024ac <I2C_WaitOnTXISFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e02c      	b.n	8002330 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022dc:	893b      	ldrh	r3, [r7, #8]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
 80022e6:	e015      	b.n	8002314 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022e8:	893b      	ldrh	r3, [r7, #8]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8d6 	bl	80024ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e012      	b.n	8002330 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f884 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	80002000 	.word	0x80002000

0800233c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	817b      	strh	r3, [r7, #10]
 800234e:	460b      	mov	r3, r1
 8002350:	813b      	strh	r3, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <I2C_RequestMemoryRead+0xa4>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f984 	bl	8002670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f89d 	bl	80024ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e02c      	b.n	80023d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
 800238c:	e015      	b.n	80023ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f883 	bl	80024ac <I2C_WaitOnTXISFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e012      	b.n	80023d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f831 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	80002000 	.word	0x80002000

080023e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d103      	bne.n	8002402 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d007      	beq.n	8002420 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	619a      	str	r2, [r3, #24]
  }
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	e022      	b.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002444:	d01e      	beq.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7ff f993 	bl	8001770 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d113      	bne.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e00f      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d0cd      	beq.n	800243e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024b8:	e02c      	b.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f870 	bl	80025a4 <I2C_IsAcknowledgeFailed>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e02a      	b.n	8002524 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d4:	d01e      	beq.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7ff f94b 	bl	8001770 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d113      	bne.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e007      	b.n	8002524 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d1cb      	bne.n	80024ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	e028      	b.n	800258c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f830 	bl	80025a4 <I2C_IsAcknowledgeFailed>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e026      	b.n	800259c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f90f 	bl	8001770 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e007      	b.n	800259c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d1cf      	bne.n	800253a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d151      	bne.n	8002662 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025be:	e022      	b.n	8002606 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c6:	d01e      	beq.n	8002606 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff f8d2 	bl	8001770 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_IsAcknowledgeFailed+0x3a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e02e      	b.n	8002664 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b20      	cmp	r3, #32
 8002612:	d1d5      	bne.n	80025c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2210      	movs	r2, #16
 800261a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2220      	movs	r2, #32
 8002622:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff fedd 	bl	80023e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <I2C_IsAcknowledgeFailed+0xc8>)
 8002636:	400b      	ands	r3, r1
 8002638:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	fe00e800 	.word	0xfe00e800

08002670 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	817b      	strh	r3, [r7, #10]
 800267e:	4613      	mov	r3, r2
 8002680:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	0d5b      	lsrs	r3, r3, #21
 800268c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <I2C_TransferConfig+0x58>)
 8002692:	430b      	orrs	r3, r1
 8002694:	43db      	mvns	r3, r3
 8002696:	ea02 0103 	and.w	r1, r2, r3
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026a0:	7a7b      	ldrb	r3, [r7, #9]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	03ff63ff 	.word	0x03ff63ff

080026cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d138      	bne.n	8002754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e032      	b.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800271e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b20      	cmp	r3, #32
 8002776:	d139      	bne.n	80027ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002782:	2302      	movs	r3, #2
 8002784:	e033      	b.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2224      	movs	r2, #36	; 0x24
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_PWREx_GetVoltageRange+0x18>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40007000 	.word	0x40007000

08002818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002826:	d130      	bne.n	800288a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002834:	d038      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2232      	movs	r2, #50	; 0x32
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285c:	e002      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d102      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f2      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002884:	d110      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e00f      	b.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d007      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a0:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e3d4      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d6:	4ba1      	ldr	r3, [pc, #644]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e0:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80e4 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_RCC_OscConfig+0x4a>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f040 808b 	bne.w	8002a1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b01      	cmp	r3, #1
 800290a:	f040 8087 	bne.w	8002a1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290e:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e3ac      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_RCC_OscConfig+0x7c>
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293e:	e005      	b.n	800294c <HAL_RCC_OscConfig+0x88>
 8002940:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294c:	4293      	cmp	r3, r2
 800294e:	d223      	bcs.n	8002998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd3f 	bl	80033d8 <RCC_SetFlashLatencyFromMSIRange>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e38d      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4977      	ldr	r1, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4972      	ldr	r1, [pc, #456]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
 8002996:	e025      	b.n	80029e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6f      	ldr	r2, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	496a      	ldr	r1, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4965      	ldr	r1, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fcff 	bl	80033d8 <RCC_SetFlashLatencyFromMSIRange>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e34d      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e4:	f000 fc36 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80029e8:	4601      	mov	r1, r0
 80029ea:	4b5c      	ldr	r3, [pc, #368]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4a5a      	ldr	r2, [pc, #360]	; (8002b60 <HAL_RCC_OscConfig+0x29c>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa21 f303 	lsr.w	r3, r1, r3
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_OscConfig+0x2a0>)
 8002a02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_OscConfig+0x2a4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fe61 	bl	80016d0 <HAL_InitTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d052      	beq.n	8002abe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	e331      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d032      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a24:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe9e 	bl	8001770 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a38:	f7fe fe9a 	bl	8001770 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e31a      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	493b      	ldr	r1, [pc, #236]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a74:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4936      	ldr	r1, [pc, #216]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e01a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a33      	ldr	r2, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a96:	f7fe fe6b 	bl	8001770 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fe67 	bl	8001770 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e2e7      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x1da>
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d074      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x21a>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d10e      	bne.n	8002af6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d064      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d160      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e2c4      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x24a>
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e01d      	b.n	8002b4a <HAL_RCC_OscConfig+0x286>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x26e>
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x286>
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <HAL_RCC_OscConfig+0x298>)
 8002b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fe0d 	bl	8001770 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x2ba>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08006958 	.word	0x08006958
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fe00 	bl	8001770 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e280      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	4baf      	ldr	r3, [pc, #700]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2a8>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdf0 	bl	8001770 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe fdec 	bl	8001770 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e26c      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba6:	4ba5      	ldr	r3, [pc, #660]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2d0>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d060      	beq.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x310>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d116      	bne.n	8002c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd4:	4b99      	ldr	r3, [pc, #612]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_OscConfig+0x328>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e249      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b93      	ldr	r3, [pc, #588]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	4990      	ldr	r1, [pc, #576]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c00:	e040      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d023      	beq.n	8002c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0a:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a8b      	ldr	r2, [pc, #556]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fdab 	bl	8001770 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fda7 	bl	8001770 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e227      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b82      	ldr	r3, [pc, #520]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b7f      	ldr	r3, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	497c      	ldr	r1, [pc, #496]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	e018      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b7a      	ldr	r3, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a79      	ldr	r2, [pc, #484]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fd87 	bl	8001770 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fe fd83 	bl	8001770 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e203      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c78:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fd62 	bl	8001770 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fd5e 	bl	8001770 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1de      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x3ec>
 8002cd0:	e01b      	b.n	8002d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b5a      	ldr	r3, [pc, #360]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd8:	4a58      	ldr	r2, [pc, #352]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fd45 	bl	8001770 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fd41 	bl	8001770 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1c1      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ef      	bne.n	8002cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a6 	beq.w	8002e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d1c:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	; 0x58
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d44:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_OscConfig+0x57c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d118      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x57c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x57c>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fd08 	bl	8001770 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7fe fd04 	bl	8001770 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e184      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d76:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCC_OscConfig+0x57c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4d8>
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9a:	e024      	b.n	8002de6 <HAL_RCC_OscConfig+0x522>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d110      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x502>
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc4:	e00f      	b.n	8002de6 <HAL_RCC_OscConfig+0x522>
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fcbf 	bl	8001770 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fcbb 	bl	8001770 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e139      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ed      	beq.n	8002df6 <HAL_RCC_OscConfig+0x532>
 8002e1a:	e01a      	b.n	8002e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fca8 	bl	8001770 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e22:	e00f      	b.n	8002e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe fca4 	bl	8001770 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d906      	bls.n	8002e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e122      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e44:	4b90      	ldr	r3, [pc, #576]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e8      	bne.n	8002e24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b8b      	ldr	r3, [pc, #556]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4a8a      	ldr	r2, [pc, #552]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8108 	beq.w	800307e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	f040 80d0 	bne.w	8003018 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e78:	4b83      	ldr	r3, [pc, #524]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d130      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	3b01      	subs	r3, #1
 8002e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d127      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11f      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb8:	2a07      	cmp	r2, #7
 8002eba:	bf14      	ite	ne
 8002ebc:	2201      	movne	r2, #1
 8002ebe:	2200      	moveq	r2, #0
 8002ec0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d109      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d06e      	beq.n	8002fcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d069      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ef4:	4b64      	ldr	r3, [pc, #400]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b7      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f10:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f1c:	f7fe fc28 	bl	8001770 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fc24 	bl	8001770 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0a4      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCC_OscConfig+0x7c8>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f5c:	0212      	lsls	r2, r2, #8
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0552      	lsls	r2, r2, #21
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0652      	lsls	r2, r2, #25
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f7c:	0912      	lsrs	r2, r2, #4
 8002f7e:	0452      	lsls	r2, r2, #17
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4941      	ldr	r1, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3e      	ldr	r2, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa0:	f7fe fbe6 	bl	8001770 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fbe2 	bl	8001770 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e062      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fc6:	e05a      	b.n	800307e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e059      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d152      	bne.n	800307e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff0:	f7fe fbbe 	bl	8001770 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe fbba 	bl	8001770 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e03a      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x734>
 8003016:	e032      	b.n	800307e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d02d      	beq.n	800307a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8003024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003028:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 800303c:	f023 0303 	bic.w	r3, r3, #3
 8003040:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 8003048:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800304c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003050:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fb8d 	bl	8001770 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fb89 	bl	8001770 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e009      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x7c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x796>
 8003078:	e001      	b.n	800307e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	f99d808c 	.word	0xf99d808c

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0c8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d910      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 0207 	bic.w	r2, r3, #7
 80030ba:	4961      	ldr	r1, [pc, #388]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0b0      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d04c      	beq.n	800317a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e8:	4b56      	ldr	r3, [pc, #344]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d121      	bne.n	8003138 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e09e      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003100:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d115      	bne.n	8003138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e092      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003118:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e086      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e07e      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	493f      	ldr	r1, [pc, #252]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314a:	f7fe fb11 	bl	8001770 <HAL_GetTick>
 800314e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003150:	e00a      	b.n	8003168 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003152:	f7fe fb0d 	bl	8001770 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e066      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 020c 	and.w	r2, r3, #12
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	429a      	cmp	r2, r3
 8003178:	d1eb      	bne.n	8003152 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	492c      	ldr	r1, [pc, #176]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d210      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4924      	ldr	r1, [pc, #144]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_RCC_ClockConfig+0x1b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e036      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4918      	ldr	r1, [pc, #96]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4910      	ldr	r1, [pc, #64]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003206:	f000 f825 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 800320a:	4601      	mov	r1, r0
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	fa21 f303 	lsr.w	r3, r1, r3
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fa50 	bl	80016d0 <HAL_InitTick>
 8003230:	4603      	mov	r3, r0
 8003232:	72fb      	strb	r3, [r7, #11]

  return status;
 8003234:	7afb      	ldrb	r3, [r7, #11]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	08006958 	.word	0x08006958
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x34>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d121      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d11e      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003288:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e005      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	e004      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d8:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_RCC_GetSysClockFreq+0x110>)
 80032da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d133      	bne.n	800334a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0xaa>
 80032f6:	e005      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e005      	b.n	800330a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_GetSysClockFreq+0x110>)
 8003300:	617b      	str	r3, [r7, #20]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	617b      	str	r3, [r7, #20]
      break;
 8003308:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	3301      	adds	r3, #1
 8003316:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	fb02 f203 	mul.w	r2, r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_GetSysClockFreq+0x104>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0e5b      	lsrs	r3, r3, #25
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800334a:	69bb      	ldr	r3, [r7, #24]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3724      	adds	r7, #36	; 0x24
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000
 800335c:	08006970 	.word	0x08006970
 8003360:	00f42400 	.word	0x00f42400
 8003364:	007a1200 	.word	0x007a1200

08003368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_RCC_GetHCLKFreq+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003384:	f7ff fff0 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003388:	4601      	mov	r1, r0
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08006968 	.word	0x08006968

080033ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033b0:	f7ff ffda 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0adb      	lsrs	r3, r3, #11
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08006968 	.word	0x08006968

080033d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f0:	f7ff fa04 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 80033f4:	6178      	str	r0, [r7, #20]
 80033f6:	e014      	b.n	8003422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	4a24      	ldr	r2, [pc, #144]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	; 0x58
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9f4 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d10b      	bne.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d919      	bls.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2ba0      	cmp	r3, #160	; 0xa0
 8003434:	d902      	bls.n	800343c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003436:	2302      	movs	r3, #2
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e013      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	e010      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d902      	bls.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003448:	2303      	movs	r3, #3
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	e00a      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d102      	bne.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003454:	2302      	movs	r3, #2
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e004      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b70      	cmp	r3, #112	; 0x70
 800345e:	d101      	bne.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003460:	2301      	movs	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 0207 	bic.w	r2, r3, #7
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	40022000 	.word	0x40022000

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a0:	2300      	movs	r3, #0
 80034a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a4:	2300      	movs	r3, #0
 80034a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034bc:	d01c      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c2:	d802      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80034c8:	e01f      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80034ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ce:	d003      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80034d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d4:	d01c      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80034d6:	e018      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d8:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a84      	ldr	r2, [pc, #528]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e4:	e015      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fab9 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f6:	e00c      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3320      	adds	r3, #32
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fba0 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	74fb      	strb	r3, [r7, #19]
      break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003526:	4972      	ldr	r1, [pc, #456]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800352e:	e001      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03f      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d01c      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354e:	d802      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003554:	e01f      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355a:	d003      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800355c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003560:	d01c      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003562:	e018      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003564:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a61      	ldr	r2, [pc, #388]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003570:	e015      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fa73 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3320      	adds	r3, #32
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fb5a 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	74fb      	strb	r3, [r7, #19]
      break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800359c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a4:	4b52      	ldr	r3, [pc, #328]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b2:	494f      	ldr	r1, [pc, #316]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ba:	e001      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003610:	f7fe f8ae 	bl	8001770 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fe f8aa 	bl	8001770 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	74fb      	strb	r3, [r7, #19]
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d15c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe f869 	bl	8001770 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00b      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe f865 	bl	8001770 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	74fb      	strb	r3, [r7, #19]
            break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ec      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e6:	e009      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	74bb      	strb	r3, [r7, #18]
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b9e      	ldr	r3, [pc, #632]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a9d      	ldr	r2, [pc, #628]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371a:	4b98      	ldr	r3, [pc, #608]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 0203 	bic.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	4994      	ldr	r1, [pc, #592]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 020c 	bic.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	498c      	ldr	r1, [pc, #560]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375e:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4983      	ldr	r1, [pc, #524]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	497b      	ldr	r1, [pc, #492]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	4972      	ldr	r1, [pc, #456]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c4:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	496a      	ldr	r1, [pc, #424]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	4961      	ldr	r1, [pc, #388]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	4959      	ldr	r1, [pc, #356]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	4950      	ldr	r1, [pc, #320]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	4948      	ldr	r1, [pc, #288]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	493f      	ldr	r1, [pc, #252]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d028      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389e:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ae:	d106      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a31      	ldr	r2, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]
 80038bc:	e011      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f8c8 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d028      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038ee:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	491f      	ldr	r1, [pc, #124]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f899 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a02      	ldr	r2, [pc, #8]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e014      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f867 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039be:	4928      	ldr	r1, [pc, #160]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ce:	d10d      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2102      	movs	r1, #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f844 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3320      	adds	r3, #32
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f921 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b73      	ldr	r3, [pc, #460]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a7e:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d044      	beq.n	8003b34 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e041      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d00c      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x6e>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d013      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x80>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d120      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac0:	4b5f      	ldr	r3, [pc, #380]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11d      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad0:	e01a      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e013      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae4:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b00:	e006      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      break;
 8003b06:	e004      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b10:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b18:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	4944      	ldr	r1, [pc, #272]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d17d      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a40      	ldr	r2, [pc, #256]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd fe13 	bl	8001770 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4c:	e009      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b4e:	f7fd fe0f 	bl	8001770 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d902      	bls.n	8003b62 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b60:	e005      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b62:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ef      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d160      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d111      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	0211      	lsls	r1, r2, #8
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	0912      	lsrs	r2, r2, #4
 8003b92:	0452      	lsls	r2, r2, #17
 8003b94:	430a      	orrs	r2, r1
 8003b96:	492a      	ldr	r1, [pc, #168]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	610b      	str	r3, [r1, #16]
 8003b9c:	e027      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d112      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6912      	ldr	r2, [r2, #16]
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0552      	lsls	r2, r2, #21
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	491f      	ldr	r1, [pc, #124]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
 8003bc8:	e011      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	0211      	lsls	r1, r2, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6952      	ldr	r2, [r2, #20]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0652      	lsls	r2, r2, #25
 8003be6:	430a      	orrs	r2, r1
 8003be8:	4915      	ldr	r1, [pc, #84]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fdb9 	bl	8001770 <HAL_GetTick>
 8003bfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c00:	e009      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c02:	f7fd fdb5 	bl	8001770 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d902      	bls.n	8003c16 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	73fb      	strb	r3, [r7, #15]
          break;
 8003c14:	e005      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b68      	ldr	r3, [pc, #416]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d044      	beq.n	8003d14 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e041      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d00c      	beq.n	8003cb2 <RCCEx_PLLSAI2_Config+0x6e>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d013      	beq.n	8003cc4 <RCCEx_PLLSAI2_Config+0x80>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d120      	bne.n	8003ce2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca0:	4b54      	ldr	r3, [pc, #336]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11d      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e01a      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e013      	b.n	8003cec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd0:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce0:	e006      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e004      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cf0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	4939      	ldr	r1, [pc, #228]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d167      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d26:	f7fd fd23 	bl	8001770 <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d2c:	e009      	b.n	8003d42 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d2e:	f7fd fd1f 	bl	8001770 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d902      	bls.n	8003d42 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d40:	e005      	b.n	8003d4e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ef      	bne.n	8003d2e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d14a      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d111      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	0211      	lsls	r1, r2, #8
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68d2      	ldr	r2, [r2, #12]
 8003d70:	0912      	lsrs	r2, r2, #4
 8003d72:	0452      	lsls	r2, r2, #17
 8003d74:	430a      	orrs	r2, r1
 8003d76:	491f      	ldr	r1, [pc, #124]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	614b      	str	r3, [r1, #20]
 8003d7c:	e011      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	0211      	lsls	r1, r2, #8
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6912      	ldr	r2, [r2, #16]
 8003d94:	0852      	lsrs	r2, r2, #1
 8003d96:	3a01      	subs	r2, #1
 8003d98:	0652      	lsls	r2, r2, #25
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	4915      	ldr	r1, [pc, #84]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fd fcdf 	bl	8001770 <HAL_GetTick>
 8003db2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003db4:	e009      	b.n	8003dca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003db6:	f7fd fcdb 	bl	8001770 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d902      	bls.n	8003dca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003dc8:	e005      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ef      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000

08003df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e049      	b.n	8003e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fa00 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 fb56 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e049      	b.n	8003f4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f841 	bl	8003f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 faff 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e049      	b.n	800400e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f841 	bl	8004016 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 fa9e 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004040:	2302      	movs	r3, #2
 8004042:	e082      	b.n	800414a <HAL_TIM_IC_ConfigChannel+0x120>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f000 fdb1 	bl	8004bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 020c 	bic.w	r2, r2, #12
 8004074:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6999      	ldr	r1, [r3, #24]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	619a      	str	r2, [r3, #24]
 8004088:	e05a      	b.n	8004140 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11c      	bne.n	80040ca <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f000 fe2f 	bl	8004d02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6999      	ldr	r1, [r3, #24]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]
 80040c8:	e03a      	b.n	8004140 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f000 fe7c 	bl	8004ddc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 020c 	bic.w	r2, r2, #12
 80040f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69d9      	ldr	r1, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	61da      	str	r2, [r3, #28]
 8004106:	e01b      	b.n	8004140 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f000 fe9c 	bl	8004e54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800412a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69d9      	ldr	r1, [r3, #28]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800416a:	2302      	movs	r3, #2
 800416c:	e0fd      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x216>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b14      	cmp	r3, #20
 800417a:	f200 80f0 	bhi.w	800435e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	080041d9 	.word	0x080041d9
 8004188:	0800435f 	.word	0x0800435f
 800418c:	0800435f 	.word	0x0800435f
 8004190:	0800435f 	.word	0x0800435f
 8004194:	08004219 	.word	0x08004219
 8004198:	0800435f 	.word	0x0800435f
 800419c:	0800435f 	.word	0x0800435f
 80041a0:	0800435f 	.word	0x0800435f
 80041a4:	0800425b 	.word	0x0800425b
 80041a8:	0800435f 	.word	0x0800435f
 80041ac:	0800435f 	.word	0x0800435f
 80041b0:	0800435f 	.word	0x0800435f
 80041b4:	0800429b 	.word	0x0800429b
 80041b8:	0800435f 	.word	0x0800435f
 80041bc:	0800435f 	.word	0x0800435f
 80041c0:	0800435f 	.word	0x0800435f
 80041c4:	080042dd 	.word	0x080042dd
 80041c8:	0800435f 	.word	0x0800435f
 80041cc:	0800435f 	.word	0x0800435f
 80041d0:	0800435f 	.word	0x0800435f
 80041d4:	0800431d 	.word	0x0800431d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa1c 	bl	800461c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0208 	orr.w	r2, r2, #8
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	619a      	str	r2, [r3, #24]
      break;
 8004216:	e0a3      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa8c 	bl	800473c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]
      break;
 8004258:	e082      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 faf5 	bl	8004850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0208 	orr.w	r2, r2, #8
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	61da      	str	r2, [r3, #28]
      break;
 8004298:	e062      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fb5d 	bl	8004960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
      break;
 80042da:	e041      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fba6 	bl	8004a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0208 	orr.w	r2, r2, #8
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0204 	bic.w	r2, r2, #4
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800431a:	e021      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fbea 	bl	8004afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	021a      	lsls	r2, r3, #8
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800435c:	e000      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800435e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop

08004374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_TIM_ConfigClockSource+0x18>
 8004388:	2302      	movs	r3, #2
 800438a:	e0a8      	b.n	80044de <HAL_TIM_ConfigClockSource+0x16a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d067      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x124>
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d80b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x70>
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d073      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x144>
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d802      	bhi.n	80043da <HAL_TIM_ConfigClockSource+0x66>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d06f      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043d8:	e078      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d06c      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x144>
 80043de:	2b30      	cmp	r3, #48	; 0x30
 80043e0:	d06a      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80043e2:	e073      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d00d      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x90>
 80043e8:	2b70      	cmp	r3, #112	; 0x70
 80043ea:	d804      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x82>
 80043ec:	2b50      	cmp	r3, #80	; 0x50
 80043ee:	d033      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xe4>
 80043f0:	2b60      	cmp	r3, #96	; 0x60
 80043f2:	d041      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80043f4:	e06a      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	d066      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x156>
 80043fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004400:	d017      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004402:	e063      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f000 fd76 	bl	8004f04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004426:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
      break;
 8004430:	e04c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f000 fd5f 	bl	8004f04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e039      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f000 fc1d 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2150      	movs	r1, #80	; 0x50
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd2c 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004476:	e029      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	461a      	mov	r2, r3
 8004486:	f000 fc79 	bl	8004d7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2160      	movs	r1, #96	; 0x60
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fd1c 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004496:	e019      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f000 fbfd 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fd0c 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 80044b6:	e009      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fd03 	bl	8004ece <TIM_ITRx_SetConfig>
        break;
 80044c8:	e000      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80044ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a40      	ldr	r2, [pc, #256]	; (80045fc <TIM_Base_SetConfig+0x114>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d00f      	beq.n	8004528 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3d      	ldr	r2, [pc, #244]	; (8004600 <TIM_Base_SetConfig+0x118>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3c      	ldr	r2, [pc, #240]	; (8004604 <TIM_Base_SetConfig+0x11c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3b      	ldr	r2, [pc, #236]	; (8004608 <TIM_Base_SetConfig+0x120>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3a      	ldr	r2, [pc, #232]	; (800460c <TIM_Base_SetConfig+0x124>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d108      	bne.n	800453a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <TIM_Base_SetConfig+0x114>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d01b      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <TIM_Base_SetConfig+0x118>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d017      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <TIM_Base_SetConfig+0x11c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <TIM_Base_SetConfig+0x120>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a29      	ldr	r2, [pc, #164]	; (800460c <TIM_Base_SetConfig+0x124>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a28      	ldr	r2, [pc, #160]	; (8004610 <TIM_Base_SetConfig+0x128>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a27      	ldr	r2, [pc, #156]	; (8004614 <TIM_Base_SetConfig+0x12c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a26      	ldr	r2, [pc, #152]	; (8004618 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d108      	bne.n	8004594 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <TIM_Base_SetConfig+0x114>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0xf8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <TIM_Base_SetConfig+0x128>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0xf8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <TIM_Base_SetConfig+0x12c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0xf8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <TIM_Base_SetConfig+0x130>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <TIM_OC1_SetConfig+0x10c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00f      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <TIM_OC1_SetConfig+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <TIM_OC1_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a29      	ldr	r2, [pc, #164]	; (8004734 <TIM_OC1_SetConfig+0x118>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a28      	ldr	r2, [pc, #160]	; (8004738 <TIM_OC1_SetConfig+0x11c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <TIM_OC1_SetConfig+0x10c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <TIM_OC1_SetConfig+0x110>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <TIM_OC1_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a18      	ldr	r2, [pc, #96]	; (8004734 <TIM_OC1_SetConfig+0x118>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <TIM_OC1_SetConfig+0x11c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800

0800473c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0210 	bic.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0320 	bic.w	r3, r3, #32
 800478a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a28      	ldr	r2, [pc, #160]	; (800483c <TIM_OC2_SetConfig+0x100>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC2_SetConfig+0x6c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a27      	ldr	r2, [pc, #156]	; (8004840 <TIM_OC2_SetConfig+0x104>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	; (800483c <TIM_OC2_SetConfig+0x100>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00f      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <TIM_OC2_SetConfig+0x104>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <TIM_OC2_SetConfig+0x108>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <TIM_OC2_SetConfig+0x10c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <TIM_OC2_SetConfig+0x110>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d113      	bne.n	8004814 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a27      	ldr	r2, [pc, #156]	; (800494c <TIM_OC3_SetConfig+0xfc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_OC3_SetConfig+0x6a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <TIM_OC3_SetConfig+0x100>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10d      	bne.n	80048d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <TIM_OC3_SetConfig+0xfc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <TIM_OC3_SetConfig+0x100>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <TIM_OC3_SetConfig+0x104>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <TIM_OC3_SetConfig+0x108>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <TIM_OC3_SetConfig+0x10c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d113      	bne.n	8004926 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40013400 	.word	0x40013400
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <TIM_OC4_SetConfig+0xc0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00f      	beq.n	80049e4 <TIM_OC4_SetConfig+0x84>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <TIM_OC4_SetConfig+0xc4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_OC4_SetConfig+0x84>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <TIM_OC4_SetConfig+0xc8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_OC4_SetConfig+0x84>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <TIM_OC4_SetConfig+0xcc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC4_SetConfig+0x84>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <TIM_OC4_SetConfig+0xd0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d109      	bne.n	80049f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40013400 	.word	0x40013400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800

08004a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <TIM_OC5_SetConfig+0xb4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_OC5_SetConfig+0x7a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <TIM_OC5_SetConfig+0xb8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_OC5_SetConfig+0x7a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <TIM_OC5_SetConfig+0xbc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_OC5_SetConfig+0x7a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <TIM_OC5_SetConfig+0xc0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_OC5_SetConfig+0x7a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <TIM_OC5_SetConfig+0xc4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d109      	bne.n	8004ac2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800

08004afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	051b      	lsls	r3, r3, #20
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <TIM_OC6_SetConfig+0xb8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_OC6_SetConfig+0x7c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <TIM_OC6_SetConfig+0xbc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_OC6_SetConfig+0x7c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC6_SetConfig+0xc0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC6_SetConfig+0x7c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC6_SetConfig+0xc4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC6_SetConfig+0x7c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <TIM_OC6_SetConfig+0xc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d109      	bne.n	8004b8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <TIM_TI1_SetConfig+0xc4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d017      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d013      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <TIM_TI1_SetConfig+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <TIM_TI1_SetConfig+0xcc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_TI1_SetConfig+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <TIM_TI1_SetConfig+0xd4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_TI1_SetConfig+0x5e>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <TIM_TI1_SetConfig+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <TIM_TI1_SetConfig+0x62>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <TIM_TI1_SetConfig+0x64>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e003      	b.n	8004c4a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 030a 	and.w	r3, r3, #10
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0210 	bic.w	r2, r3, #16
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	031b      	lsls	r3, r3, #12
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0210 	bic.w	r2, r3, #16
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	031b      	lsls	r3, r3, #12
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 0303 	bic.w	r3, r3, #3
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	031b      	lsls	r3, r3, #12
 8004eac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f043 0307 	orr.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e068      	b.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2e      	ldr	r2, [pc, #184]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d108      	bne.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d018      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10c      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40014000 	.word	0x40014000

08005054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800506c:	2302      	movs	r3, #2
 800506e:	e065      	b.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a16      	ldr	r2, [pc, #88]	; (8005148 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d115      	bne.n	800512a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	051b      	lsls	r3, r3, #20
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fa20 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8c0 	bl	8005314 <UART_SetConfig>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e022      	b.n	80051e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb3e 	bl	8005828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fbc5 	bl	800596c <UART_CheckIdleState>
 80051e2:	4603      	mov	r3, r0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005200:	2b20      	cmp	r3, #32
 8005202:	f040 8081 	bne.w	8005308 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_UART_Transmit+0x26>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e079      	b.n	800530a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UART_Transmit+0x38>
 8005220:	2302      	movs	r3, #2
 8005222:	e072      	b.n	800530a <HAL_UART_Transmit+0x11e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2221      	movs	r2, #33	; 0x21
 8005236:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005238:	f7fc fa9a 	bl	8001770 <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	d108      	bne.n	800526a <HAL_UART_Transmit+0x7e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e003      	b.n	8005272 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800527a:	e02d      	b.n	80052d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2200      	movs	r2, #0
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fbb5 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e039      	b.n	800530a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	881a      	ldrh	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a8:	b292      	uxth	r2, r2
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	3302      	adds	r3, #2
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	e008      	b.n	80052c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	781a      	ldrb	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b292      	uxth	r2, r2
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1cb      	bne.n	800527c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fb81 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e005      	b.n	800530a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4313      	orrs	r3, r2
 8005338:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4bac      	ldr	r3, [pc, #688]	; (80055f4 <UART_SetConfig+0x2e0>)
 8005342:	4013      	ands	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	69f9      	ldr	r1, [r7, #28]
 800534a:	430b      	orrs	r3, r1
 800534c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4aa2      	ldr	r2, [pc, #648]	; (80055f8 <UART_SetConfig+0x2e4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	4313      	orrs	r3, r2
 800537c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a99      	ldr	r2, [pc, #612]	; (80055fc <UART_SetConfig+0x2e8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d121      	bne.n	80053e0 <UART_SetConfig+0xcc>
 800539c:	4b98      	ldr	r3, [pc, #608]	; (8005600 <UART_SetConfig+0x2ec>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d816      	bhi.n	80053d8 <UART_SetConfig+0xc4>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x9c>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053c7 	.word	0x080053c7
 80053bc:	080053d3 	.word	0x080053d3
 80053c0:	2301      	movs	r3, #1
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	e0e8      	b.n	8005598 <UART_SetConfig+0x284>
 80053c6:	2302      	movs	r3, #2
 80053c8:	76fb      	strb	r3, [r7, #27]
 80053ca:	e0e5      	b.n	8005598 <UART_SetConfig+0x284>
 80053cc:	2304      	movs	r3, #4
 80053ce:	76fb      	strb	r3, [r7, #27]
 80053d0:	e0e2      	b.n	8005598 <UART_SetConfig+0x284>
 80053d2:	2308      	movs	r3, #8
 80053d4:	76fb      	strb	r3, [r7, #27]
 80053d6:	e0df      	b.n	8005598 <UART_SetConfig+0x284>
 80053d8:	2310      	movs	r3, #16
 80053da:	76fb      	strb	r3, [r7, #27]
 80053dc:	bf00      	nop
 80053de:	e0db      	b.n	8005598 <UART_SetConfig+0x284>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a87      	ldr	r2, [pc, #540]	; (8005604 <UART_SetConfig+0x2f0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d134      	bne.n	8005454 <UART_SetConfig+0x140>
 80053ea:	4b85      	ldr	r3, [pc, #532]	; (8005600 <UART_SetConfig+0x2ec>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b0c      	cmp	r3, #12
 80053f6:	d829      	bhi.n	800544c <UART_SetConfig+0x138>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0xec>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005435 	.word	0x08005435
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	08005441 	.word	0x08005441
 8005414:	0800544d 	.word	0x0800544d
 8005418:	0800544d 	.word	0x0800544d
 800541c:	0800544d 	.word	0x0800544d
 8005420:	0800543b 	.word	0x0800543b
 8005424:	0800544d 	.word	0x0800544d
 8005428:	0800544d 	.word	0x0800544d
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005447 	.word	0x08005447
 8005434:	2300      	movs	r3, #0
 8005436:	76fb      	strb	r3, [r7, #27]
 8005438:	e0ae      	b.n	8005598 <UART_SetConfig+0x284>
 800543a:	2302      	movs	r3, #2
 800543c:	76fb      	strb	r3, [r7, #27]
 800543e:	e0ab      	b.n	8005598 <UART_SetConfig+0x284>
 8005440:	2304      	movs	r3, #4
 8005442:	76fb      	strb	r3, [r7, #27]
 8005444:	e0a8      	b.n	8005598 <UART_SetConfig+0x284>
 8005446:	2308      	movs	r3, #8
 8005448:	76fb      	strb	r3, [r7, #27]
 800544a:	e0a5      	b.n	8005598 <UART_SetConfig+0x284>
 800544c:	2310      	movs	r3, #16
 800544e:	76fb      	strb	r3, [r7, #27]
 8005450:	bf00      	nop
 8005452:	e0a1      	b.n	8005598 <UART_SetConfig+0x284>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6b      	ldr	r2, [pc, #428]	; (8005608 <UART_SetConfig+0x2f4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d120      	bne.n	80054a0 <UART_SetConfig+0x18c>
 800545e:	4b68      	ldr	r3, [pc, #416]	; (8005600 <UART_SetConfig+0x2ec>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005468:	2b10      	cmp	r3, #16
 800546a:	d00f      	beq.n	800548c <UART_SetConfig+0x178>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d802      	bhi.n	8005476 <UART_SetConfig+0x162>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <UART_SetConfig+0x16c>
 8005474:	e010      	b.n	8005498 <UART_SetConfig+0x184>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d005      	beq.n	8005486 <UART_SetConfig+0x172>
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d009      	beq.n	8005492 <UART_SetConfig+0x17e>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x184>
 8005480:	2300      	movs	r3, #0
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e088      	b.n	8005598 <UART_SetConfig+0x284>
 8005486:	2302      	movs	r3, #2
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e085      	b.n	8005598 <UART_SetConfig+0x284>
 800548c:	2304      	movs	r3, #4
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e082      	b.n	8005598 <UART_SetConfig+0x284>
 8005492:	2308      	movs	r3, #8
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e07f      	b.n	8005598 <UART_SetConfig+0x284>
 8005498:	2310      	movs	r3, #16
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	bf00      	nop
 800549e:	e07b      	b.n	8005598 <UART_SetConfig+0x284>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a59      	ldr	r2, [pc, #356]	; (800560c <UART_SetConfig+0x2f8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d120      	bne.n	80054ec <UART_SetConfig+0x1d8>
 80054aa:	4b55      	ldr	r3, [pc, #340]	; (8005600 <UART_SetConfig+0x2ec>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d00f      	beq.n	80054d8 <UART_SetConfig+0x1c4>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d802      	bhi.n	80054c2 <UART_SetConfig+0x1ae>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <UART_SetConfig+0x1b8>
 80054c0:	e010      	b.n	80054e4 <UART_SetConfig+0x1d0>
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d005      	beq.n	80054d2 <UART_SetConfig+0x1be>
 80054c6:	2bc0      	cmp	r3, #192	; 0xc0
 80054c8:	d009      	beq.n	80054de <UART_SetConfig+0x1ca>
 80054ca:	e00b      	b.n	80054e4 <UART_SetConfig+0x1d0>
 80054cc:	2300      	movs	r3, #0
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	e062      	b.n	8005598 <UART_SetConfig+0x284>
 80054d2:	2302      	movs	r3, #2
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e05f      	b.n	8005598 <UART_SetConfig+0x284>
 80054d8:	2304      	movs	r3, #4
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e05c      	b.n	8005598 <UART_SetConfig+0x284>
 80054de:	2308      	movs	r3, #8
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e059      	b.n	8005598 <UART_SetConfig+0x284>
 80054e4:	2310      	movs	r3, #16
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	bf00      	nop
 80054ea:	e055      	b.n	8005598 <UART_SetConfig+0x284>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a47      	ldr	r2, [pc, #284]	; (8005610 <UART_SetConfig+0x2fc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d124      	bne.n	8005540 <UART_SetConfig+0x22c>
 80054f6:	4b42      	ldr	r3, [pc, #264]	; (8005600 <UART_SetConfig+0x2ec>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005504:	d012      	beq.n	800552c <UART_SetConfig+0x218>
 8005506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550a:	d802      	bhi.n	8005512 <UART_SetConfig+0x1fe>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <UART_SetConfig+0x20c>
 8005510:	e012      	b.n	8005538 <UART_SetConfig+0x224>
 8005512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005516:	d006      	beq.n	8005526 <UART_SetConfig+0x212>
 8005518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0x21e>
 800551e:	e00b      	b.n	8005538 <UART_SetConfig+0x224>
 8005520:	2300      	movs	r3, #0
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	e038      	b.n	8005598 <UART_SetConfig+0x284>
 8005526:	2302      	movs	r3, #2
 8005528:	76fb      	strb	r3, [r7, #27]
 800552a:	e035      	b.n	8005598 <UART_SetConfig+0x284>
 800552c:	2304      	movs	r3, #4
 800552e:	76fb      	strb	r3, [r7, #27]
 8005530:	e032      	b.n	8005598 <UART_SetConfig+0x284>
 8005532:	2308      	movs	r3, #8
 8005534:	76fb      	strb	r3, [r7, #27]
 8005536:	e02f      	b.n	8005598 <UART_SetConfig+0x284>
 8005538:	2310      	movs	r3, #16
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	bf00      	nop
 800553e:	e02b      	b.n	8005598 <UART_SetConfig+0x284>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <UART_SetConfig+0x2e4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d124      	bne.n	8005594 <UART_SetConfig+0x280>
 800554a:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <UART_SetConfig+0x2ec>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d012      	beq.n	8005580 <UART_SetConfig+0x26c>
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d802      	bhi.n	8005566 <UART_SetConfig+0x252>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <UART_SetConfig+0x260>
 8005564:	e012      	b.n	800558c <UART_SetConfig+0x278>
 8005566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556a:	d006      	beq.n	800557a <UART_SetConfig+0x266>
 800556c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005570:	d009      	beq.n	8005586 <UART_SetConfig+0x272>
 8005572:	e00b      	b.n	800558c <UART_SetConfig+0x278>
 8005574:	2300      	movs	r3, #0
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e00e      	b.n	8005598 <UART_SetConfig+0x284>
 800557a:	2302      	movs	r3, #2
 800557c:	76fb      	strb	r3, [r7, #27]
 800557e:	e00b      	b.n	8005598 <UART_SetConfig+0x284>
 8005580:	2304      	movs	r3, #4
 8005582:	76fb      	strb	r3, [r7, #27]
 8005584:	e008      	b.n	8005598 <UART_SetConfig+0x284>
 8005586:	2308      	movs	r3, #8
 8005588:	76fb      	strb	r3, [r7, #27]
 800558a:	e005      	b.n	8005598 <UART_SetConfig+0x284>
 800558c:	2310      	movs	r3, #16
 800558e:	76fb      	strb	r3, [r7, #27]
 8005590:	bf00      	nop
 8005592:	e001      	b.n	8005598 <UART_SetConfig+0x284>
 8005594:	2310      	movs	r3, #16
 8005596:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <UART_SetConfig+0x2e4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f040 8087 	bne.w	80056b2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a4:	7efb      	ldrb	r3, [r7, #27]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d836      	bhi.n	8005618 <UART_SetConfig+0x304>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x29c>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	08005619 	.word	0x08005619
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	08005619 	.word	0x08005619
 80055c0:	080055e3 	.word	0x080055e3
 80055c4:	08005619 	.word	0x08005619
 80055c8:	08005619 	.word	0x08005619
 80055cc:	08005619 	.word	0x08005619
 80055d0:	080055eb 	.word	0x080055eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fd fed4 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80055d8:	6178      	str	r0, [r7, #20]
        break;
 80055da:	e022      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <UART_SetConfig+0x300>)
 80055de:	617b      	str	r3, [r7, #20]
        break;
 80055e0:	e01f      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fd fe37 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80055e6:	6178      	str	r0, [r7, #20]
        break;
 80055e8:	e01b      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	617b      	str	r3, [r7, #20]
        break;
 80055f0:	e017      	b.n	8005622 <UART_SetConfig+0x30e>
 80055f2:	bf00      	nop
 80055f4:	efff69f3 	.word	0xefff69f3
 80055f8:	40008000 	.word	0x40008000
 80055fc:	40013800 	.word	0x40013800
 8005600:	40021000 	.word	0x40021000
 8005604:	40004400 	.word	0x40004400
 8005608:	40004800 	.word	0x40004800
 800560c:	40004c00 	.word	0x40004c00
 8005610:	40005000 	.word	0x40005000
 8005614:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	76bb      	strb	r3, [r7, #26]
        break;
 8005620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80f1 	beq.w	800580c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	429a      	cmp	r2, r3
 8005638:	d305      	bcc.n	8005646 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	429a      	cmp	r2, r3
 8005644:	d902      	bls.n	800564c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	76bb      	strb	r3, [r7, #26]
 800564a:	e0df      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4619      	mov	r1, r3
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	f04f 0400 	mov.w	r4, #0
 800565c:	0214      	lsls	r4, r2, #8
 800565e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005662:	020b      	lsls	r3, r1, #8
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6852      	ldr	r2, [r2, #4]
 8005668:	0852      	lsrs	r2, r2, #1
 800566a:	4611      	mov	r1, r2
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	eb13 0b01 	adds.w	fp, r3, r1
 8005674:	eb44 0c02 	adc.w	ip, r4, r2
 8005678:	4658      	mov	r0, fp
 800567a:	4661      	mov	r1, ip
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f04f 0400 	mov.w	r4, #0
 8005684:	461a      	mov	r2, r3
 8005686:	4623      	mov	r3, r4
 8005688:	f7fa fdf2 	bl	8000270 <__aeabi_uldivmod>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005698:	d308      	bcc.n	80056ac <UART_SetConfig+0x398>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a0:	d204      	bcs.n	80056ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e0af      	b.n	800580c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	76bb      	strb	r3, [r7, #26]
 80056b0:	e0ac      	b.n	800580c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ba:	d15b      	bne.n	8005774 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d827      	bhi.n	8005712 <UART_SetConfig+0x3fe>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x3b4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	08005713 	.word	0x08005713
 80056d8:	08005703 	.word	0x08005703
 80056dc:	08005713 	.word	0x08005713
 80056e0:	08005713 	.word	0x08005713
 80056e4:	08005713 	.word	0x08005713
 80056e8:	0800570b 	.word	0x0800570b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fd fe48 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80056f0:	6178      	str	r0, [r7, #20]
        break;
 80056f2:	e013      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f4:	f7fd fe5a 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 80056f8:	6178      	str	r0, [r7, #20]
        break;
 80056fa:	e00f      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <UART_SetConfig+0x510>)
 80056fe:	617b      	str	r3, [r7, #20]
        break;
 8005700:	e00c      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005702:	f7fd fda7 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8005706:	6178      	str	r0, [r7, #20]
        break;
 8005708:	e008      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570e:	617b      	str	r3, [r7, #20]
        break;
 8005710:	e004      	b.n	800571c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	76bb      	strb	r3, [r7, #26]
        break;
 800571a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d074      	beq.n	800580c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	005a      	lsls	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d916      	bls.n	800576e <UART_SetConfig+0x45a>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005746:	d212      	bcs.n	800576e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f023 030f 	bic.w	r3, r3, #15
 8005750:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	b29b      	uxth	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	b29a      	uxth	r2, r3
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	4313      	orrs	r3, r2
 8005762:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	89fa      	ldrh	r2, [r7, #14]
 800576a:	60da      	str	r2, [r3, #12]
 800576c:	e04e      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	76bb      	strb	r3, [r7, #26]
 8005772:	e04b      	b.n	800580c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005774:	7efb      	ldrb	r3, [r7, #27]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d827      	bhi.n	80057ca <UART_SetConfig+0x4b6>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x46c>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057cb 	.word	0x080057cb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057cb 	.word	0x080057cb
 8005798:	080057cb 	.word	0x080057cb
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fd fdec 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80057a8:	6178      	str	r0, [r7, #20]
        break;
 80057aa:	e013      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fd fdfe 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 80057b0:	6178      	str	r0, [r7, #20]
        break;
 80057b2:	e00f      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <UART_SetConfig+0x510>)
 80057b6:	617b      	str	r3, [r7, #20]
        break;
 80057b8:	e00c      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fd fd4b 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80057be:	6178      	str	r0, [r7, #20]
        break;
 80057c0:	e008      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	617b      	str	r3, [r7, #20]
        break;
 80057c8:	e004      	b.n	80057d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	76bb      	strb	r3, [r7, #26]
        break;
 80057d2:	bf00      	nop
    }

    if (pclk != 0U)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085a      	lsrs	r2, r3, #1
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d908      	bls.n	8005808 <UART_SetConfig+0x4f4>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d204      	bcs.n	8005808 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	e001      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005818:	7ebb      	ldrb	r3, [r7, #26]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005824:	00f42400 	.word	0x00f42400

08005828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01a      	beq.n	800593e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d10a      	bne.n	800593e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800597a:	f7fb fef9 	bl	8001770 <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d10e      	bne.n	80059ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f82a 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e020      	b.n	80059ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d10e      	bne.n	80059d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f814 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e00a      	b.n	80059ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a06:	e05d      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a0e:	d059      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fb feae 	bl	8001770 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d11b      	bne.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e042      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02b      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7a:	d123      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e00f      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d092      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000000c 	.word	0x2000000c

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4e0d      	ldr	r6, [pc, #52]	; (8005b30 <__libc_init_array+0x38>)
 8005afc:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005afe:	1ba4      	subs	r4, r4, r6
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	2500      	movs	r5, #0
 8005b04:	42a5      	cmp	r5, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	4e0b      	ldr	r6, [pc, #44]	; (8005b38 <__libc_init_array+0x40>)
 8005b0a:	4c0c      	ldr	r4, [pc, #48]	; (8005b3c <__libc_init_array+0x44>)
 8005b0c:	f000 ff04 	bl	8006918 <_init>
 8005b10:	1ba4      	subs	r4, r4, r6
 8005b12:	10a4      	asrs	r4, r4, #2
 8005b14:	2500      	movs	r5, #0
 8005b16:	42a5      	cmp	r5, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b20:	4798      	blx	r3
 8005b22:	3501      	adds	r5, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b2a:	4798      	blx	r3
 8005b2c:	3501      	adds	r5, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	08006a40 	.word	0x08006a40
 8005b34:	08006a40 	.word	0x08006a40
 8005b38:	08006a40 	.word	0x08006a40
 8005b3c:	08006a44 	.word	0x08006a44

08005b40 <memset>:
 8005b40:	4402      	add	r2, r0
 8005b42:	4603      	mov	r3, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <iprintf>:
 8005b50:	b40f      	push	{r0, r1, r2, r3}
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <iprintf+0x2c>)
 8005b54:	b513      	push	{r0, r1, r4, lr}
 8005b56:	681c      	ldr	r4, [r3, #0]
 8005b58:	b124      	cbz	r4, 8005b64 <iprintf+0x14>
 8005b5a:	69a3      	ldr	r3, [r4, #24]
 8005b5c:	b913      	cbnz	r3, 8005b64 <iprintf+0x14>
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 f84e 	bl	8005c00 <__sinit>
 8005b64:	ab05      	add	r3, sp, #20
 8005b66:	9a04      	ldr	r2, [sp, #16]
 8005b68:	68a1      	ldr	r1, [r4, #8]
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 f955 	bl	8005e1c <_vfiprintf_r>
 8005b72:	b002      	add	sp, #8
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	b004      	add	sp, #16
 8005b7a:	4770      	bx	lr
 8005b7c:	2000000c 	.word	0x2000000c

08005b80 <std>:
 8005b80:	2300      	movs	r3, #0
 8005b82:	b510      	push	{r4, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8a:	6083      	str	r3, [r0, #8]
 8005b8c:	8181      	strh	r1, [r0, #12]
 8005b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b90:	81c2      	strh	r2, [r0, #14]
 8005b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b96:	6183      	str	r3, [r0, #24]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	305c      	adds	r0, #92	; 0x5c
 8005b9e:	f7ff ffcf 	bl	8005b40 <memset>
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <std+0x38>)
 8005ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x3c>)
 8005ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <std+0x40>)
 8005bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <std+0x44>)
 8005bb0:	6224      	str	r4, [r4, #32]
 8005bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08006379 	.word	0x08006379
 8005bbc:	0800639b 	.word	0x0800639b
 8005bc0:	080063d3 	.word	0x080063d3
 8005bc4:	080063f7 	.word	0x080063f7

08005bc8 <_cleanup_r>:
 8005bc8:	4901      	ldr	r1, [pc, #4]	; (8005bd0 <_cleanup_r+0x8>)
 8005bca:	f000 b885 	b.w	8005cd8 <_fwalk_reent>
 8005bce:	bf00      	nop
 8005bd0:	080066d1 	.word	0x080066d1

08005bd4 <__sfmoreglue>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	1e4a      	subs	r2, r1, #1
 8005bd8:	2568      	movs	r5, #104	; 0x68
 8005bda:	4355      	muls	r5, r2
 8005bdc:	460e      	mov	r6, r1
 8005bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005be2:	f000 f897 	bl	8005d14 <_malloc_r>
 8005be6:	4604      	mov	r4, r0
 8005be8:	b140      	cbz	r0, 8005bfc <__sfmoreglue+0x28>
 8005bea:	2100      	movs	r1, #0
 8005bec:	e9c0 1600 	strd	r1, r6, [r0]
 8005bf0:	300c      	adds	r0, #12
 8005bf2:	60a0      	str	r0, [r4, #8]
 8005bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bf8:	f7ff ffa2 	bl	8005b40 <memset>
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}

08005c00 <__sinit>:
 8005c00:	6983      	ldr	r3, [r0, #24]
 8005c02:	b510      	push	{r4, lr}
 8005c04:	4604      	mov	r4, r0
 8005c06:	bb33      	cbnz	r3, 8005c56 <__sinit+0x56>
 8005c08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c0c:	6503      	str	r3, [r0, #80]	; 0x50
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <__sinit+0x58>)
 8005c10:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <__sinit+0x5c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6282      	str	r2, [r0, #40]	; 0x28
 8005c16:	4298      	cmp	r0, r3
 8005c18:	bf04      	itt	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	6183      	streq	r3, [r0, #24]
 8005c1e:	f000 f81f 	bl	8005c60 <__sfp>
 8005c22:	6060      	str	r0, [r4, #4]
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 f81b 	bl	8005c60 <__sfp>
 8005c2a:	60a0      	str	r0, [r4, #8]
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 f817 	bl	8005c60 <__sfp>
 8005c32:	2200      	movs	r2, #0
 8005c34:	60e0      	str	r0, [r4, #12]
 8005c36:	2104      	movs	r1, #4
 8005c38:	6860      	ldr	r0, [r4, #4]
 8005c3a:	f7ff ffa1 	bl	8005b80 <std>
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2109      	movs	r1, #9
 8005c42:	68a0      	ldr	r0, [r4, #8]
 8005c44:	f7ff ff9c 	bl	8005b80 <std>
 8005c48:	2202      	movs	r2, #2
 8005c4a:	2112      	movs	r1, #18
 8005c4c:	68e0      	ldr	r0, [r4, #12]
 8005c4e:	f7ff ff97 	bl	8005b80 <std>
 8005c52:	2301      	movs	r3, #1
 8005c54:	61a3      	str	r3, [r4, #24]
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	080069a0 	.word	0x080069a0
 8005c5c:	08005bc9 	.word	0x08005bc9

08005c60 <__sfp>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <__sfp+0x70>)
 8005c64:	681e      	ldr	r6, [r3, #0]
 8005c66:	69b3      	ldr	r3, [r6, #24]
 8005c68:	4607      	mov	r7, r0
 8005c6a:	b913      	cbnz	r3, 8005c72 <__sfp+0x12>
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff ffc7 	bl	8005c00 <__sinit>
 8005c72:	3648      	adds	r6, #72	; 0x48
 8005c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	d503      	bpl.n	8005c84 <__sfp+0x24>
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	b133      	cbz	r3, 8005c8e <__sfp+0x2e>
 8005c80:	6836      	ldr	r6, [r6, #0]
 8005c82:	e7f7      	b.n	8005c74 <__sfp+0x14>
 8005c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c88:	b16d      	cbz	r5, 8005ca6 <__sfp+0x46>
 8005c8a:	3468      	adds	r4, #104	; 0x68
 8005c8c:	e7f4      	b.n	8005c78 <__sfp+0x18>
 8005c8e:	2104      	movs	r1, #4
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ff9f 	bl	8005bd4 <__sfmoreglue>
 8005c96:	6030      	str	r0, [r6, #0]
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1f1      	bne.n	8005c80 <__sfp+0x20>
 8005c9c:	230c      	movs	r3, #12
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <__sfp+0x74>)
 8005ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8005caa:	e9c4 5500 	strd	r5, r5, [r4]
 8005cae:	60a5      	str	r5, [r4, #8]
 8005cb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cc0:	f7ff ff3e 	bl	8005b40 <memset>
 8005cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ccc:	e7e9      	b.n	8005ca2 <__sfp+0x42>
 8005cce:	bf00      	nop
 8005cd0:	080069a0 	.word	0x080069a0
 8005cd4:	ffff0001 	.word	0xffff0001

08005cd8 <_fwalk_reent>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	4680      	mov	r8, r0
 8005cde:	4689      	mov	r9, r1
 8005ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	b914      	cbnz	r4, 8005cee <_fwalk_reent+0x16>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005cf2:	3f01      	subs	r7, #1
 8005cf4:	d501      	bpl.n	8005cfa <_fwalk_reent+0x22>
 8005cf6:	6824      	ldr	r4, [r4, #0]
 8005cf8:	e7f5      	b.n	8005ce6 <_fwalk_reent+0xe>
 8005cfa:	89ab      	ldrh	r3, [r5, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d907      	bls.n	8005d10 <_fwalk_reent+0x38>
 8005d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d04:	3301      	adds	r3, #1
 8005d06:	d003      	beq.n	8005d10 <_fwalk_reent+0x38>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	47c8      	blx	r9
 8005d0e:	4306      	orrs	r6, r0
 8005d10:	3568      	adds	r5, #104	; 0x68
 8005d12:	e7ee      	b.n	8005cf2 <_fwalk_reent+0x1a>

08005d14 <_malloc_r>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	1ccd      	adds	r5, r1, #3
 8005d18:	f025 0503 	bic.w	r5, r5, #3
 8005d1c:	3508      	adds	r5, #8
 8005d1e:	2d0c      	cmp	r5, #12
 8005d20:	bf38      	it	cc
 8005d22:	250c      	movcc	r5, #12
 8005d24:	2d00      	cmp	r5, #0
 8005d26:	4606      	mov	r6, r0
 8005d28:	db01      	blt.n	8005d2e <_malloc_r+0x1a>
 8005d2a:	42a9      	cmp	r1, r5
 8005d2c:	d903      	bls.n	8005d36 <_malloc_r+0x22>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	2000      	movs	r0, #0
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	f000 fd6b 	bl	8006810 <__malloc_lock>
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <_malloc_r+0xac>)
 8005d3c:	6814      	ldr	r4, [r2, #0]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	b991      	cbnz	r1, 8005d68 <_malloc_r+0x54>
 8005d42:	4c20      	ldr	r4, [pc, #128]	; (8005dc4 <_malloc_r+0xb0>)
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	b91b      	cbnz	r3, 8005d50 <_malloc_r+0x3c>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fb05 	bl	8006358 <_sbrk_r>
 8005d4e:	6020      	str	r0, [r4, #0]
 8005d50:	4629      	mov	r1, r5
 8005d52:	4630      	mov	r0, r6
 8005d54:	f000 fb00 	bl	8006358 <_sbrk_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d124      	bne.n	8005da6 <_malloc_r+0x92>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	6033      	str	r3, [r6, #0]
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 fd56 	bl	8006812 <__malloc_unlock>
 8005d66:	e7e4      	b.n	8005d32 <_malloc_r+0x1e>
 8005d68:	680b      	ldr	r3, [r1, #0]
 8005d6a:	1b5b      	subs	r3, r3, r5
 8005d6c:	d418      	bmi.n	8005da0 <_malloc_r+0x8c>
 8005d6e:	2b0b      	cmp	r3, #11
 8005d70:	d90f      	bls.n	8005d92 <_malloc_r+0x7e>
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	50cd      	str	r5, [r1, r3]
 8005d76:	18cc      	adds	r4, r1, r3
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 fd4a 	bl	8006812 <__malloc_unlock>
 8005d7e:	f104 000b 	add.w	r0, r4, #11
 8005d82:	1d23      	adds	r3, r4, #4
 8005d84:	f020 0007 	bic.w	r0, r0, #7
 8005d88:	1ac3      	subs	r3, r0, r3
 8005d8a:	d0d3      	beq.n	8005d34 <_malloc_r+0x20>
 8005d8c:	425a      	negs	r2, r3
 8005d8e:	50e2      	str	r2, [r4, r3]
 8005d90:	e7d0      	b.n	8005d34 <_malloc_r+0x20>
 8005d92:	428c      	cmp	r4, r1
 8005d94:	684b      	ldr	r3, [r1, #4]
 8005d96:	bf16      	itet	ne
 8005d98:	6063      	strne	r3, [r4, #4]
 8005d9a:	6013      	streq	r3, [r2, #0]
 8005d9c:	460c      	movne	r4, r1
 8005d9e:	e7eb      	b.n	8005d78 <_malloc_r+0x64>
 8005da0:	460c      	mov	r4, r1
 8005da2:	6849      	ldr	r1, [r1, #4]
 8005da4:	e7cc      	b.n	8005d40 <_malloc_r+0x2c>
 8005da6:	1cc4      	adds	r4, r0, #3
 8005da8:	f024 0403 	bic.w	r4, r4, #3
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d005      	beq.n	8005dbc <_malloc_r+0xa8>
 8005db0:	1a21      	subs	r1, r4, r0
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fad0 	bl	8006358 <_sbrk_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0cf      	beq.n	8005d5c <_malloc_r+0x48>
 8005dbc:	6025      	str	r5, [r4, #0]
 8005dbe:	e7db      	b.n	8005d78 <_malloc_r+0x64>
 8005dc0:	20000090 	.word	0x20000090
 8005dc4:	20000094 	.word	0x20000094

08005dc8 <__sfputc_r>:
 8005dc8:	6893      	ldr	r3, [r2, #8]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	b410      	push	{r4}
 8005dd0:	6093      	str	r3, [r2, #8]
 8005dd2:	da08      	bge.n	8005de6 <__sfputc_r+0x1e>
 8005dd4:	6994      	ldr	r4, [r2, #24]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	db01      	blt.n	8005dde <__sfputc_r+0x16>
 8005dda:	290a      	cmp	r1, #10
 8005ddc:	d103      	bne.n	8005de6 <__sfputc_r+0x1e>
 8005dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de2:	f000 bb0d 	b.w	8006400 <__swbuf_r>
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	1c58      	adds	r0, r3, #1
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	7019      	strb	r1, [r3, #0]
 8005dee:	4608      	mov	r0, r1
 8005df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <__sfputs_r>:
 8005df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	18d5      	adds	r5, r2, r3
 8005e00:	42ac      	cmp	r4, r5
 8005e02:	d101      	bne.n	8005e08 <__sfputs_r+0x12>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e007      	b.n	8005e18 <__sfputs_r+0x22>
 8005e08:	463a      	mov	r2, r7
 8005e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ffda 	bl	8005dc8 <__sfputc_r>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d1f3      	bne.n	8005e00 <__sfputs_r+0xa>
 8005e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e1c <_vfiprintf_r>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	460c      	mov	r4, r1
 8005e22:	b09d      	sub	sp, #116	; 0x74
 8005e24:	4617      	mov	r7, r2
 8005e26:	461d      	mov	r5, r3
 8005e28:	4606      	mov	r6, r0
 8005e2a:	b118      	cbz	r0, 8005e34 <_vfiprintf_r+0x18>
 8005e2c:	6983      	ldr	r3, [r0, #24]
 8005e2e:	b90b      	cbnz	r3, 8005e34 <_vfiprintf_r+0x18>
 8005e30:	f7ff fee6 	bl	8005c00 <__sinit>
 8005e34:	4b7c      	ldr	r3, [pc, #496]	; (8006028 <_vfiprintf_r+0x20c>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d158      	bne.n	8005eec <_vfiprintf_r+0xd0>
 8005e3a:	6874      	ldr	r4, [r6, #4]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	0718      	lsls	r0, r3, #28
 8005e40:	d55e      	bpl.n	8005f00 <_vfiprintf_r+0xe4>
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05b      	beq.n	8005f00 <_vfiprintf_r+0xe4>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e52:	2330      	movs	r3, #48	; 0x30
 8005e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e58:	9503      	str	r5, [sp, #12]
 8005e5a:	f04f 0b01 	mov.w	fp, #1
 8005e5e:	46b8      	mov	r8, r7
 8005e60:	4645      	mov	r5, r8
 8005e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e66:	b10b      	cbz	r3, 8005e6c <_vfiprintf_r+0x50>
 8005e68:	2b25      	cmp	r3, #37	; 0x25
 8005e6a:	d154      	bne.n	8005f16 <_vfiprintf_r+0xfa>
 8005e6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e70:	d00b      	beq.n	8005e8a <_vfiprintf_r+0x6e>
 8005e72:	4653      	mov	r3, sl
 8005e74:	463a      	mov	r2, r7
 8005e76:	4621      	mov	r1, r4
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbc 	bl	8005df6 <__sfputs_r>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f000 80c2 	beq.w	8006008 <_vfiprintf_r+0x1ec>
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	4453      	add	r3, sl
 8005e88:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8a:	f898 3000 	ldrb.w	r3, [r8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 80ba 	beq.w	8006008 <_vfiprintf_r+0x1ec>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ea8:	46a8      	mov	r8, r5
 8005eaa:	2205      	movs	r2, #5
 8005eac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005eb0:	485e      	ldr	r0, [pc, #376]	; (800602c <_vfiprintf_r+0x210>)
 8005eb2:	f7fa f98d 	bl	80001d0 <memchr>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	bb78      	cbnz	r0, 8005f1a <_vfiprintf_r+0xfe>
 8005eba:	06d9      	lsls	r1, r3, #27
 8005ebc:	bf44      	itt	mi
 8005ebe:	2220      	movmi	r2, #32
 8005ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ec4:	071a      	lsls	r2, r3, #28
 8005ec6:	bf44      	itt	mi
 8005ec8:	222b      	movmi	r2, #43	; 0x2b
 8005eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ece:	782a      	ldrb	r2, [r5, #0]
 8005ed0:	2a2a      	cmp	r2, #42	; 0x2a
 8005ed2:	d02a      	beq.n	8005f2a <_vfiprintf_r+0x10e>
 8005ed4:	9a07      	ldr	r2, [sp, #28]
 8005ed6:	46a8      	mov	r8, r5
 8005ed8:	2000      	movs	r0, #0
 8005eda:	250a      	movs	r5, #10
 8005edc:	4641      	mov	r1, r8
 8005ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee2:	3b30      	subs	r3, #48	; 0x30
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d969      	bls.n	8005fbc <_vfiprintf_r+0x1a0>
 8005ee8:	b360      	cbz	r0, 8005f44 <_vfiprintf_r+0x128>
 8005eea:	e024      	b.n	8005f36 <_vfiprintf_r+0x11a>
 8005eec:	4b50      	ldr	r3, [pc, #320]	; (8006030 <_vfiprintf_r+0x214>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d101      	bne.n	8005ef6 <_vfiprintf_r+0xda>
 8005ef2:	68b4      	ldr	r4, [r6, #8]
 8005ef4:	e7a2      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <_vfiprintf_r+0x218>)
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	bf08      	it	eq
 8005efc:	68f4      	ldreq	r4, [r6, #12]
 8005efe:	e79d      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4630      	mov	r0, r6
 8005f04:	f000 fae0 	bl	80064c8 <__swsetup_r>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d09d      	beq.n	8005e48 <_vfiprintf_r+0x2c>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f10:	b01d      	add	sp, #116	; 0x74
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	46a8      	mov	r8, r5
 8005f18:	e7a2      	b.n	8005e60 <_vfiprintf_r+0x44>
 8005f1a:	4a44      	ldr	r2, [pc, #272]	; (800602c <_vfiprintf_r+0x210>)
 8005f1c:	1a80      	subs	r0, r0, r2
 8005f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8005f22:	4318      	orrs	r0, r3
 8005f24:	9004      	str	r0, [sp, #16]
 8005f26:	4645      	mov	r5, r8
 8005f28:	e7be      	b.n	8005ea8 <_vfiprintf_r+0x8c>
 8005f2a:	9a03      	ldr	r2, [sp, #12]
 8005f2c:	1d11      	adds	r1, r2, #4
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	db01      	blt.n	8005f3a <_vfiprintf_r+0x11e>
 8005f36:	9207      	str	r2, [sp, #28]
 8005f38:	e004      	b.n	8005f44 <_vfiprintf_r+0x128>
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	9207      	str	r2, [sp, #28]
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	f898 3000 	ldrb.w	r3, [r8]
 8005f48:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4a:	d10e      	bne.n	8005f6a <_vfiprintf_r+0x14e>
 8005f4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d138      	bne.n	8005fc6 <_vfiprintf_r+0x1aa>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9203      	str	r2, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfb8      	it	lt
 8005f60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f64:	f108 0802 	add.w	r8, r8, #2
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	4d33      	ldr	r5, [pc, #204]	; (8006038 <_vfiprintf_r+0x21c>)
 8005f6c:	f898 1000 	ldrb.w	r1, [r8]
 8005f70:	2203      	movs	r2, #3
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7fa f92c 	bl	80001d0 <memchr>
 8005f78:	b140      	cbz	r0, 8005f8c <_vfiprintf_r+0x170>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f82:	9b04      	ldr	r3, [sp, #16]
 8005f84:	4303      	orrs	r3, r0
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f898 1000 	ldrb.w	r1, [r8]
 8005f90:	482a      	ldr	r0, [pc, #168]	; (800603c <_vfiprintf_r+0x220>)
 8005f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f96:	2206      	movs	r2, #6
 8005f98:	f108 0701 	add.w	r7, r8, #1
 8005f9c:	f7fa f918 	bl	80001d0 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d037      	beq.n	8006014 <_vfiprintf_r+0x1f8>
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <_vfiprintf_r+0x224>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_vfiprintf_r+0x1d4>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	444b      	add	r3, r9
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	e750      	b.n	8005e5e <_vfiprintf_r+0x42>
 8005fbc:	fb05 3202 	mla	r2, r5, r2, r3
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	4688      	mov	r8, r1
 8005fc4:	e78a      	b.n	8005edc <_vfiprintf_r+0xc0>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f108 0801 	add.w	r8, r8, #1
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	250a      	movs	r5, #10
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	; 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_vfiprintf_r+0x1ca>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c3      	beq.n	8005f6a <_vfiprintf_r+0x14e>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c1      	b.n	8005f6a <_vfiprintf_r+0x14e>
 8005fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8005fea:	2301      	movs	r3, #1
 8005fec:	4680      	mov	r8, r0
 8005fee:	e7f0      	b.n	8005fd2 <_vfiprintf_r+0x1b6>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <_vfiprintf_r+0x228>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f3af 8000 	nop.w
 8006000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006004:	4681      	mov	r9, r0
 8006006:	d1d5      	bne.n	8005fb4 <_vfiprintf_r+0x198>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	065b      	lsls	r3, r3, #25
 800600c:	f53f af7e 	bmi.w	8005f0c <_vfiprintf_r+0xf0>
 8006010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006012:	e77d      	b.n	8005f10 <_vfiprintf_r+0xf4>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4622      	mov	r2, r4
 800601a:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <_vfiprintf_r+0x228>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4630      	mov	r0, r6
 8006020:	f000 f888 	bl	8006134 <_printf_i>
 8006024:	e7ec      	b.n	8006000 <_vfiprintf_r+0x1e4>
 8006026:	bf00      	nop
 8006028:	080069c4 	.word	0x080069c4
 800602c:	08006a04 	.word	0x08006a04
 8006030:	080069e4 	.word	0x080069e4
 8006034:	080069a4 	.word	0x080069a4
 8006038:	08006a0a 	.word	0x08006a0a
 800603c:	08006a0e 	.word	0x08006a0e
 8006040:	00000000 	.word	0x00000000
 8006044:	08005df7 	.word	0x08005df7

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4691      	mov	r9, r2
 800604e:	461f      	mov	r7, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	f8c9 3000 	str.w	r3, [r9]
 8006062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	b112      	cbz	r2, 8006072 <_printf_common+0x2a>
 800606c:	3301      	adds	r3, #1
 800606e:	f8c9 3000 	str.w	r3, [r9]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	0699      	lsls	r1, r3, #26
 8006076:	bf42      	ittt	mi
 8006078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800607c:	3302      	addmi	r3, #2
 800607e:	f8c9 3000 	strmi.w	r3, [r9]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d107      	bne.n	800609a <_printf_common+0x52>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	f8d9 2000 	ldr.w	r2, [r9]
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	42ab      	cmp	r3, r5
 8006098:	dc28      	bgt.n	80060ec <_printf_common+0xa4>
 800609a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	3300      	adds	r3, #0
 80060a2:	bf18      	it	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	0692      	lsls	r2, r2, #26
 80060a8:	d42d      	bmi.n	8006106 <_printf_common+0xbe>
 80060aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ae:	4639      	mov	r1, r7
 80060b0:	4630      	mov	r0, r6
 80060b2:	47c0      	blx	r8
 80060b4:	3001      	adds	r0, #1
 80060b6:	d020      	beq.n	80060fa <_printf_common+0xb2>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	68e5      	ldr	r5, [r4, #12]
 80060bc:	f8d9 2000 	ldr.w	r2, [r9]
 80060c0:	f003 0306 	and.w	r3, r3, #6
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	bf08      	it	eq
 80060c8:	1aad      	subeq	r5, r5, r2
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	bf0c      	ite	eq
 80060d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d4:	2500      	movne	r5, #0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfc4      	itt	gt
 80060da:	1a9b      	subgt	r3, r3, r2
 80060dc:	18ed      	addgt	r5, r5, r3
 80060de:	f04f 0900 	mov.w	r9, #0
 80060e2:	341a      	adds	r4, #26
 80060e4:	454d      	cmp	r5, r9
 80060e6:	d11a      	bne.n	800611e <_printf_common+0xd6>
 80060e8:	2000      	movs	r0, #0
 80060ea:	e008      	b.n	80060fe <_printf_common+0xb6>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4652      	mov	r2, sl
 80060f0:	4639      	mov	r1, r7
 80060f2:	4630      	mov	r0, r6
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d103      	bne.n	8006102 <_printf_common+0xba>
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	3501      	adds	r5, #1
 8006104:	e7c3      	b.n	800608e <_printf_common+0x46>
 8006106:	18e1      	adds	r1, r4, r3
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	2030      	movs	r0, #48	; 0x30
 800610c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006110:	4422      	add	r2, r4
 8006112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611a:	3302      	adds	r3, #2
 800611c:	e7c5      	b.n	80060aa <_printf_common+0x62>
 800611e:	2301      	movs	r3, #1
 8006120:	4622      	mov	r2, r4
 8006122:	4639      	mov	r1, r7
 8006124:	4630      	mov	r0, r6
 8006126:	47c0      	blx	r8
 8006128:	3001      	adds	r0, #1
 800612a:	d0e6      	beq.n	80060fa <_printf_common+0xb2>
 800612c:	f109 0901 	add.w	r9, r9, #1
 8006130:	e7d8      	b.n	80060e4 <_printf_common+0x9c>
	...

08006134 <_printf_i>:
 8006134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800613c:	460c      	mov	r4, r1
 800613e:	7e09      	ldrb	r1, [r1, #24]
 8006140:	b085      	sub	sp, #20
 8006142:	296e      	cmp	r1, #110	; 0x6e
 8006144:	4617      	mov	r7, r2
 8006146:	4606      	mov	r6, r0
 8006148:	4698      	mov	r8, r3
 800614a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614c:	f000 80b3 	beq.w	80062b6 <_printf_i+0x182>
 8006150:	d822      	bhi.n	8006198 <_printf_i+0x64>
 8006152:	2963      	cmp	r1, #99	; 0x63
 8006154:	d036      	beq.n	80061c4 <_printf_i+0x90>
 8006156:	d80a      	bhi.n	800616e <_printf_i+0x3a>
 8006158:	2900      	cmp	r1, #0
 800615a:	f000 80b9 	beq.w	80062d0 <_printf_i+0x19c>
 800615e:	2958      	cmp	r1, #88	; 0x58
 8006160:	f000 8083 	beq.w	800626a <_printf_i+0x136>
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800616c:	e032      	b.n	80061d4 <_printf_i+0xa0>
 800616e:	2964      	cmp	r1, #100	; 0x64
 8006170:	d001      	beq.n	8006176 <_printf_i+0x42>
 8006172:	2969      	cmp	r1, #105	; 0x69
 8006174:	d1f6      	bne.n	8006164 <_printf_i+0x30>
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	0605      	lsls	r5, r0, #24
 800617c:	f103 0104 	add.w	r1, r3, #4
 8006180:	d52a      	bpl.n	80061d8 <_printf_i+0xa4>
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da03      	bge.n	8006192 <_printf_i+0x5e>
 800618a:	222d      	movs	r2, #45	; 0x2d
 800618c:	425b      	negs	r3, r3
 800618e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006192:	486f      	ldr	r0, [pc, #444]	; (8006350 <_printf_i+0x21c>)
 8006194:	220a      	movs	r2, #10
 8006196:	e039      	b.n	800620c <_printf_i+0xd8>
 8006198:	2973      	cmp	r1, #115	; 0x73
 800619a:	f000 809d 	beq.w	80062d8 <_printf_i+0x1a4>
 800619e:	d808      	bhi.n	80061b2 <_printf_i+0x7e>
 80061a0:	296f      	cmp	r1, #111	; 0x6f
 80061a2:	d020      	beq.n	80061e6 <_printf_i+0xb2>
 80061a4:	2970      	cmp	r1, #112	; 0x70
 80061a6:	d1dd      	bne.n	8006164 <_printf_i+0x30>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	f043 0320 	orr.w	r3, r3, #32
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	e003      	b.n	80061ba <_printf_i+0x86>
 80061b2:	2975      	cmp	r1, #117	; 0x75
 80061b4:	d017      	beq.n	80061e6 <_printf_i+0xb2>
 80061b6:	2978      	cmp	r1, #120	; 0x78
 80061b8:	d1d4      	bne.n	8006164 <_printf_i+0x30>
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c0:	4864      	ldr	r0, [pc, #400]	; (8006354 <_printf_i+0x220>)
 80061c2:	e055      	b.n	8006270 <_printf_i+0x13c>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1d19      	adds	r1, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6011      	str	r1, [r2, #0]
 80061cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e08c      	b.n	80062f2 <_printf_i+0x1be>
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061e0:	bf18      	it	ne
 80061e2:	b21b      	sxthne	r3, r3
 80061e4:	e7cf      	b.n	8006186 <_printf_i+0x52>
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1d18      	adds	r0, r3, #4
 80061ec:	6010      	str	r0, [r2, #0]
 80061ee:	0628      	lsls	r0, r5, #24
 80061f0:	d501      	bpl.n	80061f6 <_printf_i+0xc2>
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	e002      	b.n	80061fc <_printf_i+0xc8>
 80061f6:	0668      	lsls	r0, r5, #25
 80061f8:	d5fb      	bpl.n	80061f2 <_printf_i+0xbe>
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	4854      	ldr	r0, [pc, #336]	; (8006350 <_printf_i+0x21c>)
 80061fe:	296f      	cmp	r1, #111	; 0x6f
 8006200:	bf14      	ite	ne
 8006202:	220a      	movne	r2, #10
 8006204:	2208      	moveq	r2, #8
 8006206:	2100      	movs	r1, #0
 8006208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620c:	6865      	ldr	r5, [r4, #4]
 800620e:	60a5      	str	r5, [r4, #8]
 8006210:	2d00      	cmp	r5, #0
 8006212:	f2c0 8095 	blt.w	8006340 <_printf_i+0x20c>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	f021 0104 	bic.w	r1, r1, #4
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d13d      	bne.n	800629e <_printf_i+0x16a>
 8006222:	2d00      	cmp	r5, #0
 8006224:	f040 808e 	bne.w	8006344 <_printf_i+0x210>
 8006228:	4665      	mov	r5, ip
 800622a:	2a08      	cmp	r2, #8
 800622c:	d10b      	bne.n	8006246 <_printf_i+0x112>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d508      	bpl.n	8006246 <_printf_i+0x112>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	429a      	cmp	r2, r3
 800623a:	bfde      	ittt	le
 800623c:	2330      	movle	r3, #48	; 0x30
 800623e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006242:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006246:	ebac 0305 	sub.w	r3, ip, r5
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	f8cd 8000 	str.w	r8, [sp]
 8006250:	463b      	mov	r3, r7
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff fef6 	bl	8006048 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14d      	bne.n	80062fc <_printf_i+0x1c8>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006264:	b005      	add	sp, #20
 8006266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800626a:	4839      	ldr	r0, [pc, #228]	; (8006350 <_printf_i+0x21c>)
 800626c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	6821      	ldr	r1, [r4, #0]
 8006274:	1d1d      	adds	r5, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6015      	str	r5, [r2, #0]
 800627a:	060a      	lsls	r2, r1, #24
 800627c:	d50b      	bpl.n	8006296 <_printf_i+0x162>
 800627e:	07ca      	lsls	r2, r1, #31
 8006280:	bf44      	itt	mi
 8006282:	f041 0120 	orrmi.w	r1, r1, #32
 8006286:	6021      	strmi	r1, [r4, #0]
 8006288:	b91b      	cbnz	r3, 8006292 <_printf_i+0x15e>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	f022 0220 	bic.w	r2, r2, #32
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	2210      	movs	r2, #16
 8006294:	e7b7      	b.n	8006206 <_printf_i+0xd2>
 8006296:	064d      	lsls	r5, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b29b      	uxthmi	r3, r3
 800629c:	e7ef      	b.n	800627e <_printf_i+0x14a>
 800629e:	4665      	mov	r5, ip
 80062a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a4:	fb02 3311 	mls	r3, r2, r1, r3
 80062a8:	5cc3      	ldrb	r3, [r0, r3]
 80062aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062ae:	460b      	mov	r3, r1
 80062b0:	2900      	cmp	r1, #0
 80062b2:	d1f5      	bne.n	80062a0 <_printf_i+0x16c>
 80062b4:	e7b9      	b.n	800622a <_printf_i+0xf6>
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	6825      	ldr	r5, [r4, #0]
 80062ba:	6961      	ldr	r1, [r4, #20]
 80062bc:	1d18      	adds	r0, r3, #4
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	0628      	lsls	r0, r5, #24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	d501      	bpl.n	80062ca <_printf_i+0x196>
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <_printf_i+0x19c>
 80062ca:	066a      	lsls	r2, r5, #25
 80062cc:	d5fb      	bpl.n	80062c6 <_printf_i+0x192>
 80062ce:	8019      	strh	r1, [r3, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	4665      	mov	r5, ip
 80062d6:	e7b9      	b.n	800624c <_printf_i+0x118>
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	1d19      	adds	r1, r3, #4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	681d      	ldr	r5, [r3, #0]
 80062e0:	6862      	ldr	r2, [r4, #4]
 80062e2:	2100      	movs	r1, #0
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7f9 ff73 	bl	80001d0 <memchr>
 80062ea:	b108      	cbz	r0, 80062f0 <_printf_i+0x1bc>
 80062ec:	1b40      	subs	r0, r0, r5
 80062ee:	6060      	str	r0, [r4, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2300      	movs	r3, #0
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	e7a7      	b.n	800624c <_printf_i+0x118>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	462a      	mov	r2, r5
 8006300:	4639      	mov	r1, r7
 8006302:	4630      	mov	r0, r6
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0aa      	beq.n	8006260 <_printf_i+0x12c>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d413      	bmi.n	8006338 <_printf_i+0x204>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e7a3      	b.n	8006264 <_printf_i+0x130>
 800631c:	2301      	movs	r3, #1
 800631e:	464a      	mov	r2, r9
 8006320:	4639      	mov	r1, r7
 8006322:	4630      	mov	r0, r6
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d09a      	beq.n	8006260 <_printf_i+0x12c>
 800632a:	3501      	adds	r5, #1
 800632c:	68e3      	ldr	r3, [r4, #12]
 800632e:	9a03      	ldr	r2, [sp, #12]
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	42ab      	cmp	r3, r5
 8006334:	dcf2      	bgt.n	800631c <_printf_i+0x1e8>
 8006336:	e7eb      	b.n	8006310 <_printf_i+0x1dc>
 8006338:	2500      	movs	r5, #0
 800633a:	f104 0919 	add.w	r9, r4, #25
 800633e:	e7f5      	b.n	800632c <_printf_i+0x1f8>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ac      	bne.n	800629e <_printf_i+0x16a>
 8006344:	7803      	ldrb	r3, [r0, #0]
 8006346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634e:	e76c      	b.n	800622a <_printf_i+0xf6>
 8006350:	08006a15 	.word	0x08006a15
 8006354:	08006a26 	.word	0x08006a26

08006358 <_sbrk_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4c06      	ldr	r4, [pc, #24]	; (8006374 <_sbrk_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4605      	mov	r5, r0
 8006360:	4608      	mov	r0, r1
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	f7fa fbce 	bl	8000b04 <_sbrk>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_sbrk_r+0x1a>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	b103      	cbz	r3, 8006372 <_sbrk_r+0x1a>
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	200002e4 	.word	0x200002e4

08006378 <__sread>:
 8006378:	b510      	push	{r4, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	f000 fa96 	bl	80068b0 <_read_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	bfab      	itete	ge
 8006388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800638a:	89a3      	ldrhlt	r3, [r4, #12]
 800638c:	181b      	addge	r3, r3, r0
 800638e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006392:	bfac      	ite	ge
 8006394:	6563      	strge	r3, [r4, #84]	; 0x54
 8006396:	81a3      	strhlt	r3, [r4, #12]
 8006398:	bd10      	pop	{r4, pc}

0800639a <__swrite>:
 800639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639e:	461f      	mov	r7, r3
 80063a0:	898b      	ldrh	r3, [r1, #12]
 80063a2:	05db      	lsls	r3, r3, #23
 80063a4:	4605      	mov	r5, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	4616      	mov	r6, r2
 80063aa:	d505      	bpl.n	80063b8 <__swrite+0x1e>
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	f000 f9b6 	bl	8006724 <_lseek_r>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	4632      	mov	r2, r6
 80063c6:	463b      	mov	r3, r7
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	f000 b869 	b.w	80064a4 <_write_r>

080063d2 <__sseek>:
 80063d2:	b510      	push	{r4, lr}
 80063d4:	460c      	mov	r4, r1
 80063d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063da:	f000 f9a3 	bl	8006724 <_lseek_r>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	bf15      	itete	ne
 80063e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ee:	81a3      	strheq	r3, [r4, #12]
 80063f0:	bf18      	it	ne
 80063f2:	81a3      	strhne	r3, [r4, #12]
 80063f4:	bd10      	pop	{r4, pc}

080063f6 <__sclose>:
 80063f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fa:	f000 b8d3 	b.w	80065a4 <_close_r>
	...

08006400 <__swbuf_r>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	460e      	mov	r6, r1
 8006404:	4614      	mov	r4, r2
 8006406:	4605      	mov	r5, r0
 8006408:	b118      	cbz	r0, 8006412 <__swbuf_r+0x12>
 800640a:	6983      	ldr	r3, [r0, #24]
 800640c:	b90b      	cbnz	r3, 8006412 <__swbuf_r+0x12>
 800640e:	f7ff fbf7 	bl	8005c00 <__sinit>
 8006412:	4b21      	ldr	r3, [pc, #132]	; (8006498 <__swbuf_r+0x98>)
 8006414:	429c      	cmp	r4, r3
 8006416:	d12a      	bne.n	800646e <__swbuf_r+0x6e>
 8006418:	686c      	ldr	r4, [r5, #4]
 800641a:	69a3      	ldr	r3, [r4, #24]
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	071a      	lsls	r2, r3, #28
 8006422:	d52e      	bpl.n	8006482 <__swbuf_r+0x82>
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	b363      	cbz	r3, 8006482 <__swbuf_r+0x82>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	1ac0      	subs	r0, r0, r3
 800642e:	6963      	ldr	r3, [r4, #20]
 8006430:	b2f6      	uxtb	r6, r6
 8006432:	4283      	cmp	r3, r0
 8006434:	4637      	mov	r7, r6
 8006436:	dc04      	bgt.n	8006442 <__swbuf_r+0x42>
 8006438:	4621      	mov	r1, r4
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f948 	bl	80066d0 <_fflush_r>
 8006440:	bb28      	cbnz	r0, 800648e <__swbuf_r+0x8e>
 8006442:	68a3      	ldr	r3, [r4, #8]
 8006444:	3b01      	subs	r3, #1
 8006446:	60a3      	str	r3, [r4, #8]
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	6022      	str	r2, [r4, #0]
 800644e:	701e      	strb	r6, [r3, #0]
 8006450:	6963      	ldr	r3, [r4, #20]
 8006452:	3001      	adds	r0, #1
 8006454:	4283      	cmp	r3, r0
 8006456:	d004      	beq.n	8006462 <__swbuf_r+0x62>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	07db      	lsls	r3, r3, #31
 800645c:	d519      	bpl.n	8006492 <__swbuf_r+0x92>
 800645e:	2e0a      	cmp	r6, #10
 8006460:	d117      	bne.n	8006492 <__swbuf_r+0x92>
 8006462:	4621      	mov	r1, r4
 8006464:	4628      	mov	r0, r5
 8006466:	f000 f933 	bl	80066d0 <_fflush_r>
 800646a:	b190      	cbz	r0, 8006492 <__swbuf_r+0x92>
 800646c:	e00f      	b.n	800648e <__swbuf_r+0x8e>
 800646e:	4b0b      	ldr	r3, [pc, #44]	; (800649c <__swbuf_r+0x9c>)
 8006470:	429c      	cmp	r4, r3
 8006472:	d101      	bne.n	8006478 <__swbuf_r+0x78>
 8006474:	68ac      	ldr	r4, [r5, #8]
 8006476:	e7d0      	b.n	800641a <__swbuf_r+0x1a>
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <__swbuf_r+0xa0>)
 800647a:	429c      	cmp	r4, r3
 800647c:	bf08      	it	eq
 800647e:	68ec      	ldreq	r4, [r5, #12]
 8006480:	e7cb      	b.n	800641a <__swbuf_r+0x1a>
 8006482:	4621      	mov	r1, r4
 8006484:	4628      	mov	r0, r5
 8006486:	f000 f81f 	bl	80064c8 <__swsetup_r>
 800648a:	2800      	cmp	r0, #0
 800648c:	d0cc      	beq.n	8006428 <__swbuf_r+0x28>
 800648e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006492:	4638      	mov	r0, r7
 8006494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006496:	bf00      	nop
 8006498:	080069c4 	.word	0x080069c4
 800649c:	080069e4 	.word	0x080069e4
 80064a0:	080069a4 	.word	0x080069a4

080064a4 <_write_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4c07      	ldr	r4, [pc, #28]	; (80064c4 <_write_r+0x20>)
 80064a8:	4605      	mov	r5, r0
 80064aa:	4608      	mov	r0, r1
 80064ac:	4611      	mov	r1, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fa fad5 	bl	8000a62 <_write>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_write_r+0x1e>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_write_r+0x1e>
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	200002e4 	.word	0x200002e4

080064c8 <__swsetup_r>:
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <__swsetup_r+0xcc>)
 80064ca:	b570      	push	{r4, r5, r6, lr}
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	4606      	mov	r6, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	b125      	cbz	r5, 80064de <__swsetup_r+0x16>
 80064d4:	69ab      	ldr	r3, [r5, #24]
 80064d6:	b913      	cbnz	r3, 80064de <__swsetup_r+0x16>
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff fb91 	bl	8005c00 <__sinit>
 80064de:	4b2e      	ldr	r3, [pc, #184]	; (8006598 <__swsetup_r+0xd0>)
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d10f      	bne.n	8006504 <__swsetup_r+0x3c>
 80064e4:	686c      	ldr	r4, [r5, #4]
 80064e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	0715      	lsls	r5, r2, #28
 80064ee:	d42c      	bmi.n	800654a <__swsetup_r+0x82>
 80064f0:	06d0      	lsls	r0, r2, #27
 80064f2:	d411      	bmi.n	8006518 <__swsetup_r+0x50>
 80064f4:	2209      	movs	r2, #9
 80064f6:	6032      	str	r2, [r6, #0]
 80064f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006502:	e03e      	b.n	8006582 <__swsetup_r+0xba>
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <__swsetup_r+0xd4>)
 8006506:	429c      	cmp	r4, r3
 8006508:	d101      	bne.n	800650e <__swsetup_r+0x46>
 800650a:	68ac      	ldr	r4, [r5, #8]
 800650c:	e7eb      	b.n	80064e6 <__swsetup_r+0x1e>
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <__swsetup_r+0xd8>)
 8006510:	429c      	cmp	r4, r3
 8006512:	bf08      	it	eq
 8006514:	68ec      	ldreq	r4, [r5, #12]
 8006516:	e7e6      	b.n	80064e6 <__swsetup_r+0x1e>
 8006518:	0751      	lsls	r1, r2, #29
 800651a:	d512      	bpl.n	8006542 <__swsetup_r+0x7a>
 800651c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800651e:	b141      	cbz	r1, 8006532 <__swsetup_r+0x6a>
 8006520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006524:	4299      	cmp	r1, r3
 8006526:	d002      	beq.n	800652e <__swsetup_r+0x66>
 8006528:	4630      	mov	r0, r6
 800652a:	f000 f973 	bl	8006814 <_free_r>
 800652e:	2300      	movs	r3, #0
 8006530:	6363      	str	r3, [r4, #52]	; 0x34
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	2300      	movs	r3, #0
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f043 0308 	orr.w	r3, r3, #8
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	b94b      	cbnz	r3, 8006562 <__swsetup_r+0x9a>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006558:	d003      	beq.n	8006562 <__swsetup_r+0x9a>
 800655a:	4621      	mov	r1, r4
 800655c:	4630      	mov	r0, r6
 800655e:	f000 f917 	bl	8006790 <__smakebuf_r>
 8006562:	89a2      	ldrh	r2, [r4, #12]
 8006564:	f012 0301 	ands.w	r3, r2, #1
 8006568:	d00c      	beq.n	8006584 <__swsetup_r+0xbc>
 800656a:	2300      	movs	r3, #0
 800656c:	60a3      	str	r3, [r4, #8]
 800656e:	6963      	ldr	r3, [r4, #20]
 8006570:	425b      	negs	r3, r3
 8006572:	61a3      	str	r3, [r4, #24]
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	b953      	cbnz	r3, 800658e <__swsetup_r+0xc6>
 8006578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006580:	d1ba      	bne.n	80064f8 <__swsetup_r+0x30>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	0792      	lsls	r2, r2, #30
 8006586:	bf58      	it	pl
 8006588:	6963      	ldrpl	r3, [r4, #20]
 800658a:	60a3      	str	r3, [r4, #8]
 800658c:	e7f2      	b.n	8006574 <__swsetup_r+0xac>
 800658e:	2000      	movs	r0, #0
 8006590:	e7f7      	b.n	8006582 <__swsetup_r+0xba>
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c
 8006598:	080069c4 	.word	0x080069c4
 800659c:	080069e4 	.word	0x080069e4
 80065a0:	080069a4 	.word	0x080069a4

080065a4 <_close_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4c06      	ldr	r4, [pc, #24]	; (80065c0 <_close_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4605      	mov	r5, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	f7fa fa73 	bl	8000a9a <_close>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_close_r+0x1a>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	b103      	cbz	r3, 80065be <_close_r+0x1a>
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	200002e4 	.word	0x200002e4

080065c4 <__sflush_r>:
 80065c4:	898a      	ldrh	r2, [r1, #12]
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	0710      	lsls	r0, r2, #28
 80065ce:	460c      	mov	r4, r1
 80065d0:	d458      	bmi.n	8006684 <__sflush_r+0xc0>
 80065d2:	684b      	ldr	r3, [r1, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc05      	bgt.n	80065e4 <__sflush_r+0x20>
 80065d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x20>
 80065de:	2000      	movs	r0, #0
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d0f9      	beq.n	80065de <__sflush_r+0x1a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d032      	beq.n	800665e <__sflush_r+0x9a>
 80065f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	075a      	lsls	r2, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x48>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ac0      	subs	r0, r0, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x48>
 8006608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800660a:	1ac0      	subs	r0, r0, r3
 800660c:	2300      	movs	r3, #0
 800660e:	4602      	mov	r2, r0
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	4628      	mov	r0, r5
 8006616:	47b0      	blx	r6
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	d106      	bne.n	800662c <__sflush_r+0x68>
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	291d      	cmp	r1, #29
 8006622:	d848      	bhi.n	80066b6 <__sflush_r+0xf2>
 8006624:	4a29      	ldr	r2, [pc, #164]	; (80066cc <__sflush_r+0x108>)
 8006626:	40ca      	lsrs	r2, r1
 8006628:	07d6      	lsls	r6, r2, #31
 800662a:	d544      	bpl.n	80066b6 <__sflush_r+0xf2>
 800662c:	2200      	movs	r2, #0
 800662e:	6062      	str	r2, [r4, #4]
 8006630:	04d9      	lsls	r1, r3, #19
 8006632:	6922      	ldr	r2, [r4, #16]
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	d504      	bpl.n	8006642 <__sflush_r+0x7e>
 8006638:	1c42      	adds	r2, r0, #1
 800663a:	d101      	bne.n	8006640 <__sflush_r+0x7c>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b903      	cbnz	r3, 8006642 <__sflush_r+0x7e>
 8006640:	6560      	str	r0, [r4, #84]	; 0x54
 8006642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006644:	602f      	str	r7, [r5, #0]
 8006646:	2900      	cmp	r1, #0
 8006648:	d0c9      	beq.n	80065de <__sflush_r+0x1a>
 800664a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664e:	4299      	cmp	r1, r3
 8006650:	d002      	beq.n	8006658 <__sflush_r+0x94>
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f8de 	bl	8006814 <_free_r>
 8006658:	2000      	movs	r0, #0
 800665a:	6360      	str	r0, [r4, #52]	; 0x34
 800665c:	e7c0      	b.n	80065e0 <__sflush_r+0x1c>
 800665e:	2301      	movs	r3, #1
 8006660:	4628      	mov	r0, r5
 8006662:	47b0      	blx	r6
 8006664:	1c41      	adds	r1, r0, #1
 8006666:	d1c8      	bne.n	80065fa <__sflush_r+0x36>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c5      	beq.n	80065fa <__sflush_r+0x36>
 800666e:	2b1d      	cmp	r3, #29
 8006670:	d001      	beq.n	8006676 <__sflush_r+0xb2>
 8006672:	2b16      	cmp	r3, #22
 8006674:	d101      	bne.n	800667a <__sflush_r+0xb6>
 8006676:	602f      	str	r7, [r5, #0]
 8006678:	e7b1      	b.n	80065de <__sflush_r+0x1a>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7ad      	b.n	80065e0 <__sflush_r+0x1c>
 8006684:	690f      	ldr	r7, [r1, #16]
 8006686:	2f00      	cmp	r7, #0
 8006688:	d0a9      	beq.n	80065de <__sflush_r+0x1a>
 800668a:	0793      	lsls	r3, r2, #30
 800668c:	680e      	ldr	r6, [r1, #0]
 800668e:	bf08      	it	eq
 8006690:	694b      	ldreq	r3, [r1, #20]
 8006692:	600f      	str	r7, [r1, #0]
 8006694:	bf18      	it	ne
 8006696:	2300      	movne	r3, #0
 8006698:	eba6 0807 	sub.w	r8, r6, r7
 800669c:	608b      	str	r3, [r1, #8]
 800669e:	f1b8 0f00 	cmp.w	r8, #0
 80066a2:	dd9c      	ble.n	80065de <__sflush_r+0x1a>
 80066a4:	4643      	mov	r3, r8
 80066a6:	463a      	mov	r2, r7
 80066a8:	6a21      	ldr	r1, [r4, #32]
 80066aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b0      	blx	r6
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dc06      	bgt.n	80066c2 <__sflush_r+0xfe>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066c0:	e78e      	b.n	80065e0 <__sflush_r+0x1c>
 80066c2:	4407      	add	r7, r0
 80066c4:	eba8 0800 	sub.w	r8, r8, r0
 80066c8:	e7e9      	b.n	800669e <__sflush_r+0xda>
 80066ca:	bf00      	nop
 80066cc:	20400001 	.word	0x20400001

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b1db      	cbz	r3, 8006712 <_fflush_r+0x42>
 80066da:	b118      	cbz	r0, 80066e4 <_fflush_r+0x14>
 80066dc:	6983      	ldr	r3, [r0, #24]
 80066de:	b90b      	cbnz	r3, 80066e4 <_fflush_r+0x14>
 80066e0:	f7ff fa8e 	bl	8005c00 <__sinit>
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <_fflush_r+0x48>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	d109      	bne.n	80066fe <_fflush_r+0x2e>
 80066ea:	686c      	ldr	r4, [r5, #4]
 80066ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f0:	b17b      	cbz	r3, 8006712 <_fflush_r+0x42>
 80066f2:	4621      	mov	r1, r4
 80066f4:	4628      	mov	r0, r5
 80066f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066fa:	f7ff bf63 	b.w	80065c4 <__sflush_r>
 80066fe:	4b07      	ldr	r3, [pc, #28]	; (800671c <_fflush_r+0x4c>)
 8006700:	429c      	cmp	r4, r3
 8006702:	d101      	bne.n	8006708 <_fflush_r+0x38>
 8006704:	68ac      	ldr	r4, [r5, #8]
 8006706:	e7f1      	b.n	80066ec <_fflush_r+0x1c>
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <_fflush_r+0x50>)
 800670a:	429c      	cmp	r4, r3
 800670c:	bf08      	it	eq
 800670e:	68ec      	ldreq	r4, [r5, #12]
 8006710:	e7ec      	b.n	80066ec <_fflush_r+0x1c>
 8006712:	2000      	movs	r0, #0
 8006714:	bd38      	pop	{r3, r4, r5, pc}
 8006716:	bf00      	nop
 8006718:	080069c4 	.word	0x080069c4
 800671c:	080069e4 	.word	0x080069e4
 8006720:	080069a4 	.word	0x080069a4

08006724 <_lseek_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4c07      	ldr	r4, [pc, #28]	; (8006744 <_lseek_r+0x20>)
 8006728:	4605      	mov	r5, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7fa f9d8 	bl	8000ae8 <_lseek>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_lseek_r+0x1e>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	b103      	cbz	r3, 8006742 <_lseek_r+0x1e>
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	200002e4 	.word	0x200002e4

08006748 <__swhatbuf_r>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006750:	2900      	cmp	r1, #0
 8006752:	b096      	sub	sp, #88	; 0x58
 8006754:	4614      	mov	r4, r2
 8006756:	461d      	mov	r5, r3
 8006758:	da07      	bge.n	800676a <__swhatbuf_r+0x22>
 800675a:	2300      	movs	r3, #0
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	89b3      	ldrh	r3, [r6, #12]
 8006760:	061a      	lsls	r2, r3, #24
 8006762:	d410      	bmi.n	8006786 <__swhatbuf_r+0x3e>
 8006764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006768:	e00e      	b.n	8006788 <__swhatbuf_r+0x40>
 800676a:	466a      	mov	r2, sp
 800676c:	f000 f8b2 	bl	80068d4 <_fstat_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	dbf2      	blt.n	800675a <__swhatbuf_r+0x12>
 8006774:	9a01      	ldr	r2, [sp, #4]
 8006776:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800677a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800677e:	425a      	negs	r2, r3
 8006780:	415a      	adcs	r2, r3
 8006782:	602a      	str	r2, [r5, #0]
 8006784:	e7ee      	b.n	8006764 <__swhatbuf_r+0x1c>
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	2000      	movs	r0, #0
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	b016      	add	sp, #88	; 0x58
 800678e:	bd70      	pop	{r4, r5, r6, pc}

08006790 <__smakebuf_r>:
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006794:	079d      	lsls	r5, r3, #30
 8006796:	4606      	mov	r6, r0
 8006798:	460c      	mov	r4, r1
 800679a:	d507      	bpl.n	80067ac <__smakebuf_r+0x1c>
 800679c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	b002      	add	sp, #8
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	ab01      	add	r3, sp, #4
 80067ae:	466a      	mov	r2, sp
 80067b0:	f7ff ffca 	bl	8006748 <__swhatbuf_r>
 80067b4:	9900      	ldr	r1, [sp, #0]
 80067b6:	4605      	mov	r5, r0
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff faab 	bl	8005d14 <_malloc_r>
 80067be:	b948      	cbnz	r0, 80067d4 <__smakebuf_r+0x44>
 80067c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d4ef      	bmi.n	80067a8 <__smakebuf_r+0x18>
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7e3      	b.n	800679c <__smakebuf_r+0xc>
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <__smakebuf_r+0x7c>)
 80067d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	6020      	str	r0, [r4, #0]
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	6163      	str	r3, [r4, #20]
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	6120      	str	r0, [r4, #16]
 80067ea:	b15b      	cbz	r3, 8006804 <__smakebuf_r+0x74>
 80067ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f881 	bl	80068f8 <_isatty_r>
 80067f6:	b128      	cbz	r0, 8006804 <__smakebuf_r+0x74>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	431d      	orrs	r5, r3
 8006808:	81a5      	strh	r5, [r4, #12]
 800680a:	e7cd      	b.n	80067a8 <__smakebuf_r+0x18>
 800680c:	08005bc9 	.word	0x08005bc9

08006810 <__malloc_lock>:
 8006810:	4770      	bx	lr

08006812 <__malloc_unlock>:
 8006812:	4770      	bx	lr

08006814 <_free_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4605      	mov	r5, r0
 8006818:	2900      	cmp	r1, #0
 800681a:	d045      	beq.n	80068a8 <_free_r+0x94>
 800681c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006820:	1f0c      	subs	r4, r1, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfb8      	it	lt
 8006826:	18e4      	addlt	r4, r4, r3
 8006828:	f7ff fff2 	bl	8006810 <__malloc_lock>
 800682c:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <_free_r+0x98>)
 800682e:	6813      	ldr	r3, [r2, #0]
 8006830:	4610      	mov	r0, r2
 8006832:	b933      	cbnz	r3, 8006842 <_free_r+0x2e>
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	6014      	str	r4, [r2, #0]
 8006838:	4628      	mov	r0, r5
 800683a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683e:	f7ff bfe8 	b.w	8006812 <__malloc_unlock>
 8006842:	42a3      	cmp	r3, r4
 8006844:	d90c      	bls.n	8006860 <_free_r+0x4c>
 8006846:	6821      	ldr	r1, [r4, #0]
 8006848:	1862      	adds	r2, r4, r1
 800684a:	4293      	cmp	r3, r2
 800684c:	bf04      	itt	eq
 800684e:	681a      	ldreq	r2, [r3, #0]
 8006850:	685b      	ldreq	r3, [r3, #4]
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	bf04      	itt	eq
 8006856:	1852      	addeq	r2, r2, r1
 8006858:	6022      	streq	r2, [r4, #0]
 800685a:	6004      	str	r4, [r0, #0]
 800685c:	e7ec      	b.n	8006838 <_free_r+0x24>
 800685e:	4613      	mov	r3, r2
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	b10a      	cbz	r2, 8006868 <_free_r+0x54>
 8006864:	42a2      	cmp	r2, r4
 8006866:	d9fa      	bls.n	800685e <_free_r+0x4a>
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	1858      	adds	r0, r3, r1
 800686c:	42a0      	cmp	r0, r4
 800686e:	d10b      	bne.n	8006888 <_free_r+0x74>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	4401      	add	r1, r0
 8006874:	1858      	adds	r0, r3, r1
 8006876:	4282      	cmp	r2, r0
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	d1dd      	bne.n	8006838 <_free_r+0x24>
 800687c:	6810      	ldr	r0, [r2, #0]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	4401      	add	r1, r0
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	e7d7      	b.n	8006838 <_free_r+0x24>
 8006888:	d902      	bls.n	8006890 <_free_r+0x7c>
 800688a:	230c      	movs	r3, #12
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	e7d3      	b.n	8006838 <_free_r+0x24>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	1821      	adds	r1, r4, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	bf04      	itt	eq
 8006898:	6811      	ldreq	r1, [r2, #0]
 800689a:	6852      	ldreq	r2, [r2, #4]
 800689c:	6062      	str	r2, [r4, #4]
 800689e:	bf04      	itt	eq
 80068a0:	1809      	addeq	r1, r1, r0
 80068a2:	6021      	streq	r1, [r4, #0]
 80068a4:	605c      	str	r4, [r3, #4]
 80068a6:	e7c7      	b.n	8006838 <_free_r+0x24>
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	bf00      	nop
 80068ac:	20000090 	.word	0x20000090

080068b0 <_read_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4c07      	ldr	r4, [pc, #28]	; (80068d0 <_read_r+0x20>)
 80068b4:	4605      	mov	r5, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	6022      	str	r2, [r4, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fa f8b2 	bl	8000a28 <_read>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_read_r+0x1e>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_read_r+0x1e>
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	200002e4 	.word	0x200002e4

080068d4 <_fstat_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4c07      	ldr	r4, [pc, #28]	; (80068f4 <_fstat_r+0x20>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4605      	mov	r5, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	f7fa f8e6 	bl	8000ab2 <_fstat>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d102      	bne.n	80068f0 <_fstat_r+0x1c>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	b103      	cbz	r3, 80068f0 <_fstat_r+0x1c>
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	200002e4 	.word	0x200002e4

080068f8 <_isatty_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4c06      	ldr	r4, [pc, #24]	; (8006914 <_isatty_r+0x1c>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4605      	mov	r5, r0
 8006900:	4608      	mov	r0, r1
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	f7fa f8e5 	bl	8000ad2 <_isatty>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_isatty_r+0x1a>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	b103      	cbz	r3, 8006912 <_isatty_r+0x1a>
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200002e4 	.word	0x200002e4

08006918 <_init>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr

08006924 <_fini>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr
